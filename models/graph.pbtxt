node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content: "}[o\225S6\334\277+\325\352\004\370u\232?$`\003\270\005\273\251\277\001\177U\2760\250\335?\010\261_\331\321\310\334\277UE)\314\340\337\336?\333DzM9\352\346\277\202\270\234\333H\311\351?`\227F\370\241\233\302\277\272`>\237g\264\350\277\001\331^k\020Z\326?U\2372y\300\221\327?\023>?\002\300\256\301\277\376\205\343A\000\263\322?1^\311\204\371\310\353\277V/\274\201P\337\341?\216\243\037\007\177\216\005\3001\347\212\331x\353\343\277\263=\007\36518\337\277.\230\277 \271\337\357?\260\361\031O\361\233\320\277k\2223\236\214\'\361?\022\374\356\201\303y\273\277Fo\361\223\371P\353\277\252\360M\356\203\210\303\277\327\321\353\022\t\250\356?Y\323w4\351\357\367\277\356\036\366\344\264\357\360\277\340+\346!9\016\333\277]w3\347\201\000\336\277\2744\244\3452\374\344\277Z&\363]\371\226\373\277\203\323\\\t!\227\372?\273\342\237J\003\233\266\277\273\342\237J\003\233\266\277\254\270\201\260\200p\334?\254H\013\271\020\276\346?\370\026a,\370\251\277\277Cv\177\027\311[\340\277U\362\255\242\3208\333?\205\240\021\211Q\033\322\277\260a\220FaN\346\277\264\260\225/bz\307\277ZHA\017\241o\341\2778\235\023q|\370\246?\227u\035\245d\303\361?i\013\247>\352\031\341\277\252\277\0174P{\321?He\302#\215\001\324\277q\022,\317\264\001\343\277/\270\3221\331z\344\277,\237M\244\210\352\344?\204++\026y\013\342\277`\227F\370\241\233\302\277\346\373\241\242^\343\340\277\000i\350s\240\247\340?U\371;&\240C\320?\363\347\330o\376Z\260?\261\352\213\313!\221\333\277\301X\007\254<_\362?o)\242\362M0\324\277m\345\256\307\234\316\364?\260a\220FaN\346\277\320\336u\351{\312\330\277\014\367\020Q\203\004\340\277\017\251sX\263\322\267\277\030\002\340\353\214\213\361\277UE)\314\340\337\336?T32\302_Z\304?U\362\255\242\3208\333?\227\310\230\316tj\365?c\311P\023C\274\261\277,\272\r\322`\270\365?\326\330y\226\330\262\343?\320B\003\331T\231\260?\255\206.\307\356\343\303?UE)\314\340\337\336?\261D\225x\001C\324\277\353\2328L\233\365\275\2772\312\217\013\031\340\321\277\200\022\246\210({\342?\254\275\324\223\310=\360?\261D\225x\001C\324\277\005{\337}!-\353\277U\2372y\300\221\327?\264\260\225/bz\307\277\t$\356\023\002\013\305\277\002\327#\313\210\034\365?\273\342\237J\003\233\266\277n\326,t\350\261\351?*\026\214O\t\310\354?\227,\273\320\330\375\003@\202-f\266\000I\363?UE)\314\340\337\336?D8E\034u\316\365\277\230\033\024\370\204\021\371?\330\3639\304\260\200\364?U\371;&\240C\320?\333DzM9\352\346\277+\325\352\004\370u\232?+\362\310\315\230\221\350?\007\316Z\2471\324\356\277\265\n\237\334A,\300\277ZHA\017\241o\341\277UL\267O\260\352\323?\007^\344\257\301!\331\277\2565)@5\224\n\300]w3\347\201\000\336\277\026\255\332\372\022\002\276\277\245L\201\371\0379\311?\255\233\206\342 e\352?X\325\262\324p-\351?\233hv6\321\020\301?\374\277\331\335\277\311\306?s\261\262\310\257\335\020\300J\001(\247\2769\265?\244\030j\030\343\251\363\277\363\347\330o\376Z\260?\254\356\001\0141\014\356?n\213\245\032\275\034\374?\374e\3200\340\027\316?\233\244\017}ET\376\277\302\253\202\325L\006\366?`\227F\370\241\233\302\277\\\321<\224a\262\326\277\245L\201\371\0379\311?9\277\271\236\334\353{?\326\240\276\232\240\331\360?\256\212\225iN\023\312?\230\364\377\324\240$\001\300\004\251\201$\325$\010\300\255\t\3029\t\332\376?\217\006\026\355\016;\340\277\254\270\201\260\200p\334?\202e!\2628\"\346?\331\263\333\025K\035\306\277\230n\217!\225\270\374?\202e!\2628\"\346?\001\177U\2760\250\335?\261D\225x\001C\324\277\324\363\356Q\244!\263?\007^\344\257\301!\331\277\317\223A\276\301\017\253?\014\312\344f\"Y\314\277m\345\256\307\234\316\364?BU@\352\324\331\367?\006\013i\206\261z\325\277\263=\007\36518\337\277c\311P\023C\274\261\277$`\003\270\005\273\251\277U\371;&\240C\320?\202\355\007\010\233\345\304\277VY2\210s\301\301\277U\2372y\300\221\327?\261D\225x\001C\324\277\374e\3200\340\027\316?8\323O<k\005\365\277\033\000\245K\005N\320\277`==K\302\351\311\277\037\271m\247\303\200\353?9\277\271\236\334\353{?.eW\010\311\323\340\277\245\020\252\315\224\217\301\277\006\013i\206\261z\325\277\035\353\033k\023\000\211\277\202\270\234\333H\311\351?/C\tW!\373\372\277\0029U\315\343\327\307\277U\371;&\240C\320?\001\350\312\243\334\010\000@,\237M\244\210\352\344?\204++\026y\013\342\277\221E\2664x\317\333\277/\360\215-\021T\367\277\332\272oD\305P\344\277\254\020P\275\330\344\363?7\302\213\313\366\210\003@\273\342\237J\003\233\266\277k\2223\236\214\'\361?\336D\312\357\205\200\003\3004q\233\215\227\255\337?W\360r\002I\373\371?\332\361\376#)C\343\277U\2372y\300\221\327?\001\350\312\243\334\010\000@E\371<W\255pb?qV\324\207Y\004\301?\254\270\201\260\200p\334?\243#\222\361\032\342\006@\252\022\213]`\"\325?9\277\271\236\334\353{?X-\201\341\310\241\360\277\260\264\013pq\365\351\277U\362\255\242\3208\333?1\347\212\331x\353\343\277,g\222\250P\021\362?\314`\205\245\322/\000@\3352zP\263A\351?\260\361\031O\361\233\320\277R=\342\315\212\363\250\277\003\272(\375(\021\363\277\000i\350s\240\247\340?,\237M\244\210\352\344?T32\302_Z\304?\027\243I+$\354\327?\002\274c\235\260N\344?`==K\302\351\311\277\363\347\330o\376Z\260?\301X\007\254<_\362?\264k\371=2\306\370\277+ED\367\2508\354?\022\374\356\201\303y\273\277\204++\026y\013\342\277[~\301jQ\013\323\277\326\330y\226\330\262\343?\036t\260\277\300\376\266\277\376\205\343A\000\263\322?\254\275\324\223\310=\360?\333DzM9\352\346\277\201\027\347\362\004b\235?\010\261_\331\321\310\334\277\003}\032\036\251j\374?\200\022\246\210({\342?\254\270\201\260\200p\334?`\227F\370\241\233\302\277T32\302_Z\304?\3713\306\025?\367\276?\007^\344\257\301!\331\277F${|\231\372\261\277`==K\302\351\311\2770\013N[\351!\350\277}b\375\030#A\321\277\016\377!\271\210\246\334\277\241|\230\325\256<\255\277\273\342\237J\003\233\266\277\203\342\022\342k\253\311\277\002*\237\364\230\303\370?\342o\302_t\010\355\277\374\277\331\335\277\311\306?Z\233\2748\261\026\345\277\363\347\330o\376Z\260?,\237M\244\210\352\344?\374\277\331\335\277\311\306?\006\270\355\\\241\323\321\277\301\274)\256\240\362\000@\027rV\343\374=\367?/\270\3221\331z\344\277\005(dT\021\206\347\277\267V\214\202\202\310\316\277\260\361\031O\361\233\320\277\376\205\343A\000\263\322?.eW\010\311\323\340\277\357j\343\212\365\213\377\277\221E\2664x\317\333\2779W\276\255\242Z\351?\246\204M7#Q\320\277\351\373\333\322\237\003\336\277\022\374\356\201\303y\273\277\334\317\373\344\215\311\276\277`==K\302\351\311\277HJ\037\216\325\303\331\277,g\222\250P\021\362?\201\226+\347\3257\344\277\355A\223\365\373g\332?\202\200\341\337\020\360\366?X-\201\341\310\241\360\277\210\376\201\330\220\374\320\277\370^/\332\202\231\001\300\227u\035\245d\303\361?\330+\365\277\350Y\347?\344\3152\257\263\351\353\277l\274\222\2679\242\343\277$`\003\270\005\273\251\277_\301\216$\331\256\327\277\326\330y\226\330\262\343?\202\013\030\005Yp\355?\033\376+\306f\252\244\277+ED\367\2508\354?W\360r\002I\373\371?\260\361\031O\361\233\320\2779\375\256U\030\200\327\277\005{\337}!-\353\277\302\376\375\376\\\255\371?,\237M\244\210\352\344?Z\233\2748\261\026\345\277\006\270\355\\\241\323\321\277T32\302_Z\304?\302\376\375\376\\\255\371?\327F\265\355\300\'\370?W\256\236\261\214@\001@\327\2310\027\321\316\373?\276\356\251\237\220T\310\277=o4\267?\224\333\277\254\356\001\0141\014\356?\254H\013\271\020\276\346?\006\270\355\\\241\323\321\277X\235\367\3308T\366?\261\352\213\313!\221\333\277\016\247\346\310\346\023\000\300\001,\332\224 \001\332?\262\314\270\351x$\206?_\272\306p\310\203\345\277A\257I\227\264\213\360?\265\n\237\334A,\300\277z\204G\025\365\323\251\277\003\272(\375(\021\363\277\251g\214\231\004f\313\277\327\232V\210\372\214\326\277\252\277\0174P{\321?\217\007Y\366X\211\301\277.J\227\332\360\005\360\277Z\233\2748\261\026\345\2779\277\271\236\334\353{?`\227F\370\241\233\302\277\035\353\033k\023\000\211\277\263=\007\36518\337\277GlVR\0075\342?/\270\3221\331z\344\277L\354ep\245v\301\277\244\221\315H\003W\013\300w\376\007\037\035\203\301\277\260\254.\215\002K\301\277}\200\226m\004\221\265?\254\356\001\0141\014\356?T\331(\025\200\250\313?\333=\373g\031+\336?+ED\367\2508\354?+\325\352\004\370u\232?\254H\013\271\020\276\346?bR\372\250\276}\000@[A\263\213\321d\354\277\343\026x\353\036\037\003\300\3713\306\025?\367\276?\215\210_\331\246\300\004@[A\263\213\321d\354\277\t$\356\023\002\013\305\277\006\270\355\\\241\323\321\277\355;\361\262\024\373\362?\004\202m\001\3617\340\277\273\342\237J\003\233\266\277\273\342\237J\003\233\266\277\254\365\217\217\000\027\343?-`\004%\201\006\375?g\367;#\325q\257?\004\202m\001\3617\340\277\312\244\216\353k\377\340\277n\213\245\032\275\034\374?\355;\361\262\024\373\362?\273\342\237J\003\233\266\277\376\205\343A\000\263\322?\266\2324;\'\313\354?9\277\271\236\334\353{?+ED\367\2508\354?\252\022\213]`\"\325?\264\260\225/bz\307\277\260a\220FaN\346\277U\2372y\300\221\327?\326\205\376l\310\013\340?\256\336\031lg\350\321?V/\274\201P\337\341?[~\301jQ\013\323\277Z\233\2748\261\026\345\277\355\341\347\0055I\372?\001,\332\224 \001\332?\333 \267\313\310\263\342\277\355;\361\262\024\373\362?\260\361\031O\361\233\320\277\177K\207\365\211\022\340\277.eW\010\311\323\340\277T\331(\025\200\250\313?\002\017\337\306\300\365\347?\333q\213\225N\350\277\277\374\277\331\335\277\311\306?\327,\201\356F\034\360?.eW\010\311\323\340\277X\325\262\324p-\351?\376\205\343A\000\263\322?x\30656oB\341\277\255\233\206\342 e\352?\360\027ha\345\344\373\277\230\033\024\370\204\021\371?\353_\227\234d\241\340?\001\177U\2760\250\335?\001\331^k\020Z\326?n\336 D\315\303\377?\316\\\305m!G\372\277\226?\272\341\324\267\346?\376\205\343A\000\263\322?9\277]mN\213\337?\234\032w\336~\030\272?\010:!.Q\353\324\277VJ|\257(\255\362?\\\321<\224a\262\326\277]$\270\275qY\332\277\2753\225a\177\245\327\277[~\301jQ\013\323\277\245L\201\371\0379\311?\022\374\356\201\303y\273\277\001\350\312\243\334\010\000@\273\226\276\372\027P\332\277\205~\246?\211\262\345\277A\002\305\300\3042\364?\353\307j\341\246\311\332\277\260\361\031O\361\233\320\277\325\352\177>\t\204\332?\010\261_\331\321\310\334\277\027\326x\345`\321\005@\001\331^k\020Z\326?,g\222\250P\021\362?\273(\240;Pk\334\277m8*\361\254u\370?\302\376\375\376\\\255\371?\273\342\237J\003\233\266\277\002\204\250\241xu\361?\343\026x\353\036\037\003\300\001,\332\224 \001\332?\005\325\350*\001\337\343\277UL\267O\260\352\323?\257\016\025\035Q\247\342\277\326\020R*1\034\355?-\r\211\373p_\371?\202\270\234\333H\311\351?\n\316\335S\252p\341?\005\325\350*\001\337\343\277\245L\201\371\0379\311?\260a\220FaN\346\277\246\22251\250\237\217\2779\277\271\236\334\353{?\t$\356\023\002\013\305\277`==K\302\351\311\277[\3567b\301\275\350\277\354Z\312\222\n\373\237\277Q\314\017<?\230\354\277\203\323\\\t!\227\372?\254\270\201\260\200p\334?=\203\017\231\346\246\343\277\035\353\033k\023\000\211\277\npm\004k\217\342?\204`hh\337X\342?\330\3639\304\260\200\364?\316\307-\240\316j\262\277\350\007\303\344a\004\360\277\272<{\035\367}\344\277o\267\014!\351\326\007\300K\030\006\325\204W\356\277\274\215\236\016_W\320\277T\331(\025\200\250\313?.\230\277 \271\337\357?\006\013i\206\261z\325\277\321\263\352\263\372h\342\277X\325\262\324p-\351?X\325\262\324p-\351?+\362\310\315\230\221\350?\006\013i\206\261z\325\277\202-f\266\000I\363?T\331(\025\200\250\313?V/\274\201P\337\341?ew\352\030\221\224\304\277\305\'N\224V\321\336\277\021\250\002u}\265\333?\036\371\026\3105C\333\277\276R\200]Z\217\271?\261\227\020\242\021\352\327\277\332\033GP`V\350?\225\355\201\301\016_\324\277u\001;V\342\257\322?@\222\036KM\276\253?\254\275\324\223\310=\360?\022\374\356\201\303y\273\277\347\363\312j\232a\341\277U\362\255\242\3208\333?h\rW\321}\240\021\300U\371;&\240C\320?\362\237\003E;I\331?\3713\306\025?\367\276?\246\222\335\236D\247\304\2779\277\271\236\334\353{?\330\3639\304\260\200\364?\303\0239\202n\236\331\277[~\301jQ\013\323\277UE)\314\340\337\336?\022\374\356\201\303y\273\277\255c\313\346\350\213\367?9\277\271\236\334\353{?\376\205\343A\000\263\322?\227u\035\245d\303\361?\234\032w\336~\030\272?\230n\217!\225\270\374?\004\251\201$\325$\010\300\253])\244\001\037\340\277.eW\010\311\323\340\277\007\316Z\2471\324\356\277]w3\347\201\000\336\277\302\370\225\354\266`\337\277\004\251\201$\325$\010\300\326\330y\226\330\262\343?U\371;&\240C\320?<\234s\331@a\257\277\002;F\315\354\257\003@\376\205\343A\000\263\322?\032\213\276\330,>\340\277\005\325\350*\001\337\343\277`\227F\370\241\233\302\277\316\004\277}\200\235\277\277\273\342\237J\003\233\266\277T\331(\025\200\250\313?X\325\262\324p-\351?\001\265\325\031\341C\357?U\371;&\240C\320?\255\t\3029\t\332\376?\355\216l\334$\242\366?V\2027\253`\206\345?\205\321!i\231Y\351\277\027\037\333\271\354\226\363?T32\302_Z\304?U\302\243S7.\336?\302Qy(mT\375?\277\031V\"\010\214\262?\235\003xc\302$\315?\355\216l\334$\242\366?/\270\3221\331z\344\277K\347\365\364<\031\327\277\301N\373~\233\310\332?UE)\314\340\337\336?\255\t\3029\t\332\376?\257\016\025\035Q\247\342\277[\3567b\301\275\350\277\367Co\254\252\313\000@c\311P\023C\274\261\277\027\037\333\271\354\226\363?\000i\350s\240\247\340?\t$\356\023\002\013\305\277\225\267;\226\237\343\337\277\322!\ts\302M\340\277\240\237\241\245\370\351\273\277\363\347\330o\376Z\260?\261\227\020\242\021\352\327\277k\2223\236\214\'\361?\254\275\324\223\310=\360?\243#/\300\n\"\254?`==K\302\351\311\277\254\020P\275\330\344\363?[~\301jQ\013\323\277\245\246\212\246\377\352\301?Z\233\2748\261\026\345\277.eW\010\311\323\340\277}\346\210\"{&\354\277}\257\371B\0274\355\277\005\325\350*\001\337\343\277s\315\0223\332\341\310?\014\312\344f\"Y\314\277I\227\255\002\362\236\304?\204++\026y\013\342\277\001\177U\2760\250\335?\\\321<\224a\262\326\277$`\003\270\005\273\251\277ZHA\017\241o\341\277`==K\302\351\311\277\005(dT\021\206\347\277T\331(\025\200\250\313?U\371;&\240C\320?\005\325\350*\001\337\343\277\000i\350s\240\247\340?\327~p\351\370\000\353?\202-f\266\000I\363?,g\222\250P\021\362?\273\342\237J\003\233\266\277X-\201\341\310\241\360\277.eW\010\311\323\340\277\006\013i\206\261z\325\277\261D\225x\001C\324\277Y\200\374\n\331H\364\277\245\246\212\246\377\352\301?T32\302_Z\304?\332\361\376#)C\343\277\r\023\375\232/\271\344\277/\270\3221\331z\344\2770\013N[\351!\350\277)%\361\n\235T\341?m\345\256\307\234\316\364?\365\207x\362C\233\341\277\357\263E_\201Q\r\300\027\037\333\271\354\226\363?\257F\320\030\211\200\365\277\263=\007\36518\337\277\376\205\343A\000\263\322?[~\301jQ\013\323\277\3713\306\025?\367\276?\261D\225x\001C\324\277ZHA\017\241o\341\277m\345\256\307\234\316\364?\376\207iT\224O\305\277UE)\314\340\337\336?Y\022\373\3431\364\354\277\027\037\333\271\354\226\363?Y\311^\337d\016\002\300\261\352\213\313!\221\333\277\255c\313\346\350\213\367?\214+\034x\311\277\305\277\014\033\324\322\363:\344\277~#\227\001\373\314\322\277.\346t\330\214r\001\3009\203BL\357\244\013\300\355\341\347\0055I\372?U\371;&\240C\320?R\2247\250\346.\343\277\254\270\201\260\200p\334?\3713\306\025?\367\276?U\362\255\242\3208\333?\254H\013\271\020\276\346?V\2027\253`\206\345?FD2\331\341\367\300?\327F\265\355\300\'\370?\005\325\350*\001\337\343\277\347\303\003?G\232\324\277T\331(\025\200\250\313?I\323\340\342T\346\321\277\3564c/E\360\375?UL\267O\260\352\323?\030\030M6\035\214\376?\035\353\033k\023\000\211\277+\325\352\004\370u\232?J\027\275 \220\340\343\277\2708N\253\330n\333\277\203&\33021>\376?\202\013\030\005Yp\355?\245\246\212\246\377\352\301?U\362\255\242\3208\333?n\310\263\371<\303\362\277CcI\236\356]\250\277\251e\006\207p\311\330?\006\270\355\\\241\323\321\277\265\n\237\334A,\300\277\220%\266\t?f\243\277\363X\300J\244*\342\277\254\270\201\260\200p\334?\273\342\237J\003\233\266\277]$\270\275qY\332\277\304f\264\253~E\335\2771\261D\256\tp\357\277\254\020P\275\330\344\363?Y\034\332\010u\265\005\300&\263\331^MX\316\277o\n\210J\371}\013\300\3310e;Q\267\341\277\257\016\025\035Q\247\342\277T\331(\025\200\250\313?\3564c/E\360\375?\035\353\033k\023\000\211\277\254H\013\271\020\276\346?\203V\266K\372l\330\277\035\353\033k\023\000\211\277UE)\314\340\337\336?\301\254\250Fv\304\320\277n\033/#Mj\366\277\265\n\237\334A,\300\277\212I\362DF*\321?S\222\345\032\351\211\344?\327\321\353\022\t\250\356?\331\354\253@\341u\377?\240(\030\210k\255\362\277\006\270\355\\\241\323\321\277,\272\r\322`\270\365?\267V\214\202\202\310\316\277\316\t\307\356\273\013\322\277\3713\306\025?\367\276?\261\352\213\313!\221\333\277\273\342\237J\003\233\266\277\205~\246?\211\262\345\277\327\321\353\022\t\250\356?,L\322zxC\341?\001,\332\224 \001\332?\327\321\353\022\t\250\356?\355\216l\334$\242\366?J\003\256\271R\326\327?`==K\302\351\311\277\017]\222\010\310\207\333\277\332\030\023G\r0\013\300\002\274c\235\260N\344?\202\270\234\333H\311\351?\357j\343\212\365\213\377\277+ED\367\2508\354?\230\033\024\370\204\021\371?c\3005\000\247\362\004\300\275Dw<\242\253\273\277\010\261_\331\321\310\334\2779\277\271\236\334\353{?\267\030\316\266n\265\001@+\325\352\004\370u\232?\326\330y\226\330\262\343?\250\006\201\010\323h\323\277X\032\322\033\366u\354\277\213\3230\323P\273\327\277`\227F\370\241\233\302\277H\244.\346_\236\353?n;\343c\300KU?\252\277\0174P{\321?\251\301\225F\344\027\304\277\272<{\035\367}\344\277T\331(\025\200\250\313?\254\356\001\0141\014\356?\n\202^cA\354\303\277w\263i\330{\206\346\277V\2027\253`\206\345?\200\022\246\210({\342?\\\321<\224a\262\326\277.\272\302_TY\264?X-\201\341\310\241\360\277\343\026x\353\036\037\003\300Z&\363]\371\226\373\277\005m\314\300\252B\362\277\330+\365\277\350Y\347?\376\205\343A\000\263\322?\212g\230&\035s\274\277k\2223\236\214\'\361?[~\301jQ\013\323\277e\'\301b\202\235\260\277,L\322zxC\341?VJ|\257(\255\362?\326\240\276\232\240\331\360?\230\033\024\370\204\021\371?\257\016\025\035Q\247\342\277\344i\363\024/\306\006\300h\023\270\246\357\273\335\277\200\022\246\210({\342?$`\003\270\005\273\251\277.eW\010\311\323\340\2770\013N[\351!\350\277X\235\367\3308T\366?\202\200\341\337\020\360\366?\232\376\030*%\006\367\277XN\223\257;F\014\300UE)\314\340\337\336?V/\274\201P\337\341?\376\252\351\314\2727\350\277`\360F\314x\037\327\277\001,\332\224 \001\332?8\235\023q|\370\246?\t$\356\023\002\013\305\277\254\020P\275\330\344\363?Y\323w4\351\357\367\277.\235\022\004\001\255\363\277\374\277\331\335\277\311\306?E\336;o\225\034\375\277n\213\245\032\275\034\374?+\325\352\004\370u\232?\267V\214\202\202\310\316\277cc\265\223\3146\234?\245L\201\371\0379\311?\241n!\003\345\231\020\300\255\206.\307\356\343\303?\326\330y\226\330\262\343?\333\227\365vI\221\352\2770\013N[\351!\350\277\3713\306\025?\367\276?+\362\310\315\230\221\350?\004V\006\373\304}\004\300U\371;&\240C\320?+\362\310\315\230\221\350?\336Y-\346\242a\276?Ez\031m1\211\016\300\002\017\337\306\300\365\347?\327F\265\355\300\'\370?\031U[\025\2352\365\277\370M\274\206\305\244\312\277\333\236\275*Z\274\334\277J\230\3021P\036\273?\006\013i\206\261z\325\2779\277\271\236\334\353{?\260a\220FaN\346\277\252\277\0174P{\321?\005(dT\021\206\347\277\332\030\023G\r0\013\300\254H\013\271\020\276\346?\264\260\225/bz\307\2771\365\346\273\003J\344?\212\315\253(\212\336\306\277\202\200\341\337\020\360\366?T32\302_Z\304?z\276^\376\252\300\341\277\177\034\t~+\302\335\277\200\022\246\210({\342?\275\341.g\315}\332?\261D\225x\001C\324\277.eW\010\311\323\340\277\354Z\312\222\n\373\237\277,\272\r\322`\270\365?/\270\3221\331z\344\277.\230\277 \271\337\357?\330+\365\277\350Y\347?T32\302_Z\304?D\3736=\365\'\377?\265\365\200\361P\313\326\277p\211jz5\337\352\277\264\260\225/bz\307\277\260a\220FaN\346\277\355\216l\334$\242\366?\001\177U\2760\250\335?\205~\246?\211\262\345\277y[h\030\033\024\007\300\363\347\330o\376Z\260?`==K\302\351\311\277\330\252\327\357$\273\006@\260a\220FaN\346\277\202\013\030\005Yp\355?,L\322zxC\341?U\2372y\300\221\327?\273\342\237J\003\233\266\277\261D\225x\001C\324\277\007s\002\233\262\202\302\277C\374\\\256\036\346\331\277\376\205\343A\000\263\322?\224\356\220E\302\265\341\277-`\004%\201\006\375?\254\365\217\217\000\027\343?\267V\214\202\202\310\316\277.\230\277 \271\337\357?\261D\225x\001C\324\277\333DzM9\352\346\277\3713\306\025?\367\276?\000i\350s\240\247\340?\224\020\002:5G\347?/\270\3221\331z\344\277\355;\361\262\024\373\362?ZHA\017\241o\341\277\301\274)\256\240\362\000@P\307\231\025,\022\331\277J\001(\247\2769\265?\242\200\354?nJ\343?/\360\215-\021T\367\277\3713\306\025?\367\276?\305\010\373\215N\370\304\277\203&\33021>\376?`\227F\370\241\233\302\277o\267\014!\351\326\007\300\\\321<\224a\262\326\2778\224\000\022\271\370\303\277,L\322zxC\341?\205$\235\222\251\000\355\277,\272\r\322`\270\365?\230\253\235\000\025_\363\277\001\177U\2760\250\335?\255c\313\346\350\213\367?\002\274c\235\260N\344?\t_\371\336\037\241\337?:\354\'\370,p\244?\251e\006\207p\311\330?X\325\262\324p-\351?\266\347\r\"P\005\371\277\273\342\237J\003\233\266\277,\237M\244\210\352\344?\335\342\223\275\352\215\305\277\236\034\367Eh\214\343\277\254H\013\271\020\276\346?\202\200\341\337\020\360\366?\344\261Fe\0075\347\277\002\017\337\306\300\365\347?3z\n\2412K\270?\3713\306\025?\367\276?\355\216l\334$\242\366?\007^\344\257\301!\331\277\360\027ha\345\344\373\277A\257I\227\264\213\360?T32\302_Z\304?[\3567b\301\275\350\277]w3\347\201\000\336\277\261D\225x\001C\324\277d\274\325\332\177\345\323\2771\261D\256\tp\357\277C\345\311\362d\'\362\277\261\227\020\242\021\352\327\277\255\215*\000\226\006\352\277\002\017\337\306\300\365\347?T32\302_Z\304?\333DzM9\352\346\277\326\205\376l\310\013\340?\\\321<\224a\262\326\277\260\361\031O\361\233\320\277)\304S/Co\332\277\327\321\353\022\t\250\356?_\333\356\260F\236\340?\252\277\0174P{\321?\035\353\033k\023\000\211\277\001\177U\2760\250\335?\372\004&-\243\347\010\300)\nNu\345\026\347?\261\227\020\242\021\352\327\277\300vb\033\007I\334\277\006\270\355\\\241\323\321\277\022\374\356\201\303y\273\277\357`\3125q\252\t\300\233hv6\321\020\301?\014\312\344f\"Y\314\277\247w\322\376_z\302?O\202FI\020\322\301?,\237M\244\210\352\344?.\230\277 \271\337\357?~\370\216!\317\377\360?]w3\347\201\000\336\277\252\277\0174P{\321?\332\361\376#)C\343\277\261D\225x\001C\324\277\261\352\213\313!\221\333\277\027\037\333\271\354\226\363?\260\361\031O\361\233\320\277\277\017\322\337\016o\323\277\000i\350s\240\247\340?\311K`=\251\254\301?\205}c6?d\324?:\025\037\264\n\221\260\277\327\321\353\022\t\250\356?\241/\375\323\234h\333\277\205\266a;\301\213\370\277k\2223\236\214\'\361?,g\222\250P\021\362?>\243\\\332Gb\305\277\020\215Y4\033O\350\277UL\267O\260\352\323?V/\274\201P\337\341?\035L\222\361E\352\336\277VJ|\257(\255\362?+ED\367\2508\354?\355\216l\334$\242\366?\032\373Qh\275\200\374\277\3564c/E\360\375?\260\361\031O\361\233\320\277\001,\332\224 \001\332?[~\301jQ\013\323\277\205$\235\222\251\000\355\277\363\347\330o\376Z\260?\265\n\237\334A,\300\277\3713\306\025?\367\276?\363\347\330o\376Z\260?\016\372a\362\366\272\003\300\032T/\371\310K\341\277k\2223\236\214\'\361?.eW\010\311\323\340\277\263=\007\36518\337\277\002*\237\364\230\303\370?\326\205\376l\310\013\340?ZHA\017\241o\341\277\030\013KJR\343\274\277A\257I\227\264\213\360?\006\270\355\\\241\323\321\277\330\037\241\312\334:\000\300\205~\246?\211\262\345\277\265\n\237\334A,\300\277+\362\310\315\230\221\350?\202\200\341\337\020\360\366?k\2223\236\214\'\361?N\313\371:S\037\n\300\010\261_\331\321\310\334\277\203\323\\\t!\227\372?\261D\225x\001C\324\277-\r\211\373p_\371?\264\260\225/bz\307\277\000i\350s\240\247\340?\001bZ\360\320\234\353?\r\307I%0=\323\277\324\036Zq\317T\232\277[~\301jQ\013\323\277\327~p\351\370\000\353?\255c\313\346\350\213\367?\022\374\356\201\303y\273\277\005`\037PI_\372\277,L\322zxC\341?\000%Ff\246\315\353\277TZ*\037\261\260\361?UE)\314\340\337\336?X\325\262\324p-\351?9\335K\371\316V\004\300\003}\032\036\251j\374?\022\374\356\201\303y\273\2779\277\271\236\334\353{?\327\2310\027\321\316\373?\354Z\312\222\n\373\237\277\004\202m\001\3617\340\277\365\216@\246T\306\323\277\230n\217!\225\270\374?A\002\305\300\3042\364?\005\325\350*\001\337\343\277E\344\243\201;i\327?R=\342\315\212\363\250\2778\235\023q|\370\246?W\360r\002I\373\371?.eW\010\311\323\340\277%R\316\315\033[\326\277]w3\347\201\000\336\277\267V\214\202\202\310\316\277\331)\272\037a\034\366\277\342\245\010\213\343\203\341\277\253])\244\001\037\340\277\\\321<\224a\262\326\277\252\022\213]`\"\325?\\\321<\224a\262\326\277T\331(\025\200\250\313?\334\216\325\212\220\230\340\277UE)\314\340\337\336?X\032\322\033\366u\354\277\261\227\020\242\021\352\327\277\"k\234)]W\337\277\202\270\234\333H\311\351?\203c\346\021\261\344\364\277\366\264\211:Y\231\272\277\254\275\324\223\310=\360?\027\037\333\271\354\226\363?+\325\352\004\370u\232?\233\243\335\265\306D\301\277\016\336\221n\335\234\311?\000i\350s\240\247\340?$\335\0255/\032\261\277\226\337Yd\032\370\267\277/C\tW!\373\372\2771^\311\204\371\310\353\277BU@\352\324\331\367?\355;\361\262\024\373\362?\027B\246\244\037\336\307\277\001,\332\224 \001\332?\261\352\213\313!\221\333\277\001\177U\2760\250\335?\3564c/E\360\375?]w3\347\201\000\336\277T32\302_Z\304?\001\177U\2760\250\335?[~\301jQ\013\323\277\266\273\212U\221\264\302\277\243]rr\362\212\351?\245\246\212\246\377\352\301?\327~p\351\370\000\353?#\034Nrk\277\344\277X(.\376\200\324\354?C\374\032\306>\243\020\300\014\312\344f\"Y\314\277A\257I\227\264\213\360?\254\270\201\260\200p\334?\261D\225x\001C\324\2779\277\271\236\334\353{?\245L\201\371\0379\311?\354Z\312\222\n\373\237\277\252\277\0174P{\321?\234\032w\336~\030\272?\022\374\356\201\303y\273\2779\277\271\236\334\353{?\006\024\211rjs\337\277\201\226+\347\3257\344\277\260\361\031O\361\233\320\277\247\327\310`3\370\323\2770\013N[\351!\350\277)G\220\331\373\264\301\277\234\032w\336~\030\272?K\030\006\325\204W\356\277\202e!\2628\"\346?\254\365\217\217\000\027\343?\373\235\242\031\216X\356?\330+\365\277\350Y\347?\271\206\t\016W*\006\300\254\365\217\217\000\027\343?\333\352p\240Y8\356\277\007^\344\257\301!\331\277\313\244\310\033\255\037\336\277\270&\277\253\204\330\270\277%5\237z%X\340?VJ|\257(\255\362?W\256\236\261\214@\001@\035\353\033k\023\000\211\277\235j\374He\255\323\277\001\177U\2760\250\335?\022\340\316\262\200\315\302\277\267V\214\202\202\310\316\277]w3\347\201\000\336\277$\350\0174{\203\t\300\206\\X\216\341\331\377\277\t$\356\023\002\013\305\277\006\270\355\\\241\323\321\277\301X\007\254<_\362?[\3567b\301\275\350\277\005\263\232yY\006\376\277\261D\225x\001C\324\277[~\301jQ\013\323\277\261\352\213\313!\221\333\277\225\205P\267:F\277\277\304\216\207\007\355\372\363\277\254\356\001\0141\014\356?yo\375`\322\366\252?\306Za\210\000 \262\277\333EULVI\300?n\213\245\032\275\034\374?\251e\006\207p\311\330?\327\321\353\022\t\250\356?\363\311E\306\3073\345?\200\022\246\210({\342?\273\342\237J\003\233\266\277\254H\013\271\020\276\346?\001\331^k\020Z\326?\260a\220FaN\346\277\230n\217!\225\270\374?\374\277\331\335\277\311\306?\355^\274\235GB\307\277UN=bD\207\306\277#B\031\341Z5\002\300\273\342\237J\003\233\266\277\321\371\030\1773\010\323\277\334C7D\357\233\325?X\325\262\324p-\351?\035\353\033k\023\000\211\277\035\353\033k\023\000\211\277\243zm@R\226\333?\354Z\312\222\n\373\237\277\002\017\337\306\300\365\347?Z&\363]\371\226\373\277bR\372\250\276}\000@\010\261_\331\321\310\334\277\001,\332\224 \001\332?\022\374\356\201\303y\273\277\326\330y\226\330\262\343?T32\302_Z\304?M\261\376\360\257B\301?=\245z\342\256\017\320\277\3713\306\025?\367\276?z\204G\025\365\323\251\277\323\207V\245p\331\327?\265\n\237\334A,\300\277\251\254w[\363\266\332\277\007\316Z\2471\324\356\277\017P\021%Z\210\344?8\323O<k\005\365\277G\360\333\260\264\361\343\277%\024}\345Qf\336?\032\250\326>\255\331\370\277V/\274\201P\337\341?\310o#\277\031\343\305?.eW\010\311\323\340\277U\362\255\242\3208\333?\224% %&\250\340\277\245\246\212\246\377\352\301?\231\254\225\227RN\303?.\235\022\004\001\255\363\2773U\343\310\201\360\336\277\353\334\216wBS\355\277T\331(\025\200\250\313?0\013N[\351!\350\277B\273p\204b\325\310?X(.\376\200\324\354?\004\202m\001\3617\340\277\374e\3200\340\027\316?\363\347\330o\376Z\260?\022\374\356\201\303y\273\277U\371;&\240C\320?\303\327\351\333x\300\001\300\304\341\0021\375\241\367\277\252\022\213]`\"\325?}\345?n\206\257\341\277\020\223\33037\003\320\2778\235\023q|\370\246?\004\374\374M\345\313\013\300\352\260:\342\272v\005\300+ED\367\2508\354?[~\301jQ\013\323\277\022\374\356\201\303y\273\277\261\352\213\313!\221\333\277`\227F\370\241\233\302\277Z&\363]\371\226\373\277\202e!\2628\"\346?\022\260\r2\330.\337\277\256\002\335\355\327\036\326?\001\350\312\243\334\010\000@\006\270\355\\\241\323\321\277V\2027\253`\206\345?\261D\225x\001C\324\277\006\024\211rjs\337\277\324\347\344\374\026h\301?\203\020k\350\240=\361\277Y\323w4\351\357\367\277]$\270\275qY\332\277\032\373Qh\275\200\374\277\361o6n=Y\323\277[~\301jQ\013\323\277\002\017\337\306\300\365\347?\260a\220FaN\346\277o]\003t\t%\017\300\316\t\307\356\273\013\322\277\267V\214\202\202\310\316\277`==K\302\351\311\277\3564c/E\360\375?\254\270\201\260\200p\334?(T\257]\347\355\311?+\362\310\315\230\221\350?\234\032w\336~\030\272?n\2433Hpe\220\277=\256\232\316g\010\332\277\330+\365\277\350Y\347?\3568s\tCo\320?\320t\267O\333\362\013\300\254\270\201\260\200p\334?.eW\010\311\323\340\277\035\353\033k\023\000\211\277UE)\314\340\337\336?\326\205\376l\310\013\340?\257\342\255\026%\355\006\300\216P\244\335n\347\001\300>\243\\\332Gb\305\277\"\'Y\263\202g\001@\266o&\260P\325\361?X\235\367\3308T\366?ZHA\017\241o\341\277{Hi\007\037Z\344\277\003\272(\375(\021\363\2779\277\271\236\334\353{?,\335p\262f\020\302?,\237M\244\210\352\344?\035\r\362\251\334U\343\277\300\034\037>\346v\346\277\010\261_\331\321\310\334\277\006z\234t\327\336\331?\001\177U\2760\250\335?]$\270\275qY\332\277\244s\331\021\330b\355\277V\2027\253`\206\345?[~\301jQ\013\323\2774K\200\323~\251\343?Zyn\207\t>\377\277\245\246\212\246\377\352\301?\033\000\245K\005N\320\277\273\342\237J\003\233\266\277\242\320\026\310\n;\003@\332f\345\226\001S\323\277\024\273\002X\007i\332\277UE)\314\340\337\336?U\2372y\300\221\327?\252\277\0174P{\321?\200\022\246\210({\342?\326\330y\226\330\262\343?c\311P\023C\274\261\277\320pW*\264\345\332\277\313(\262\352\226\365\263?+\362\310\315\230\221\350?\330g\372\305_\322\331?V\352\320\277a\216\342\277-\245\000);\226\300\277T\331(\025\200\250\313?\004\222U\241\272[\334\277\335\313\357\277e\220\311?\260\361\031O\361\233\320\277\204++\026y\013\342\277\301\024H\006\"\365\346\277\356\260\"\230\371i\264\277U\204\2118^+\344\277\0265%\301\261\336\340\277\014\312\344f\"Y\314\277\311K`=\251\254\301?\005\325\350*\001\337\343\277[\034\255\000\027\340\326?\3713\306\025?\367\276?/\270\3221\331z\344\277\354Z\312\222\n\373\237\277.J\227\332\360\005\360\277\355\341\347\0055I\372?}\345?n\206\257\341\277\000\357\221\205_:\306?.eW\010\311\323\340\277\252\277\0174P{\321?\035\353\033k\023\000\211\277\001,\332\224 \001\332?\001\177U\2760\250\335?\000i\350s\240\247\340?UE)\314\340\337\336?\017\2250l\337\320\347\277\204++\026y\013\342\277\260\361\031O\361\233\320\277VJ|\257(\255\362?[A\263\213\321d\354\277b\007FG5\023\324?\215\007\261\210\274\201\214\277\002*\237\364\230\303\370?,L\322zxC\341?A\257I\227\264\213\360?\304\216\207\007\355\372\363\277\261\007\207\231\201\234\355\277\333DzM9\352\346\277`==K\302\351\311\277\260a\220FaN\346\277D\213\300E\205u\371\277\002\327#\313\210\034\365?]w3\347\201\000\336\277\356\036\366\344\264\357\360\277]$\270\275qY\332\277/9\360\001\235\031\005\300\340F\211\267\360K\325\277\217I\026Z\237\334\014\300\034g5\207\375\'\331\277\031\346\020:\001g\343\277m\021\026\316\310\210\000\300\326\330y\226\330\262\343?\017.\332`(\027\334\277\360\322D\266Jj\203?U\371;&\240C\320?\372W\241V\263\216\014\300\331\354\253@\341u\377?\t$\356\023\002\013\305\277\000i\350s\240\247\340?\005\325\350*\001\337\343\277\331\326>\366Pu\362\277\304}\340.\231\016\t\300A\257I\227\264\213\360?\001,\332\224 \001\332?\225\267;\226\237\343\337\277\261|m\014Z\254\335\277U\371;&\240C\320?X\325\262\324p-\351?@\270L\353L\364\343?\001\177U\2760\250\335?\224\312\323n\374\247\326?\006\013i\206\261z\325\277\004\202m\001\3617\340\277z:\337J\250,\311?\252\277\0174P{\321?\261D\225x\001C\324\277\202\355\007\010\233\345\304\277/\222hP\336\321\271\277s\347\332\311t\300\351\2779\277\271\236\334\353{?\252\277\0174P{\321?\326\330y\226\330\262\343?D\213\300E\205u\371\277\332\317\260r\201j\375\277\202\013\030\005Yp\355?1^\311\204\371\310\353\277\0228\214}\r\003\346?\257\016\025\035Q\247\342\277W_\2672:\236\322\277\005{\337}!-\353\277\230n\217!\225\270\374?T\331(\025\200\250\313?\\\321<\224a\262\326\277\010\261_\331\321\310\334\277V/\274\201P\337\341?\014\312\344f\"Y\314\277\200\022\246\210({\342?\005{\337}!-\353\2771\261D\256\tp\357\277\010\261_\331\321\310\334\277\001\265\325\031\341C\357?U\362\255\242\3208\333?[\337\314\373\202\010\313\277UL\267O\260\352\323?i\267\034\221&\034\320\277\363\347\330o\376Z\260?\3419v\211Zd\317\277\020\267\233\265\2479\324\277\374e\3200\340\027\316?\022\374\356\201\303y\273\277.eW\010\311\323\340\277\021\322D\366\t\240\347?\202\013\030\005Yp\355?\252\277\0174P{\321?UE)\314\340\337\336?\230\364\377\324\240$\001\300\254\020P\275\330\344\363?X\235\367\3308T\366?\227\331?\247\310V\000@\005\325\350*\001\337\343\277\030\305\321\014\r\345\372?\002\204\250\241xu\361?90\307\"\337\375\007\300n\2433Hpe\220\277\004\202m\001\3617\340\277\202\200\341\337\020\360\366?Q\021\365R\203\300\322\277\254\275\324\223\310=\360?\005\263\232yY\006\376\277\004\000t`\202@\332\277\t$\356\023\002\013\305\277x\023\370/\"\025\340?\027rV\343\374=\367?\n\372w\r\337(\345?\254\275\324\223\310=\360?UE)\314\340\337\336?\234\032w\336~\030\272?\360\304\3547\325=\370\277\254\365\217\217\000\027\343?X\325\262\324p-\351?\002\017\337\306\300\365\347?[A\263\213\321d\354\277\010\243\'\314\233+\021\300\200\022\246\210({\342?\267V\214\202\202\310\316\277\005\325\350*\001\337\343\277\001bZ\360\320\234\353?U\371;&\240C\320?\007^\344\257\301!\331\277\006\013i\206\261z\325\277\020\223\33037\003\320\277[A\263\213\321d\354\277\016\247\346\310\346\023\000\300\363\347\330o\376Z\260?\002\327#\313\210\034\365?X\325\262\324p-\351?\326\240\276\232\240\331\360?z\001_k;b\016\300A\002\305\300\3042\364?K\347\365\364<\031\327\277\005\203\266\265\345\256\352\277\t$\356\023\002\013\305\277\306q\251\321\255\177\330\277,g\222\250P\021\362?`==K\302\351\311\277\315\256z8\222\013\350?T\331(\025\200\250\313?ZHA\017\241o\341\277\002T\341u%\256\364\277\007^\344\257\301!\331\277\275\020\341c\302\305\340\277\301\274)\256\240\362\000@xI\340\225\377\237\271\277\221\316w\211\367\361\323\277X\235\367\3308T\366?\265\n\237\334A,\300\277(T\257]\347\355\311?|GZ\203k\003\327\277,\237M\244\210\352\344?X\235\367\3308T\366?\254\020P\275\330\344\363?\\\3111\327\0069\323?\354Z\312\222\n\373\237\277,\363\013\327\342\337\331\277\000i\350s\240\247\340?,g\222\250P\021\362?,g\222\250P\021\362?H\316\310\301\327A\020\300\022\374\356\201\303y\273\277\252\022\213]`\"\325?\327\321\353\022\t\250\356?\365\276\007\322\247\215\340\277\3713\306\025?\367\276?\266\266\032\332(W\330\2770\013N[\351!\350\277\302\376\375\376\\\255\371?c\311P\023C\274\261\277\022\374\356\201\303y\273\277\245L\201\371\0379\311?\205~\246?\211\262\345\277\333\227\365vI\221\352\2771^\311\204\371\310\353\277\255\233\206\342 e\352?\204++\026y\013\342\277\254\270\201\260\200p\334?\234\032w\336~\030\272?\335\277=\305\303\217\020\300$`\003\270\005\273\251\277\3054~Z\rI\373\277\227u\035\245d\303\361?C\010aX\001w\342\277\332\361\376#)C\343\277\273\223\325\310\3436\227\277\327\321\353\022\t\250\356?.\346t\330\214r\001\300\002\327#\313\210\034\365?_\301\216$\331\256\327\277\246\300?\206\323\301$?BU@\352\324\331\367?\013\311\241]\330\n\353\277\260\361\031O\361\233\320\277\327F\265\355\300\'\370?\356qq\016\305\226\364\277\334{\017\330G\005\337?\346\002jVo\016\323\277C\345\311\362d\'\362\277D8E\034u\316\365\277\333\352p\240Y8\356\277\360\223\371\357\255\217\327\277Zyn\207\t>\377\277\331\326>\366Pu\362\277\360\000\325\245+&\344?w\245\331pZ0\342?\035\353\033k\023\000\211\277N\262A\372\371\220\342?\001,\332\224 \001\332?\315d\345\312\371<\321?\002\327#\313\210\034\365?VJ|\257(\255\362?\376\205\343A\000\263\322?\"\374\244|2f\255?\002\274c\235\260N\344?\254\356\001\0141\014\356?\026I@~D:\337?\331\354\253@\341u\377?\326\205\376l\310\013\340?\320@k\027zr\306?\341\232\031\020_r\337?\020\236~2\204\230\274\277\336\365e\306\210r\351\277\245\020\252\315\224\217\301\277\344<\310\374[\024\277\277A\257I\227\264\213\360?\267V\214\202\202\310\316\277\261\227\020\242\021\352\327\277\001\177U\2760\250\335?Y\357m\336\025\023\243?\263=\007\36518\337\277+\325\352\004\370u\232?\202\270\234\333H\311\351?\302\253\202\325L\006\366?n\363[\307\336\264\337\277c\311P\023C\274\261\277,g\222\250P\021\362?\006\013i\206\261z\325\277c\3005\000\247\362\004\300\371\255J\336k3\324\277[\3567b\301\275\350\277\233\276\206\366(\253\344\277\367Co\254\252\313\000@`==K\302\351\311\277\374e\3200\340\027\316?\255\233\206\342 e\352?\273\342\237J\003\233\266\277m\345\256\307\234\316\364?\001bZ\360\320\234\353?pn\252L]\021\372\277\006\270\355\\\241\323\321\277~w\'Zi\363\334?]w3\347\201\000\336\277\014\320i\021\3515\335\277\303;\014\336\334S\360\2779\277\271\236\334\353{?\325k\236\340Z\034\327\277\301\274)\256\240\362\000@/\270\3221\331z\344\277\305\313\262~\2151\321\277\251e\006\207p\311\330?\010\243\'\314\233+\021\300UL\267O\260\352\323?\007^\344\257\301!\331\277\376\205\343A\000\263\322?\022\010\371\326P3\315\277\355\216l\334$\242\366?+\325\352\004\370u\232?1^\311\204\371\310\353\277\336\021Le\212\376\304\277\210r\215LL\255\267\277\021\313\260\307\217l\331\277.eW\010\311\323\340\277n\033/#Mj\366\2776\220\237\032\004\362\346\277$`\003\270\005\273\251\277\333\352p\240Y8\356\277\243^\265{<\331\332\277\036\332\303\301-j\301\277`==K\302\351\311\277DF\270\353u\224\323\277U\371;&\240C\320?@\307\037\\\270\230\311\277UE)\314\340\337\336?,\345\343y\356x\275\277,\272\r\322`\270\365?U\2372y\300\221\327?\022\374\356\201\303y\273\277\t$\356\023\002\013\305\277.\230\277 \271\337\357?\327~p\351\370\000\353?\030\002\340\353\214\213\361\277\364\262\003(\305\374\327\277\t$\356\023\002\013\305\277\304}\340.\231\016\t\300y\316F\236t\344\335\277\001bZ\360\320\234\353?\002\274c\235\260N\344?`==K\302\351\311\277c\3005\000\247\362\004\300\035\353\033k\023\000\211\277\024\352\003%\273M\361?A\257I\227\264\213\360?e\'\301b\202\235\260\277\254\270\201\260\200p\334?]w3\347\201\000\336\277j@\344\220Pg\341?\305\206\260\317(y\364\277Z\244\n\377U\336\271\277\327~p\351\370\000\353?\005(dT\021\206\347\277\261\007\207\231\201\234\355\277\326\240\276\232\240\331\360?D8E\034u\316\365\277T\331(\025\200\250\313?\205\321!i\231Y\351\277\0222\007\323F&\345\277\261D\225x\001C\324\277U\2372y\300\221\327?\251e\006\207p\311\330?\211\0252,kK\317\277X(.\376\200\324\354?\027rV\343\374=\367?\302Qy(mT\375?`==K\302\351\311\277\\\321<\224a\262\326\277\t$\356\023\002\013\305\277V/\274\201P\337\341?X\325\262\324p-\351?UE)\314\340\337\336?\"\002\356\345\375\317\313\277\006\270\355\\\241\323\321\277\326\205\376l\310\013\340?{\230O\232\347\r\310?\305\034\250\225\t<\302?\256r\201\2773\240\306\277\007\350\2723\237\303\327?\335\345vP:g{\277He\302#\215\001\324\277\261\227\020\242\021\352\327\277\374e\3200\340\027\316?\311\352\274\266\244\236\321\277\017\251sX\263\322\267\277_\rB\232\330*\351\277\202\013\030\005Yp\355?\374e\3200\340\027\316?\001\177U\2760\250\335?\366\341\273\317dm\327\277\314`\205\245\322/\000@\222K\323\324\021\275\264?\001\331^k\020Z\326?\202\270\234\333H\311\351?\005{\337}!-\353\277U\2372y\300\221\327?\265\n\237\334A,\300\277\254H\013\271\020\276\346?\351\255\320$\370\271\304\277\001\265\325\031\341C\357?\230\213mW\3243\330?\007\316Z\2471\324\356\277B\250\273\023\345\200\373?\331\354\253@\341u\377?\017\251sX\263\322\267\277\206\\X\216\341\331\377\277\267V\214\202\202\310\316\277\207\273\272\311\263\201\345?U\362\255\242\3208\333?\230\033\024\370\204\021\371?\245L\201\371\0379\311?\355J\2556\n8\353\277\360\027ha\345\344\373\277\001,\332\224 \001\332?\245\246\212\246\377\352\301?\005\325\350*\001\337\343\277\246\340\350L\354\360\335\277\202\200\341\337\020\360\366?\010\261_\331\321\310\334\277\252\022\213]`\"\325?Z\233\2748\261\026\345\277\2155\344\257\226\031\001@\254\020P\275\330\344\363?\224\333\362\301\272\310\261\277\003\321y\320\002\215\021\300)\307\206f\010\234\313?UL\267O\260\352\323?\331\326>\366Pu\362\277\260\361\031O\361\233\320\277\371\255J\336k3\324\277\3713\306\025?\367\276?\211\324?W\004\022\345\277\202\013\030\005Yp\355?w\310fvv\021\254\277vEK\031\264\241\350\277\327~p\351\370\000\353?+\325\352\004\370u\232?\027\326x\345`\321\005@\001bZ\360\320\234\353?\304k\r:q;\372\277\010\261_\331\321\310\334\277\006\270\355\\\241\323\321\277+\362\310\315\230\221\350?X\325\262\324p-\351?+\325\352\004\370u\232?\327\321\353\022\t\250\356?w\263i\330{\206\346\277\2703\216\344F\203\002\300(]\303\363J\225\321\2779\277\271\236\334\353{?m\345\256\307\234\316\364?\315\276u\276Ba\240\277V/\274\201P\337\341?Z\233\2748\261\026\345\277X\325\262\324p-\351?\326\240\276\232\240\331\360?C\345\311\362d\'\362\277\230n\217!\225\270\374?\251e\006\207p\311\330?~0\344_\322\324\345\277\354Z\312\222\n\373\237\2779\277\271\236\334\353{?\330\355\217\311*\361\020\300\270\312/\354\020\212\335\277\363\347\330o\376Z\260?\376\205\343A\000\263\322?\223\323\355\257\nx\347\277\314`\205\245\322/\000@\376\205\343A\000\263\322?\205\321!i\231Y\351\277\374e\3200\340\027\316?\006\013i\206\261z\325\277T\373\307\343\336\010\354\277\264\260\225/bz\307\277\217\370W\253\001\026\261?\003S\265YQ\307\340\277\363\347\330o\376Z\260?\255\233\206\342 e\352?,L\322zxC\341?\"\\\375=\210\252\355\277\217g\355\370\251@\344?/\354\223\305\036K\004\300\202\270\234\333H\311\351?U\371;&\240C\320?\240\237\241\245\370\351\273\277\332\361\376#)C\343\277X\325\262\324p-\351?T\331(\025\200\250\313?\267V\214\202\202\310\316\277]$\270\275qY\332\277\374\202\371\330+\362\332\277\303!\311\351\217\364\315\277\217\366\2320\2175\t\300]w3\347\201\000\336\277\001\177U\2760\250\335?\227u\035\245d\303\361?\005\263\232yY\006\376\277\261\352\213\313!\221\333\277\374e\3200\340\027\316?+\007\347\270\211\362\341\277$`\003\270\005\273\251\277\227\310\230\316tj\365?BU@\352\324\331\367?Z\233\2748\261\026\345\277\374\277\331\335\277\311\306?\001,\332\224 \001\332?\\\321<\224a\262\326\277\263=\007\36518\337\277U\371;&\240C\320?\254H\013\271\020\276\346?T32\302_Z\304?}\010\364kC\217\330\277\027rV\343\374=\367?\202-f\266\000I\363?\363\347\330o\376Z\260?\326\330y\226\330\262\343?\254\356\001\0141\014\356?\000i\350s\240\247\340?\027\037\333\271\354\226\363?\245\246\212\246\377\352\301?\000d\254}\316A\352\277\326\205\376l\310\013\340?\301X\007\254<_\362?\264\260\225/bz\307\277\255\266F\020\3712\373?\257\016\025\035Q\247\342\277\005\263\232yY\006\376\277\245\246\212\246\377\352\301?]$\270\275qY\332\277,g\222\250P\021\362?\327~p\351\370\000\353?,g\222\250P\021\362?\234\020\363\233\205\373\332\277\252\277\0174P{\321?\233\244\017}ET\376\277\337\344tM\266 \331?\252\022\213]`\"\325?,\237M\244\210\352\344?\230\253\235\000\025_\363\277\215\303\202c\310\267\330\277\267V\214\202\202\310\316\277U\371;&\240C\320?R\ng\317\263\265\335\277\252\377\362\204\003^\336\277\017\351\341\021D\315\245?\234\032w\336~\030\272?\027\315\213\254\260\326\343?\002*\237\364\230\303\370?\277\331\213\264\237\363\336\277V\2027\253`\206\345?\035\353\033k\023\000\211\277\254\275\324\223\310=\360?\226U\210|z;j?,\237M\244\210\352\344?.\230\277 \271\337\357?\326\205\376l\310\013\340?\245L\201\371\0379\311?\255\233\206\342 e\352?\264\260\225/bz\307\277\331r\034\364\354\341\003\300)\036]\334\"!\323\277\006\270\355\\\241\323\321\277\227\310\230\316tj\365?[~\301jQ\013\323\277#\363\227\037=\227\361\277`==K\302\351\311\277\334\225\235>\241\303\322\277$\375\314\221w\027\300?\221\245\331\226\035q\207\277V\2027\253`\206\345?\257\016\025\035Q\247\342\277\245\246\212\246\377\352\301?\205\205n\363\231\335\327\277\243zm@R\226\333?\263=\007\36518\337\277\257\016\025\035Q\247\342\277\207n&\252\354}\261\277\311\221\302\215xC\346\277T\331(\025\200\250\313?\\\321<\224a\262\326\277\200\022\246\210({\342?\035\353\033k\023\000\211\2779\335K\371\316V\004\3008\235\023q|\370\246?+\325\352\004\370u\232?\263=\007\36518\337\277\255c\313\346\350\213\367?\203&\33021>\376?U\371;&\240C\320?\202\200\341\337\020\360\366?\237\352\300\364\366\217\361?\254\365\217\217\000\027\343?\356\036\366\344\264\357\360\277\t$\356\023\002\013\305\277V\2027\253`\206\345?\254\270\201\260\200p\334?0\276)\002\264\210\272?\245\246\212\246\377\352\301?\023\266X\254]\353\342?\260\361\031O\361\233\320\277\273\342\237J\003\233\266\277m\345\256\307\234\316\364?PCH<\025M\313\277\267V\214\202\202\310\316\277\010:!.Q\353\324\277\004\202m\001\3617\340\277\265\n\237\334A,\300\277\357j\343\212\365\213\377\277\001bZ\360\320\234\353?\331\344\261\305Q;\320\277\000i\350s\240\247\340?\326\240\276\232\240\331\360?\'\034\344V\204}\247\277\234\032w\336~\030\272?\264\314\377\0036:\236\277\245L\201\371\0379\311?\006\270\355\\\241\323\321\277)\341N\375\242z\354\277T32\302_Z\304?\203\323\\\t!\227\372?\302Qy(mT\375?\355\216l\334$\242\366?-5\\W\337\024\320?\254\365\217\217\000\027\343?\376\205\343A\000\263\322?Z\361\233t\331Q\000\300\302\253\202\325L\006\366?U\362\255\242\3208\333?/\360\215-\021T\367\2779\331\353\323\247I\323\277O\310\256D\212\221\337?\242\320\026\310\n;\003@\3506\352\013\333\324\207\277\261\352\213\313!\221\333\277\254\270\201\260\200p\334?\320\213\372\277k#\325\2770D\351Vw\rr\277+\362\310\315\230\221\350?\000i\350s\240\247\340?.#\331\255\340\317\337?c\311P\023C\274\261\277Iy\3275u4\331\2770&\361\360\240_\342\277x\203`\304H|\020\300\254\365\217\217\000\027\343?\001,\332\224 \001\332?\245L\201\371\0379\311?+ED\367\2508\354?\203\342\022\342k\253\311\277\264\260\225/bz\307\277\251e\006\207p\311\330?\254\036\303\214\331\252\341\277\332o\005\203\272K\335\277Z\233\2748\261\026\345\277\202e!\2628\"\346?\332\361\376#)C\343\277\245\246\212\246\377\352\301?@_\206G\267\220\334\277m\021\026\316\310\210\000\300\007B\304\340~u\320?\202-f\266\000I\363?\254H\013\271\020\276\346?&\202\233\244\031K\334?\263=\007\36518\337\277`==K\302\351\311\277\205\321!i\231Y\351\277\027\253T\350~e\333\277\305\'N\224V\321\336\277\362\017\250\026\227\312\311\277\376\205\343A\000\263\322?\267V\214\202\202\310\316\277\374/~\257\033K\327\277\001\265\325\031\341C\357?\t$\356\023\002\013\305\277\027I:\323\231\021\346\277\302\376\375\376\\\255\371?\316\346\030\234\251T\324?\202e!\2628\"\346?\023}\253\304\222K\351\277\374e\3200\340\027\316?\t$\356\023\002\013\305\277\203\342\022\342k\253\311\277\304\341\0021\375\241\367\277\320t\267O\333\362\013\300\240\271<\231G\241\226\277\326\330y\226\330\262\343?\202\013\030\005Yp\355?,\272\r\322`\270\365?\370~\2226\314\302\324\277A\257I\227\264\213\360?yn\007n\260\372\322?\374\277\331\335\277\311\306?.\230\277 \271\337\357?\007^\344\257\301!\331\277\207\221r\235|n\340\277\245\246\212\246\377\352\301?,L\322zxC\341?\333|5Iq\303\371\277\357\366\"\211F:\332\277\230n\217!\225\270\374?\331\326>\366Pu\362\277\245\246\212\246\377\352\301?\202\221\210\270d\334\001@\263O\220I\333\245\350?W\256\236\261\214@\001@\261\227\020\242\021\352\327\277U\2372y\300\221\327?`==K\302\351\311\277B\250\273\023\345\200\373?\356A\215JQ?\341\277.eW\010\311\323\340\277\002;F\315\354\257\003@6\235\270\363D\002\306?m\345\256\307\234\316\364?`==K\302\351\311\277\235]\201\020\242\326\305?X-\201\341\310\241\360\277UL\267O\260\352\323?BU@\352\324\331\367?\376\205\343A\000\263\322?8\212\320\317\276\257\000\300J\001(\247\2769\265?\\\321<\224a\262\326\277U\362\255\242\3208\333?1\020\220\374e\260\307?\027rV\343\374=\367?\022\374\356\201\303y\273\277\267V\214\202\202\310\316\277\257\016\025\035Q\247\342\277\003}\032\036\251j\374?\014\312\344f\"Y\314\277|\256\260\216\"\275\342\277\200\022\246\210({\342?\330\3639\304\260\200\364?UL\267O\260\352\323?,\237M\244\210\352\344?\000:0\314\0007\341?G\202\353\313\330\333\260\277]$\270\275qY\332\277\004\202m\001\3617\340\277\260\361\031O\361\233\320\277\301X\007\254<_\362?\257\016\025\035Q\247\342\277\264\260\225/bz\307\277X\325\262\324p-\351?\327~p\351\370\000\353?\002\017\337\306\300\365\347?\033>\232\177\367\244\262?c\311P\023C\274\261\277\333DzM9\352\346\277\017M\335\033\007b\007\300\234\201D\222\022\r\312?UE)\314\340\337\336?\025\270\317 B<\271\277\306\205\204\263T\222\340\277\005\325\350*\001\337\343\277]w3\347\201\000\336\277\035_*\312\242\256\325?\257\016\025\035Q\247\342\277\2033\002N=\215\341\277\333DzM9\352\346\277\014\312\344f\"Y\314\277\326\240\276\232\240\331\360?\r\337\241\304\036\355\002@$\350\0174{\203\t\300\234\032w\336~\030\272?\363\347\330o\376Z\260?\232\376\030*%\006\367\277\260\264\013pq\365\351\277,\237M\244\210\352\344?\370%\222b\365>\300\277\266\246\2303\322\317\236\277U\2372y\300\221\327?UL\267O\260\352\323?\252\022\213]`\"\325?\234\271\323Wz\n\332?Z\233\2748\261\026\345\277\001bZ\360\320\234\353?\261\227\020\242\021\352\327\277\326\205\376l\310\013\340?\324\347\344\374\026h\301?\022\374\356\201\303y\273\277.\227vl\304h\345?\027\037\333\271\354\226\363?_\rB\232\330*\351\277\002\204\250\241xu\361?\261D\225x\001C\324\277\245L\201\371\0379\311?\372\004&-\243\347\010\300\264\027\276`-e\310?\024m\367\251_\037\301\277\302\253\202\325L\006\366?\252\277\0174P{\321?0\226\204\2001\242\376\2778\235\023q|\370\246?.J\227\332\360\005\360\277\317!<&\313K\010\300UE)\314\340\337\336?V/\274\201P\337\341?j\n\230\2726\303\323\2771\261D\256\tp\357\277\205\321!i\231Y\351\277$`\003\270\005\273\251\277\245L\201\371\0379\311?s\266\312\351,\202\322\277\200\022\246\210({\342?\261\352\213\313!\221\333\277^R\252\006r\347\363\277\006\226\202\023\331j\345\277\254\356\001\0141\014\356?\374\277\331\335\277\311\306?\007^\344\257\301!\331\27770GY\256\255\246?V\\\204\373tq\261\277\261D\225x\001C\324\277\031\236\275\351(\370\002\300\200\022\246\210({\342?\324\347\344\374\026h\301?/5\0232\313\240\370\277\255c\313\346\350\213\367?U\2372y\300\221\327?\227u\035\245d\303\361?\332\272oD\305P\344\277\202-f\266\000I\363?\254H\013\271\020\276\346?\333\352p\240Y8\356\277\005\"\261\317^\332\313?\326\330y\226\330\262\343?\252\022\213]`\"\325?T32\302_Z\304?\332\361\376#)C\343\277z\256\343A+\273\n\300\203\323\\\t!\227\372?t|,\340\320c\211\277\254H\013\271\020\276\346?\327\321\353\022\t\250\356?\301X\007\254<_\362?\265\n\237\334A,\300\277\362H\264%\322\037N?\245\246\212\246\377\352\301?\326\240\276\232\240\331\360?UL\267O\260\352\323?%5\237z%X\340?+\325\352\004\370u\232?pn\252L]\021\372\2771\261D\256\tp\357\277\035\353\033k\023\000\211\277,\237M\244\210\352\344?\273\342\237J\003\233\266\277YC\356+Y\242\375?+\325\352\004\370u\232?-\r\211\373p_\371?\261\227\020\242\021\352\327\277UL\267O\260\352\323?\004\202m\001\3617\340\277k\2223\236\214\'\361?Z\233\2748\261\026\345\2777\3774h\254\034\272\277\006\013i\206\261z\325\277V/\274\201P\337\341?\327\321\353\022\t\250\356?\001\177U\2760\250\335?]w3\347\201\000\336\277.J\227\332\360\005\360\277\004\202m\001\3617\340\277\006\270\355\\\241\323\321\277\331)\272\037a\034\366\277\356qq\016\305\226\364\277\350\240U\3544\343\326?\202\270\234\333H\311\351?\024\217\330dd\033\255?\273\342\237J\003\233\266\277x\355,\3012\237\002@7y\365q\324\313\301?\016\372a\362\366\272\003\3009\277\271\236\334\353{?\013\0001=<\375\351\277\326\205\376l\310\013\340?\324&\263\036l\313\307\277i\267\034\221&\034\320\277\304\341\0021\375\241\367\277\234H\221\377\234D\347\277T\331(\025\200\250\313?\374e\3200\340\027\316?+ED\367\2508\354?\254\356\001\0141\014\356?9\277\271\236\334\353{?V/\274\201P\337\341?UL\267O\260\352\323?\302Qy(mT\375?\342\373\267\275FQ\002@\220\325\013\270q%\342?.eW\010\311\323\340\277.eW\010\311\323\340\2778\235\023q|\370\246?\362\017\250\026\227\312\311\277\005\325\350*\001\337\343\277+\325\352\004\370u\232?~0\344_\322\324\345\277\202\013\030\005Yp\355?\006\270\355\\\241\323\321\277\252\277\0174P{\321?x\010\355\356\nm\003\300\373o\371\365\241>\334?\245L\201\371\0379\311?\222vI\3018\252\345?\204++\026y\013\342\277\254\020P\275\330\344\363?\252\022\213]`\"\325?\327\2310\027\321\316\373?*\303\215\320\243\214\364\277\213b\300\240\207&\332?\030\030M6\035\214\376?\363\347\330o\376Z\260?0\014)Z\006\201\301?\3713\306\025?\367\276?9\322\246u\354\262\365?\252\277\0174P{\321?\254\365\217\217\000\027\343?\252\277\0174P{\321?\014\312\344f\"Y\314\277\252\022\213]`\"\325?,\272\r\322`\270\365?\245L\201\371\0379\311?y\270\253y\370\024\306?\030\002\340\353\214\213\361\277+\325\352\004\370u\232?-F\207\000\363\206\335\277\261D\225x\001C\324\277`==K\302\351\311\277\020{\320\337q\341\316\277V\2027\253`\206\345?m8*\361\254u\370?X-\201\341\310\241\360\277\251e\006\207p\311\330?\tS\246\273\241{\304\277\376\205\343A\000\263\322?\376\205\343A\000\263\322?\202\013\030\005Yp\355?Q\220\037\177\"\224\317?,L\322zxC\341?\202-f\266\000I\363?J\212\321ZYG\016\300ef,S\307@\014\300\333DzM9\352\346\277\203\020k\350\240=\361\277\241\211\006\201|\032\324\277\261\227\020\242\021\352\327\277\027\203\375\273P*\002@\204\377\303\017MQ\006\300\022\374\356\201\303y\273\277\251e\006\207p\311\330?\254\270\201\260\200p\334?UL\267O\260\352\323?\0141\007\355B\033\344?{\305&\262\273\353\323\277\202e!\2628\"\346?C\374\\\256\036\346\331\277\203\020k\350\240=\361\277\255\266F\020\3712\373?\326\330y\226\330\262\343?\311\344=\267\210\352\351\277\004\251\201$\325$\010\300m8*\361\254u\370?(;X\252\202,\345\277n\213\245\032\275\034\374?`\227F\370\241\233\302\277\230\253\235\000\025_\363\277X(.\376\200\324\354?\327\321\353\022\t\250\356?\254H\013\271\020\276\346?O\014\035\315\355s\260?\277\331\213\264\237\363\336\277\316{E\323\252\375\000\300\274\005\362\350=\264\336?\261\227\020\242\021\352\327\277\t$\356\023\002\013\305\277\370\034~\314\221\227\330?\230n\217!\225\270\374?,\237M\244\210\352\344?\302\376\375\376\\\255\371?\315D-7\021\230\255?\0265%\301\261\336\340\277\273\342\237J\003\233\266\277\263=\007\36518\337\277B\250\273\023\345\200\373?\001\177U\2760\250\335?\027rV\343\374=\367?\222s+\323\315\361\351?\355;\361\262\024\373\362?\006\270\355\\\241\323\321\277\265\n\237\334A,\300\277\327\321\353\022\t\250\356?c\311P\023C\274\261\277U\362\255\242\3208\333?\245\246\212\246\377\352\301?9\277\271\236\334\353{?\245L\201\371\0379\311?\202-f\266\000I\363?\001\265\325\031\341C\357?\t$\356\023\002\013\305\277[\3567b\301\275\350\277\200\014!\336a\236\341\277\363\347\330o\376Z\260?\304\216\207\007\355\372\363\277|\355\026\246J1\341\277\035\353\033k\023\000\211\277\014\312\344f\"Y\314\277\254\356\001\0141\014\356?\330+\365\277\350Y\347?\354Z\312\222\n\373\237\277\234\032w\336~\030\272?U\362\255\242\3208\333?\302Qy(mT\375?\327\321\353\022\t\250\356?\202-f\266\000I\363?\363\347\330o\376Z\260?\335\350\030h\261j\326\277\035\353\033k\023\000\211\277`\351~\030h\364\344\277\005(dT\021\206\347\277.\235\022\004\001\255\363\277\355\357Z\3255\017\350\277\254\365\217\217\000\027\343?V\2027\253`\206\345?\033\221C\203\363\032\341?0\226\204\2001\242\376\277\213Jo~\321\230\337\277\345\017\352gO\024\016\300X(.\376\200\324\354?\001\242\003\021C_\333\277\227\310\230\316tj\365?\234\032w\336~\030\272?UL\267O\260\352\323?\006\270\355\\\241\323\321\277\006\013i\206\261z\325\277"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content: "\207\375i\032Q`\324?v\035\354\315k;\346\277\214\321\243z\032v\320?oU\2620\021^\260\277L\354;\271\225\267\367\277\237\221)_\247\274\314\277\013\227\003\t\031\335\356?\376\217\375\205w\267\333?\200:\325\240(V\333\277m\262\036nO\007\355?\207\265\005\357(c\373\277j b\035\277\350\260?\342~\236\301\353\321\254\277\247I\000\016\036\301\373\277\334\324\330\233om\340?\206\203\035Ydq\326\277p\324\243\0250 \353\277\274\300\021ZV\004\367?\203\231\000\251\177f\330\277\243ec\277p\322\310\277Z\350\034\267\315\355\342\2777\'\203\243\224\001\002\300\332\235\004\230\243\222\230?\214\321\n5\322_\356?\n\"\365\260\246\327\357?\304;B\250V\021\327?&\212\207\233\016`\306\277\346\220\253\273\243(\242?6=\302uaf\374?\270\244\014\024\255\007\344\277\377G2\240\227\320\364?\'\224\003n\0033\304?\031K\031!q,\343\277f7\356\037O\372\374\277\307\335\372,\023\037\374\277\005NT\226%\330\325?\206\203\035Ydq\326\2772\351T8\274[\351?\017\222\257/\222\377\364?\014O8#9\366\367\277r\206X\316\030\035\351?\233\307k\321\322y\316?\024?w\311\253\010\347?\237\233\2451\234\217\312?f\3016\025h\330\263?\261\256M\014\003\331\351?cb\013\r\021\310\266?\215Ati\022\222\320\277\314\n\217\351P3\367?\3213dq\377\247\211?(\377\225\363\200e\305\277\032\210\277\201\347#\342?\003_\371|\306\343\330\277\262f\202&#\362\362\277\214\321\n5\322_\356?Dq\013k\225\252\327\277Z\301\252\360\035\341\370\277\355w\027B\226\204\355?\212WW\271-\207\322\277\270\010\214\365\212\365\372\277\025\333\367\347\315\032\360?\246O\200oU\335\306\277W\376\377\006\351\342\344\277\374h\323\272d\313\340?u\014\366\234\037:\360?\255v\224\312[\325\366?z\366\312Qg$\337?\222\266\323\0130\215\362?_\325Jby|\001\300\017\256c+\220\006\365\277u\014\366\234\037:\360?)\371\025\222II\372\277\277b\312\336\022\022\334\277\337q>\370l\250\224?Z%\303\027D\345\341?z9\361\023\0258\371?\373+-Z\356\323\341\277\224\240Wv\314\201\376\277\325\026\202\213\301L\346?\275@\336|z\017\340?j\201x\320GH\264\277\026\354\355\030\032\034\346\277T\237\324\376\221\322\347\277\352\320 T_\215\371\277\224\004p\235\362\205\347?\323d\315\322\330O\350\277\261J\316*%\353\362?\344h\273q\320\334\252\277OKg\301\354\307\364\277G`f\204\364\236\324?\r\201 \271\375\347\354?\242u\306\255T\253\377\277\024f\351\217[\025\361?\320\205n\355\245J\364\277\366\037\213\002)\260\345?A\266^\233\366#\000\300\335\014A\223k{\340\277\222\322\207\007.\224\362\277|\333\251\230\321E\336\277\315\033\205\032\2354\355\277\t\255\177\236|\350\322?Q\300u\031_\315\363\277\203\231\000\251\177f\330\277\271\036\300\217Q\340\337?\320\005\242\312\201?\353\277\326\213\220\3433R\345?\255\r\327\177\003\376\300\277\023\r\2173\347\026\362\277\201\367G$\303X\363?,\240\014\200\200@\356?3^c\220.a\350?\273\216)\304\221\022\342\277dMj\265\262\005\361?L\251\025\367\347\243\355?.\302\221\'aY\354\277\335\345\316\314\273n\366\277\2609?\264\220\323\352?`x\356\\,\275\270?\353\002\t\352#\177\356?F\243\363\000Z\234\374\277\344\246\216\013\277\035\244?@\242\017tF~\332?\275}\353\227\250\360\334?\310R\t\205\205$\373\277^ \326\370t\361\365\2774\323q\350\240f\347?\267a\212\317M\204\001\300\250\276\016f\220\306\372\277h\005W\3245\376\372?|k\331\251\331)\336?x\317\240\206T8\344?[/\246\244\360\241\275?o\234;\0364\022\353?\344\246\216\013\277\035\244?jS\363e\370\366\357?K4\007\237u\236\356?X;\246g_\332\343?\256\007W\036\314\341\365\277\013\227\234Na\363\320?\\\232\321o\266\352\340?s\373f&\213\"\350?8j\005\350\363\204\344\277\226\356\214M\327\220\345?\240\213BC\270\266\363?c\303!\300\231\'\272\277\355/L\\\266\235\366\277\226\356\214M\327\220\345?acM\005\316\372\362?y\340\226\267\2409\372\277\344ExX6\276\220?\347\346\003\244z\202\373\277\334T\014yKb\367?\374h\323\272d\313\340?L\354;\271\225\267\367\277\223+\342c\242\222\361?\254\332\023\2549\303\355?\342\235T1\207}\362?\3730\322} \247\336?\267\223}\235\030\360\373\277i\253S\305L\343\261?\240\0068\267\031\302\313\277\374\004\273\223>\307\367\277\221A\305\263\275\207\363?\256\007W\036\314\341\365\277\213\\\225\"\250p\321?J\277\370F\003\231\357?\215F\031\215De\355?\201\264!b\025E\331?\330j\223F\265\347\000\300\373+\224\024\246\275\337\277\036\203\322b\0300\366\277C\374\374\022#\245\330\277\272\326\364\251q\371\370?F\353W,\202\231\325?\007_J\307q\331\373?9\337\023@f\212\343\277;\3110\360J\225\341\277\203)0\272\207J\330?#5\330e\254\"\307?\021\340K\301T\370\351?6\275\216\230\205q\345?i\226\031(\246\n\372\277AZD\216f\227\363?\3213dq\377\247\211?\232M\270U.\241\342?\214m\213S\364q\367?\032\215d\245\031\367\316?\177)\337o\334T\365\277\233\372.\245\234\264\341\277\2347\325\005\023\254\340?\212WW\271-\207\322\277<\006\327P\301\214\340?~\264\320\027jO\366\277\251\256\253w\254\355\303\277\274\300\021ZV\004\367?\234\247\014\257\302\261\316\277r\206X\316\030\035\351?S\216\336\315E\321\361?\367\376\215e\252E\001\300<\206\n.\235\201\367?5H\200@\023l\346?\016y\273\344\257\206\002\300\255\022|\2435\321\355\277\205\016\017\001\362k\327\277\214\321\243z\032v\320?\332\333\3271\222\323\201?t\263\233@\253;\361\277\343.\027\205\367\211\361\277\010\360\014\033\342\345\372\277\370\211\333\217\351\257\372?|k\331\251\331)\336?\220\350jWI\211\364\277\355/L\\\266\235\366\277\347\346\003\244z\202\373\277\277\306\342\0059\026\365\277\246\270=\272\255\264\374?\\\244\264\374b\247\274?\222R\273\344\t\211\351\277\376\217\375\205w\267\333?\316X+{\023,\354?\201\023\374\037\301_\363\277\323d\315\322\330O\350\277\237\0264\353E\261\364?H\325t\334f\244\323?\304\232\034f\002,\361\277*\351\262\243ep\303\277\361\216wd\r\256\363\277P\010A\377>\264\352?\256\353\242\"\316\332\365?\326\'x\274\rN\374\277\031\023\261)u\036\343?\335\3507\373\020\375\251?Q\031\320u\323\313\362?g\220H|\303\370\373?\274\003\237\326\273\001\337\277++\376\'\016;\357?5H\200@\023l\346?\257`\261z@\340\364?\306%_X;\034\325?\361KQ\242_\232\351?0\233\270\246\371b\364?\206\210[\302\336Z\325?\232\205 M*\257\342\277E\346\031\303\007\260\326\277\351\235\013\205\"R\232\277\"\266M;EJ\312\277|\333\251\230\321E\336\277\032\215d\245\031\367\316?\240rN\370\325=\001\300\244\352\324\005\307\260\376\277\001u\334\314\341\330\332\277\323\310L\264\266=\377\277\205\023MjlU\326?\372s\370?\316\272\370?\203\341d\324\247c\361?L\251\025\367\347\243\355?\230\330\251\375\273\233\343?-\025\033\330\362E\355?\346\220\253\273\243(\242?k\310\001\276j\374\356?F\207?\005\\\225\374?\223+\342c\242\222\361?\n\276u\317\310\351\370?h\227[ c=\266\277\365\342\344\241\262\270\346\2770\267l\242\367i\364\277\316X+{\023,\354?\030\236\242\321\002\031\344?X\327\215@9\326\372\277\303~hj\004%\361?\302Q%\370q\006\331?\300\334\026\240\377\000\332?\220(\321h\333\016\001\300\303\3063P\344\013\330?07\240\177\323^\353\277?-\001\034\324x\333?\353&\022\202~\375\244\277\267\223}\235\030\360\373\277\307\007\227\344I\376s?\0012OP|\333\362?\371~\266\n\200\300\342?@\242\017tF~\332?^`<\n\007w\002\300\362\003\206\274\177\263\362\277\000\331\364\363\007\335\363\277\2332\376VP\254\317\277vZ\222.\3422\345?XE\211\364\013\227\277?\221\235\337\300M\024\000\300z\271\27569C\342?\367\224\231Z\233\265\344?\306%_X;\034\325?|k\331\251\331)\336?\211*\024G\233h\372\277\212\\\374\334_Z\357?\n\035P\215t\004\323\277\253-6\242\023\306\300?}\333B\336\031\\\340\2774\013\332\337\234t\347\277\013\227\234Na\363\320?\205\023MjlU\326?\271\341\262t#\377\342?\262f\202&#\362\362\277\257|ev>\347\364\277?-\001\034\324x\333?\200:\325\240(V\333\277a\331\004\020\265\034\274\277>p\'\336\201\214\365?:\270\241y\266}\371\277\004\331E>\263\322\326?\2347\325\005\023\254\340?\374\240\242l\030\303\336\277\002\352\352$T\336\331\277H\346\016\213\0016\001\300@\235\321\n\314\224\333\277\033\002s\375\213\374\315?Q\031\320u\323\313\362?\021|\314\337v\n\363?\030\236\242\321\002\031\344?\307\225/G38\325\277^\004\"\375v\352\365?\323,e\333\334A\350?m\340\243\330\236X\261\277\01033\335\217\371\324\277\371\032\236\343Y\274\371\277F\353W,\202\231\325?{\312\263g\205D\370\277\031\257\230\002O\032\372\277\n\035P\215t\004\323\277\035\342\023\333{4\316\277\370\t\250\262\r\273\343?\361\016\253A\351\242\352\277\215~\201\204@s\355\277VQ\211\267z\317\345?;\316\325\023}h\336?\016\271\210\260\371\365\354\277.\212)0eK\354?(\204\007:\327C\373\277\326*\341\352b\334\257?CD\310\370\002\214\377\277\230\315\217\260X&\001\300)~ \036\350=\302?\230\233\003\235E\244\344\277\320i\272\361\247C\364?\226&\365D\323\236\345\277,\240\014\200\200@\356?\363\370\307\361\315\255\350\277|?\302\277\367I\367\277m\262\036nO\007\355?:Y\307\273\nc\337?\323\310\345\371\376S\361?\3213dq\377\247\211?\"\300\311\r:\035\310?\202$\362P\ra\331\277\r\201 \271\375\347\354?\314n\016\313.!\356?\020#r\203\002\014\364\277a\331\004\020\265\034\274\277;\316\325\023}h\336?\332\235\004\230\243\222\230?p8\274<V$\364?\301L\347\216\367\034\332\277\375\032\357-\005\262\334?\213\224d\324[h\357\277\344\207q\341k\210\360?|f4\206\247V\341\277\356qE\345\353g\226\277)~ \036\350=\302?\002\352\352$T\336\331\277\311\307\027\335\367)\372\277YL\234\230\253\333\371\277\337\224\201\021\007\307\256\277\\6\271H\220\346\367\277\247\304\216\307\307\342\305\277\2372\350\346C\270\364\277\221\032S\355\r{\351?\275@\336|z\017\340?\324\241s3OG\347?]z\331\007^\014\277\277B\353\006\342\326\243\362\277\2509\235\037:\350\304\277P\010A\377>\264\352?\361KQ\242_\232\351?\200:\325\240(V\333\277\371A\020\252\t\311\343\277\223\217aE\200\200\350?:\234\355}\270v\371?\221\235\337\300M\024\000\300\202lV|5^\362?w\366y\007\274.\374\277]\217\023\245\004\345\366?\036W\"3\3569\315\277\021\340K\301T\370\351?T\037\241!\266\335\360\277\261\256M\014\003\331\351?Uxb8\342\305\375\277\003\034\323\272\030\320\376\277\016\366.\021p\355\353?\363\\\340\030\364\261\361?!\306Ioq9\363?\271\036\300\217Q\340\337?\371~\266\n\200\300\342?$%uw\310I\360?\307\225/G38\325\277\326\213\220\3433R\345?H\3206s\354\272\324\277\203\341\313\216_M\377\277\326*\341\352b\334\257?9C\223!Dx\372\277[/\246\244\360\241\275?>\270\362\303as\334?\265E\341\013V\367\346\277\r\201 \271\375\347\354?%\025yC\234Z\307\277\\\3229g\262\370\340\277_\003\340\004\272\267\271?m\365D0\375\032\367\277\367\224\231Z\233\265\344?njS\210o \366\277\367\333\345\013\220R\205\277\375\032\357-\005\262\334?\023\312hq9\003\350?\313\371\230\270\0042\321?\203\341d\324\247c\361?H\215\020\261>\247\372\277\263[\304[q\354\350\277\365\252|\252\266\252\346?\266\202\207l\314\356\345?\307\007\227\344I\376s?\342\235T1\207}\362?2\241\211R\334t\362\277\212\347\206\3125k\322?WF\313\354\310\311\373?H\325t\334f\244\323?\262#\\du\336\350?1\020\307\376kh\363?\221\335\254\214\227\203\352\277\016\035\241\327\037\372\365?\251\256\253w\254\355\303\277CDa>K\242\361?\336>))0m\365?\000\005\014\336\351\274\332?{.\314\216\253H\341?\246Y\374AJ\260\304?\364\321\356pf\267\360?\2347\325\005\023\254\340?\342\271\010-\205\204\362\277bN\023h\'\"\273\277\314ii\247\374M\321\277\344ExX6\276\220?\313\2614\215\3344\370\277\314n\247\020w7\320?\352\215\372\221\261y\357?K/b{C\313\321\277}\333B\336\031\\\340\2773\026\230\252Nz\361\277\320\005\242\312\201?\353\277!\306Ioq9\363?\273K\003\002\344\376\367?\240\020\264\211\016\225\311?#5\330e\254\"\307?\030\036\326\256\336\r\373?CDa>K\242\361?\351\264lXa\206\371?\261J\316*%\353\362?}\230\034\034lH\366?\260\325\277\322\262\345\363?\366W\363\371$\276\345\277\"W\014\303\341E\362\277o\234;\0364\022\353?\005I\026-\253\356\326\277|f4\206\247V\341\277e\336,\t#\022\360\277\031\030VM\247\361\317??\34556\364\221\364?\215\342\231\253fw\366?\177)\337o\334T\365\277\217\263\302\020i\t\002\300N\036$OZ\251\354?\202lV|5^\362?\337\224\201\021\007\307\256\277\314\246v\302*/\356\277R\216E\210\375\272\377\277\300\327\3306\205\027\333\277i\253S\305L\343\261?\2644\353\332\t\366\360?c\364\017Y>\007\362\277\267/\376\273:\002\345\277*n$\352\273N\371\277H\325t\334f\244\323?\216s\\\377\326\203\365\277\224\274\244\267\022\237\360\277\276\355\273\206\240\014\335\277\021|\314\337v\n\363?\024\002\321h5\021\350\277\227c\233\245I\226\344?\353\002\t\352#\177\356?O\2232\247\314\256\353?9\337\023@f\212\343\277=\263\264Z\347\211\335\277\307\232m\260\255!\324?1\020\307\376kh\363?\374\240\242l\030\303\336\277\210\016`K\235a\372?X;\246g_\332\343?\3730\322} \247\336?K\367`>\377\246\357\277>(\303\262Y\217\334\277\3645nRD\245\347?C\001;|\235\216\327?IEE\313^\300\323\277Y\260\264\277\321\337\342?eL(\275\365\322\264?\332\352\273\353\212b\342?\374\240\242l\030\303\336\277\261J\316*%\353\362?\231B\236\010\313+\000\300\355\020/2c\010\243\277\022\361\3327\351\017\362?s\373f&\213\"\350?\260\361s\316\260\354\363\277\016\366.\021p\355\353?\020\007\276\207\004\005\364?V\355p\220T\313\374\277\314ii\247\374M\321\277\235H\3136_\255\366\277\311\017|\010 \'\323?72\235\360\367v\344?\315\343\034#\241&\355?V\211\361\256v\335\345\277\262\277C=O\332\377\277\360\326BJ\355\224\352?kd\202\334\214\016\370?\254\332\023\2549\303\355?\266\202\207l\314\356\345?\233\307k\321\322y\316?z\366\312Qg$\337?,\323\317SJ{\301\277z\271\27569C\342?VQ\211\267z\317\345?\001\010\263\230E\374z\277\332\"$\343\206p\342\277S\216\336\315E\321\361?C\374\374\022#\245\330\277\374\240;\262`\331\340\277o\234;\0364\022\353?s\373f&\213\"\350?<\006\327P\301\214\340?\210rxr\303e\323?\331u\255\223\030]\343?\377G2\240\227\320\364?r\"\331\354:/\362?\206\203\035Ydq\326\277\233\372.\245\234\264\341\277\333\2272;\371u\341\2772\205\325V\336m\362?\202lV|5^\362?\026\354\355\030\032\034\346\277\301\224K\272\037\032\363?\274\010\335?6\353\335?r\206X\316\030\035\351?\270l\244\034\261\371\343?L\244p\323\265\320\320\277Wb\177\350\306\320\373\277]\253\307\240\002\354\366\277N\272\244m|\273\365?-\315O\362\022_\366\277\036\354\217\255p\007\314?!\342\375jo@\363\277\317\020`\2253E\365\277q\021Jv\246\027\352?\3563rK\375&\215\277\033\375\315\331Y)\341?\214\321\n5\322_\356?\033\300\'y\3431\342\277\343\022c\211\371\202\361?\275\334\305UT\013\367\277\372\273\303%\256\241\337?\373\363\304b\362\305\341?\303~hj\004%\361?\r\250\222\177\255\364\366?+^\301\373\327u\302\277\377\377\315to\323\333\277\365\252|\252\266\252\346?\025\264\205!\036\016\346?\201\264!b\025E\331?@\001\3521\362\230\364\277\305\253\022\227N-\327\277\201\367G$\303X\363?\000\005\014\336\351\274\332?++\376\'\016;\357?\2765 \262\310\t\366?m\340\243\330\236X\261\277R\362]\257#\277\350?\266\272\357c\310\374\345\277\364m\326I@\263\347\277n\352\206eK\025\355\277Z\350\034\267\315\355\342\277\013\227\003\t\031\335\356?\255O\"\004\254\310\354?=\373\030\206\017\207\366?\207\370+\261\326v\325\277P@\251\366:\302\352\277\030\236\242\321\002\031\344?\376\212\277\034\375\315\334\277\253-6\242\023\306\300?>\270\362\303as\334?K4\007\237u\236\356?S\252\222\311C\330\361\277\275x\255..\007\336\277\324\241s3OG\347?\262\277\334\202\227\360\361?R\265\267N\255\307\351\277\002N\003Lz\342\362\277\345\3402\370\227p\375?&\212\207\233\016`\306\277\314n\016\313.!\356?\370\t\250\262\r\273\343?\370\t\250\262\r\273\343?\0108qF\n\343\323?L4\240\344\275\264\320?\032\215d\245\031\367\316?(\t\022\306u8\303?]\031\303T\325\254\273?Ys\016_[\350\343\277++\376\'\016;\357?\355w\027B\226\204\355?4\213\246\002\301\177\360\277\315\336w\377nS\320\277S\216\336\315E\321\361?\200\236\355\307NZ\364\277P\244\301\035a\306\363?\030:\212\252\334\024\373\277\025\264\205!\036\016\346?\0108qF\n\343\323?\0108qF\n\343\323?\031\030VM\247\361\317?<>?H\275\232\340\277AZD\216f\227\363?\t\255\177\236|\350\322?\332\"$\343\206p\342\277o_\225\275\275\032\354\277\313\371\377r\274\033\357?E.\345\250\347\226\375\277\227c\233\245I\226\344?\226\212t&\261\214\374\277\261\346\265\003\377\346\351\277\366\211\177\r8@\002\300a\177\001\001\314\001\363\277*\363.vZC\301?\302Q%\370q\006\331?\362E\177E\265}\222\277\333\2272;\371u\341\277\3645nRD\245\347?\351z\310k\2103\240?\360Y\317\035-.\001\300\";X\307\343>\362?\233\302\306\255\240\246\341?\322\267V\203j<\351?y|\027\326\302K\343\277ize,\250\003\372?n\'-\306\301\014\354?\305\363v\302v*\360?\035\342\023\333{4\316\277\031\223\344\006Q\023\372?f\"M\310\3607\267\277\020\007\276\207\004\005\364?\321BH+\3706\352?3\372Ji\010]\377\277\213\\\225\"\250p\321?h\357\027\002i\231\000\300\337q>\370l\250\224?`x\356\\,\275\270?\177\312\004\2620:\333?|\243\332\346\035N\340?\274g\267\375\341\005\370\277J\277\370F\003\231\357?\317\220\223r\017:\354\277\214\321\n5\322_\356?C\374\374\022#\245\330\277\tIgwV\344\371?\242\205\302\341\200\232\310?\221\032S\355\r{\351?\305\253\022\227N-\327\277\262#\\du\336\350?>\214\333\331\177\223\365\277\206\203\035Ydq\326\277<C\344k\357m\335?\3046\004?\334\'\330\277\253-6\242\023\306\300?q\021Jv\246\027\352?D\271o\226\275\247\360?\177\312\004\2620:\333?\270\010\214\365\212\365\372\277\325\026\202\213\301L\346?-H\336\253\274\200\300\277a\331\004\020\265\034\274\277\257\3040\\\036\316\353?\333_\312C\375g\341?cM\321oj\357\376\277\225\261\346\354`\231\346\277n\'-\306\301\014\354?\251C\031\362.\273\302?\t\250A5\002\377\323\277\336>))0m\365?A\022\340b>\232\332\277\177\312\004\2620:\333?\"\300\311\r:\035\310?VQ\211\267z\317\345?\206\210[\302\336Z\325?3^c\220.a\350?(R\024l\014\330\000\300S\003T\340o\300\376\277\206\210[\302\336Z\325?\205\016\017\001\362k\327\277\243u_\363\234\301\361?\327\000\237;\246W\344?\037a\236\005\343\014\313?\303\3063P\344\013\330? \326\254]U\022\312?\n\"\365\260\246\327\357?\020k=i\342\362\352??-\001\034\324x\333?\002\357(\216\316\307\330?\0169U\323\035\001\366\277;\221\310\370N\207\341?w\222\372%\336@\345\277e\302x\r%\013\360?4\323q\350\240f\347?\346q\365K\010}\374\277\276\362\371\357\032\366\333?G\374M]\316\232\373?\263\230j\274\347\343\347?\203\341d\324\247c\361?&\037\365\025\221-\305?\270l\244\034\261\371\343?J\272S#\321\305\322\277!K\273\265\307\027\311?\324\241s3OG\347?\3046\004?\334\'\330\277\332\206\243\304d^\371\277\216\363\217\334\262x\354\277\362\347\321\300\201\254\362?oU\2620\021^\260\277\024\002\321h5\021\350\277\236&\227\331)\212\313?\200\236\355\307NZ\364\277>\270\362\303as\334?,h=\316\314H\300?\352\215\372\221\261y\357?\263\230j\274\347\343\347?\310\n>\237\245=\324\277H\325t\334f\244\323?\277\252.\n;\017\365?oU\2620\021^\260\277\027a\374p\214!\345\277\277g\010H\215\373\332?\256\202\345\327u\003\300\277\363x\224\024\362\270\361\277\014\014\022a\213\342\355?\216\363\217\334\262x\354\277\242\034\005\227(\303\362\277\353&\022\202~\375\244\277\014\014\022a\213\342\355?\326\311\3127\332|\234?3\372\343\256Ps\361?\333_\312C\375g\341?q\311~\220\3060\363\2778\234\221\373\006\007\001\300\366W\363\371$\276\345\277\021\030\264\270P\006\352\277V\211\361\256v\335\345\277k\000j\265f\n\357\277\333\376\032K,\362\253?<>\246\002u\204\336\277,\323\317SJ{\301\277\331\365\340p\364Q\372?6\275\216\230\205q\345?z\361%.5Q\342\277%~6\216\3641\375?/\3777\210\327P\353?\037\370\340\272\2125\365\2779\247\253Hj|\343?r\"\331\354:/\362?\305\253\022\227N-\327\277\261\256M\014\003\331\351?\310R\t\205\205$\373\277\";X\307\343>\362?\033\300\'y\3431\342\277G`f\204\364\236\324?\277\306\342\0059\026\365\277\275}\353\227\250\360\334?*\363.vZC\301?\031\023\261)u\036\343?\271\341\262t#\377\342?b\355\374\264\236\302\267?f7\356\037O\372\374\277\267\367\225\304>\364\344?\034w\201U\376\001\315?\373+-Z\356\323\341\277d\302\337\307\334\364\375\277\215Ati\022\222\320\277\374\245\340\325\222\254\335?\313\364ZO\212H\322\277\314&C\345N:\367\277C`\025:I\251\361\277\337\224\201\021\007\307\256\277\340\317\353|\240y\364\277\356\354%\232\010\212\354?\357a4\362z\217\353?\204\236>\022\372O\327?\252(_\363P\306\357\2774o\362\006\303x\360?\230\330\251\375\273\233\343?\377\377\315to\323\333\277G[(\033z\265\325\277\207\370+\261\326v\325\277\036W\"3\3569\315\277\373\363\304b\362\305\341?C`\025:I\251\361\277 \255U$\217\300\000\300\231\315\3532\n\226\371?\346q\365K\010}\374\277_\003\340\004\272\267\271?\275x\255..\007\336\277\332\352\273\353\212b\342?%\252\346\275\036(\306?\n\035P\215t\004\323\277)t\244K\363j\304\277\344\311\321$Y<\236\277K4\007\237u\236\356?v\332\305\013\276\'\374?u\345\203\326o-\346?\325\262id\233H\375\277\312\177L\367\027C\323\277\212\237\"\237\rn\371\277\204\236>\022\372O\327?\255\r\327\177\003\376\300\277_d\366\267B\027\275\277;-\260\321(\203\370\277\021\230\200\333t\021\363\277\305\253\022\227N-\327\277\351)\037.\"\034\000\300EvI\324\017\224\326?\262\277\334\202\227\360\361?\302\tZ\022\222\037\362?\355\257\1779\222\222\355\277\035\252D)\310<\340\277\362\347\321\300\201\254\362?\300\334\026\240\377\000\332?M\341}\356\343\261\355\277\234\267\010\343\356\240\367?\032\210\277\201\347#\342?njS\210o \366\277\035\252D)\310<\340\277:\034\272\240\334\201\342?!K\273\265\307\027\311?.&\252N\207]\365?\340\017R\2162\377\000\300\004\034l\000a\346\360?\360r\303h\017\247\363?>\270\362\303as\334?\262f\202&#\362\362\2771,{\372io\363\277\235\261\210\201\267\204\314?9\337\023@f\212\343\277]z\331\007^\014\277\277\221\032S\355\r{\351?IJ\2034\331\251\322?J\272S#\321\305\322\277\325Y\250Mo`\360\277O/\263\305\356\300\364?\326\'x\274\rN\374\277\276\355\273\206\240\014\335\277\311\017|\010 \'\323?R\362]\257#\277\350?,\323\317SJ{\301\277k\000j\265f\n\357\277\333\337\375 \331\\\370?t\014]W\327#\376\277k\366\206(\272M\263\277\306%_X;\034\325?\267\367\225\304>\364\344?\214\314e\021\240\214\321\277\256\207\212\373\247\326\354\277\362\347\321\300\201\254\362?*\351\262\243ep\303\277\361KQ\242_\232\351?K/b{C\313\321\277\305\017+\276t1\360\277\211*\024G\233h\372\277\344\246\216\013\277\035\244?/\3777\210\327P\353?\312\204\212`\222,\322?E\0221\255\351\217\375?\237\221)_\247\274\314\277z\361%.5Q\342\277T\003\355%\270\326\360?\030\326\n\311\376&\344\277\007I\013\365\244t\001\300\240\020\264\211\016\225\311?\373+-Z\356\323\341\277J\277\221\214K\257\321?\210rxr\303e\323?\351\235\013\205\"R\232\277A\027\036\314\270\203\331?K/b{C\313\321\277\375]\025\360\262\305\366?J\277\221\214K\257\321?\354\236\211\010F\221\367?$%\3341\2003\376\277\305\363v\302v*\360?\207\375i\032Q`\324?\313\2614\215\3344\370\277\205\313\350>DX\375\277eL(\275\365\322\264?\317\3159\323\2051\353?qI\262m\242%\352\277\025\264\205!\036\016\346?\325\226\265h\235A\375?Y\245\232rnj\000\300g\254\374w\301\377\373\277\013\222^\345\346\t\322\277-\025\033\330\362E\355?\360\372K\342G\023\241\277\226\356\214M\327\220\345?u(\252\230\035A\360\277|\333\251\230\321E\336\277\017\222\257/\222\377\364?%\232\352\211\3628\375\277.\212)0eK\354?\234o=\375\016\272\340\277\273\216)\304\221\022\342\277\327\000\237;\246W\344?\264\ry\024Z\351\346?f\"M\310\3607\267\277_\003\340\004\272\267\271?Ys\016_[\350\343\277U\024\343V\004\330\346\277\027)\224y\220\023\345?\234o=\375\016\272\340\277\301\224K\272\037\032\363?\324\331\333*KU\347\277\2609?\264\220\323\352?\321\372|E\030P\363\277\276\355\273\206\240\014\335\277tpu~\375\'\347?\271}\232M\375\372\371\277&\212\207\233\016`\306\277\326N\352\202\275Z\346\277\225\025f\316>\207\375\277\036\354\217\255p\007\314?3\226\313\207*o\350\277\001\010\263\230E\374z\277\277g\010H\215\373\332?\275xFtv\035\340\277\333\373\261\034\327c\370\2772\351T8\274[\351?\036\354\217\255p\007\314?u\345\203\326o-\346?\013\222^\345\346\t\322\277\004\331E>\263\322\326?\372\266\036\002|\316\342\277\262#\\du\336\350?\266\202\207l\314\356\345?2!\275/\270i\351\277\200\2029\314PS\364?N\036$OZ\251\354?\300;\361]\253\033\364\277\030\326\n\311\376&\344\277\374\245\340\325\222\254\335?Y\272\227L~\234\276?,\240\014\200\200@\356?\252#\272\317\036\363\302\277\236\375?\240c8\002\300;\311\227\252\002\177\337\277\363\\\340\030\364\261\361?~U\366Y\2764\334?\364m\326I@\263\347\277\030:\212\252\334\024\373\277\n\"\216\366\356\355\321?\303\3063P\344\013\330?<\206\n.\235\201\367?0\367\322\263\211\357\000\300\226X\201X\346 \002\300\256\202\345\327u\003\300\277acM\005\316\372\362?H\3206s\354\272\324\2776\275\216\230\205q\345?\236&\227\331)\212\313?4\323q\350\240f\347?\204Vs,\032i\360?\343\022c\211\371\202\361?Y\272\227L~\234\276?0tF\340IV\352?\314\246v\302*/\356\277\0012OP|\333\362?\335\3507\373\020\375\251?D\271o\226\275\247\360?I[\035\343s;\000\300$%uw\310I\360?\277b\312\336\022\022\334\277\017.\227\010l\373\353\277V\321\274\224V\304\374?\247\316\n\232\274\265\303?\177\305\306H\266P\334\2779\247\253Hj|\343?\344h\273q\320\334\252\277\240\213BC\270\266\363?\306 !\357\3002\326\277\020\007\276\207\004\005\364?AZD\216f\227\363?\255O\"\004\254\310\354?]\253\307\240\002\354\366\277\3563rK\375&\215\277R5\204q\321\322\362\277{.\314\216\253H\341?\300\334\026\240\377\000\332?\002\357(\216\316\307\330?\031K\031!q,\343\277\331u\255\223\030]\343?\013\222^\345\346\t\322\277W0\214\032\374d\001\300B\317R\346\330\234\362?\321BH+\3706\352?\300\037=b\255\024\364?j\201x\320GH\264\277|\243\332\346\035N\340?cb\013\r\021\310\266?\\\232\321o\266\352\340?\330\024\376\232G\347\255?\3645nRD\245\347?\337Z\335$.t\365\277,XA\232\240Y\367\277\307\232m\260\255!\324?\344\207\330\233#r\376\277lk\225\200,S\262\277\275xFtv\035\340\277B\207\356\272\260\237\331\277\014\007m=Y\017\321\277\200\2029\314PS\364?\217\314\266[K\202\364?\321z\260\"\364D\352\277\324=\364QqY\360?J[ye%\253\370?\3131hj\270)\357\277\200\2029\314PS\364?_y0U\351\357\364?O\2232\247\314\256\353?e\255>p~2\270\277\364\321\356pf\267\360?\334p\300tIi\367\277\275\334\305UT\013\367\277\244\352mK\017\307\360?\274\0038\034\004\030\341\277\345\374\346\363\225w\375\277\001z\0326\\\302\331?\n\332)\313\306\360\370\277\245_\343]9\266\375\277`x\356\\,\275\270?CDa>K\242\361?\212\203n\243\017g\371?A\022\340b>\232\332\277:\034\272\240\334\201\342?\007{\376\302o\340\373\277\037\334,\277\214.\365?\020c\330\224\224\221\000\30072\235\360\367v\344?4oY\301zb\376\277\322o\213\235\212U\362\277\024?w\311\253\010\347?G`f\204\364\236\324?Q\031\320u\323\313\362?\212WW\271-\207\322\277\312\177L\367\027C\323\277|\243\332\346\035N\340?\030\326\n\311\376&\344\277\21706=)p\353?\326\311\3127\332|\234?~P\270\360CK\335\277C\001;|\235\216\327?\247\304\216\307\307\342\305\277\003_\371|\306\343\330\277\225y~\365d\213\346?\326\213\220\3433R\345?f\3016\025h\330\263?\201\257\343\370\232[\332\277l=\020\026\335\001\356?\005I\026-\253\356\326\277\270\354\327\371\214\356\372?\273\216)\304\221\022\342\277\024\202\235\213Y\034\361\277r\276\300\305\024+\351\277\003\303\021\244\354\347\361\277bN\023h\'\"\273\277T\237\324\376\221\322\347\277vZ\222.\3422\345?t\360\250[\331\034\376?\351z\310k\2103\240?J\272S#\321\305\322\277*\363.vZC\301?[\032\005M\222\337\367?`\356>\255[\365\363?eL(\275\365\322\264?\351)\037.\"\034\000\300\177\305\306H\266P\334\277I\346j\r\263\245\371?\320i\272\361\247C\364?\245\332q\027\343\327\307\2775\344g\031\355g\375\277\344\207q\341k\210\360?\242\360Tg\376\314\311\277#5\330e\254\"\307?\233\372.\245\234\264\341\277\376\322#H%\313\365?`\n\363\250Y\374\363\277\2347\325\005\023\254\340?\006\352;o\377\323\374?Q\300u\031_\315\363\277\262#\\du\336\350?\025\264\205!\036\016\346?\021\230\200\333t\021\363\277;\316\325\023}h\336?D\325#\222\273\256\360\277i\014jx\325B\265\2772\205\325V\336m\362?_y0U\351\357\364?\035g\036g\032)\366?\001u\334\314\341\330\332\277\323\344\231\365\374Z\361\277ME\226\025\n\266\366?b\330[]@\000\362?|f4\206\247V\341\277l\331\2204\377\023\367?\000\331\364\363\007\335\363\277vZ\222.\3422\345?<\006\327P\301\214\340?\031\023\261)u\036\343?\'hS>\331<\373? m\357\022\375:\364\277\317\3159\323\2051\353?<\006\327P\301\214\340?cM\321oj\357\376\277\2609?\264\220\323\352?\023fPJ\023\377\376\277\346\220\253\273\243(\242?\01033\335\217\371\324\277\nZ]\250\242\345\357\277\315\033\205\032\2354\355\277\355w\027B\226\204\355?\344ExX6\276\220?\033}\001\2675\036\370?\315\177\235A\3038\366?\020k=i\342\362\352?\272\362\250\245o\000\371\277jS\363e\370\366\357?L4\240\344\275\264\320?\216\273\'\345\266j\354?\306 !\357\3002\326\277\330\024\376\232G\347\255?\371A\020\252\t\311\343\277@\001\3521\362\230\364\277u\014\366\234\037:\360?EvI\324\017\224\326?m\262\036nO\007\355?\234\247\014\257\302\261\316\277\263\333\220~\225\367\361\277$%uw\310I\360?^\004\"\375v\352\365?Y\260\264\277\321\337\342?\237\233\2451\234\217\312?A\022\340b>\232\332\277\344\246\216\013\277\035\244?!\306Ioq9\363?O\313\232\236\310\274\353\277-\025\033\330\362E\355?\364m\326I@\263\347\277IJ\2034\331\251\322?\306 !\357\3002\326\277\331\021\225l\362X\372\277L\320\207\275\227\260\367?\21706=)p\353?\262\277\334\202\227\360\361?\370\314\001R\227\303\344\277\316\233Q=\301?\366\277\212\347\206\3125k\322?\n\"\365\260\246\327\357?\361\016\253A\351\242\352\277\252\214w\032w\312\370?;\021\374\325*|\370?YL\234\230\253\333\371\277\216\273\'\345\266j\354?\3046\004?\334\'\330\277\344\311\321$Y<\236\277\236&\227\331)\212\313?9\247\253Hj|\343? m\357\022\375:\364\277\374\004\273\223>\307\367\277s3\317\035\2070\350\277\276\362\371\357\032\366\333?\375\032\357-\005\262\334?\366\037\213\002)\260\345?\360\326BJ\355\224\352?}\333B\336\031\\\340\277\031K\031!q,\343\27772\235\360\367v\344?\223+I\036Z|\377\277X;\246g_\332\343?:Y\307\273\nc\337?\2601\332\337Br\000\300\242\000Q\233*\274\362?\237\0264\353E\261\364?\323\310\345\371\376S\361?\231R]y`t\317?\022\215\302\020\303\013\351\277\236\034\033\0075\267\315\277\244\352mK\017\307\360?e\302x\r%\013\360?S\216\336\315E\321\361?X\273\331D;\317\372?;\316\325\023}h\336?\265\251`\3553\345\375\277\244C/b;\257\375?\2332\376VP\254\317\2773^c\220.a\350?\326\013\304\300\017G\374?\234<z)E\177\315?;\316\325\023}h\336?\357\231\234\351v\235\353\277G\030\002Y\314\241\373\277\251C\031\362.\273\302?\324=\364QqY\360?\272\031\033l\037\r\343\277Q}OW\261\271\351?F\353W,\202\231\325?++\376\'\016;\357?~\r+t\336M\365?\017\222\257/\222\377\364?\";X\307\343>\362?\263[\304[q\354\350\277z\271\27569C\342?Z\245\366\364\037\332\370?72\235\360\367v\344?\"W\014\303\341E\362\277\001z\0326\\\302\331?^\357\347_\320\021\276\277\301\224K\272\037\032\363?4o\362\006\303x\360?N\036$OZ\251\354?\375]\025\360\262\305\366?\342~\236\301\353\321\254\277\323\310\345\371\376S\361?\234\323\274\336\354\247\367\277E\346\031\303\007\260\326\277\311\307\027\335\367)\372\277\205\313\350>DX\375\277\325\026\202\213\301L\346?\205\2574CFQ\375?\342\274q[\332\022\246?\367\333\345\013\220R\205\277eL(\275\365\322\264?B\214,$+\211\330?\006\276$\205\035\364\325\277\206@\367\226\266]\374\2773\372\343\256Ps\361?\001u\334\314\341\330\332\277\\\232\321o\266\352\340?\244\006\"G\r\316\360\277#+\\\223\267O\311\277g_\371\225\275UQ?\201\257\343\370\232[\332\277\361KQ\242_\232\351?\221\032S\355\r{\351?Z\350\034\267\315\355\342\277\363\370\307\361\315\255\350\277G[(\033z\265\325\277\221]y\257\273\216\363\277\3730\322} \247\336?\231\020\022\365\267\251\343\277\202$\362P\ra\331\277\322S\327\241\214N\362?\220\350jWI\211\364\2778j\005\350\363\204\344\277\234\323\274\336\354\247\367\277~P\270\360CK\335\277;\311\227\252\002\177\337\277\365Fd\203\220\246\375\277\212\\\374\334_Z\357?\211\342Ha\273\201\323\277|#\016\304\371B\367?\0254\271\376\371\002\375?\356\244Z\264(\243\365\277\305\260P\000\311\026\326?\024?w\311\253\010\347?~\r+t\336M\365?Ys\016_[\350\343\277\260q\247\253\214\341\352\277yD\257\336\306=\343?\323\344\231\365\374Z\361\277\357\375\264\020\235\241\364?`\356>\255[\365\363?d\327\031e\203\315\265?x\007\t~PF\344\277e\255>p~2\270\277>(\303\262Y\217\334\277kd\202\334\214\016\370?\374\245\340\325\222\254\335?\004\324\007\3258\351\327\277]\031\303T\325\254\273?\242\000Q\233*\274\362?\276Q\324\255\306\020\366\277\305\260P\000\311\026\326?\320\205n\355\245J\364\277\221\335\254\214\227\203\352\277\3106U\211\207\035\373?;\221\310\370N\207\341?\'\224\003n\0033\304?\334T\014yKb\367?P\244\301\035a\306\363?\263\230j\274\347\343\347?n\'-\306\301\014\354?Z%\303\027D\345\341?)t\244K\363j\304\277\257\3040\\\036\316\353?*n$\352\273N\371\2775\200\3507\017z\346\277\232\351\237.\010\235\371\277\220\245D\225\233u\352?\300;\361]\253\033\364\277\252\360\366\373T\270\357?\374h\323\272d\313\340?\356qE\345\353g\226\277e\255>p~2\270\277B\214,$+\211\330?\355\020/2c\010\243\277\177\305\306H\266P\334\277,XA\232\240Y\367\277\0169U\323\035\001\366\277\242u\306\255T\253\377\277Z%\303\027D\345\341?\275x\255..\007\336\277\230t\221\326\225\227\372\277\2509\235\037:\350\304\277\372\273\303%\256\241\337?\303\301\365\346i\"\331\277\355\023\230`\270\226\366?\322\267V\203j<\351?0\233\270\246\371b\364?\322\267V\203j<\351?\222R\273\344\t\211\351\277\231R]y`t\317?\373+\224\024\246\275\337\277\356\354%\232\010\212\354?Q}OW\261\271\351?`JY\272\353\201\000\300\272V\301\314\225\004\342?\275}\353\227\250\360\334?\330\234\206\024\200S\373\277\247\304\216\307\307\342\305\277k\366\206(\272M\263\277\272\362\250\245o\000\371\277]\031\303T\325\254\273?:\034\272\240\334\201\342?\362\003\206\274\177\263\362\277j\357s\204\032\t\371?\037\370\340\272\2125\365\277\275xFtv\035\340\277\251\027i\302\004\305\371?\353&\022\202~\375\244\277\032$\247Z\301\037\371\277\355w\027B\226\204\355?\333\376\032K,\362\253?\315\177\235A\3038\366?\002N\003Lz\342\362\277\003\247]\250\356\340\361?\243u_\363\234\301\361?%\025yC\234Z\307\277(\377\225\363\200e\305\277CD\310\370\002\214\377\277\277\006I\027\313\233\001\300\203)0\272\207J\330?\232\351\237.\010\235\371\277\343\022\312C\261l\377\277\004\324\007\3258\351\327\277\303\301\365\346i\"\331\277\2765 \262\310\t\366?\200?\023\n\243?\332?\274\0038\034\004\030\341\277D\271\326Pu\221\376\277\322S\327\241\214N\362?\001u\334\314\341\330\332\277}\230\034\034lH\366?\317\220\223r\017:\354\277\316X+{\023,\354?\377\377\315to\323\333\277:T\"\230\330\217\342\277\242\360Tg\376\314\311\277\245\332q\027\343\327\307\277\005\221\341\022\213\325\375\277\235H\3136_\255\366\277d\327\031e\203\315\265?yD\257\336\306=\343?_\225\344P\347\366\364\277\206$C\233\270V\374?\332\"$\343\206p\342\277O\2232\247\314\256\353?\207\375i\032Q`\324?l=\020\026\335\001\356?\243\372\3209\363\237\307?e\302x\r%\013\360?c\303!\300\231\'\272\277\320i\272\361\247C\364?\374\240\242l\030\303\336\277l=\020\026\335\001\356?d80\030\014-\271\277\263\230j\274\347\343\347?N\326Xiz\302\365\277\256\353\242\"\316\332\365?L\251\025\367\347\243\355?pTp8T+\364\277tpu~\375\'\347?\3308\0073\242e\344\277VQ\211\267z\317\345?\335\3507\373\020\375\251?B\214,$+\211\330?\n\"\216\366\356\355\321?\'\335\005\024\232\322\001\300\244\352mK\017\307\360?\03456\321U7\341\277^\357\347_\320\021\276\277\032\210\277\201\347#\342?\2644\353\332\t\366\360?\001z\0326\\\302\331?\324=[\014)C\376\277\\\244\264\374b\247\274?J\277\370F\003\231\357?\027)\224y\220\023\345?d80\030\014-\271\277\277b\312\336\022\022\334\277~P\270\360CK\335\277`\n\363\250Y\374\363\277\374h\323\272d\313\340?\376\212\277\034\375\315\334\277S*\306\246\037\315\350\277\312\204\212`\222,\322?\006\276$\205\035\364\325\277j\201x\320GH\264\277\265E\341\013V\367\346\277\244o\337\221e\245\306?U\334z_\010\312\346?\240\0068\267\031\302\313\277\033\375\315\331Y)\341?r\"\331\354:/\362?b\330[]@\000\362?E\346\031\303\007\260\326\277\324\331\333*KU\347\277\326\213\220\3433R\345?\215F\031\215De\355? Q;\027\3773\364?\255\222H\306Y\334\366\277\r\201 \271\375\347\354?\207\370+\261\326v\325\277)~ \036\350=\302?O\2232\247\314\256\353?\276\362\371\357\032\366\333?\272V\301\314\225\004\342?=\263\264Z\347\211\335\277tpu~\375\'\347?Ys\016_[\350\343\277,<\215\236\242R\367?\306%_X;\034\325?\361\216wd\r\256\363\277\010\324X\037\344\336\372?\230\330\251\375\273\233\343?R\362]\257#\277\350?\243u_\363\234\301\361?\264P\237\326\007\375\360\277\005NT\226%\330\325?\262\277C=O\332\377\2773\226\313\207*o\350\277\331\255\025\213\024k\343\277\271\036\300\217Q\340\337?\265\305\255.z\002\360\277y|\027\326\302K\343\277g6Em\332\335\262?\234o=\375\016\272\340\277\355\020/2c\010\243\277\373\363\304b\362\305\341?\207\231Q\363*\\\373?x\317\240\206T8\344?/\3777\210\327P\353?\267\367\225\304>\364\344?\317\364\253\2315>\365?\317P\306\246\305\312\001\300\304;B\250V\021\327?%A)s\306P\360\277\313\371\230\270\0042\321?\225\371\261\322@\200\375?:Y\307\273\nc\337?S\252\222\311C\330\361\277\210m:\tI|\324\277\232\205 M*\257\342\277\226n\300*\263\205\374?\014\007m=Y\017\321\277+\3432B.T\370\277\272\216\220~I\374\337\277\264\ry\024Z\351\346?\267w\311\241\032\351\373?^\357\347_\320\021\276\277\237\0264\353E\261\364?\344\311\321$Y<\236\2772\205\325V\336m\362?(\t\022\306u8\303?\307\225/G38\325\277\247\316\n\232\274\265\303?\362\300_\372\321\237\350?\237\233\2451\234\217\312?\r\201 \271\375\347\354?\227c\233\245I\226\344?\013\227\003\t\031\335\356?g\254\374w\301\377\373\2775\310\263\035\357`\375?\024\333^\242\205\004\376\277Dq\013k\225\252\327\277\0133\204\';\357\367?\031\023\261)u\036\343?\265E\341\013V\367\346\277e\255>p~2\270\277\330\024\376\232G\347\255?\254\230\310\'\221\370\301\277\022\215\302\020\303\013\351\277\034w\201U\376\001\315?\254\332\023\2549\303\355?\357a4\362z\217\353?\261\346\265\003\377\346\351\277\223G\226_\240\231\361\277\221A\305\263\275\207\363?\346R\330!\265\347\250\277f\"M\310\3607\267\277\367\224\231Z\233\265\344?\034r\3341\314.\340?\013\222^\345\346\t\322\277\224\004p\235\362\205\347?(\204\007:\327C\373\277/\3777\210\327P\353?\243\372\3209\363\237\307?\267\367\225\304>\364\344?&\017\371\341d>\374\277\356\210\246\270*\234\365?[/\246\244\360\241\275?G`f\204\364\236\324?\321z\260\"\364D\352\277\270l\244\034\261\371\343?\332\352\273\353\212b\342?,\330tw|N\356\277\010\360\014\033\342\345\372\277,\330tw|N\356\277[/\246\244\360\241\275?IEE\313^\300\323\277\r|{\225\313\024\320\277\034\362\017\017\250#\367?\326\213\220\3433R\345?\204\236>\022\372O\327?\215\342\231\253fw\366?\01033\335\217\371\324\277$\314\032\033TK\361\277\315\336w\377nS\320\277<C\344k\357m\335?\216s\\\377\326\203\365\277j b\035\277\350\260?{\312\263g\205D\370\277y\304\342\273\2422\372?!A?\343\322D\313\277\n\332)\313\306\360\370\277\275@\336|z\017\340?\362\300_\372\321\237\350?\341(F\331\024x\363?\344\207q\341k\210\360?;\311\227\252\002\177\337\277\254\230\310\'\221\370\301\277\244o\337\221e\245\306?>\214\333\331\177\223\365\277<\006\327P\301\214\340?\305\260P\000\311\026\326?q\255\312\224\310)\363?\376\356\327C#\322\365\277\303~\317$\274\016\377\277\231R]y`t\317?o\303\255\344\343\036\365?$\240j\353)U\310\277MaJ\021\010\275\366\277\034m\005\203\t/\317\277\272\216\220~I\374\337\277\356\244Z\264(\243\365\277\003\247]\250\356\340\361?\r\304F{\253\373\366\277\307\225/G38\325\277\323\310\345\371\376S\361?\t\255\177\236|\350\322?[]+\017@\363\341\277i\014jx\325B\265\277\305\260P\000\311\026\326?0tF\340IV\352?\236\241%\223\323\253\365?\023\312hq9\003\350?\317\364\253\2315>\365?\314\n\217\351P3\367?\025\333\367\347\315\032\360?0tF\340IV\352?-\025\033\330\362E\355?\255v\224\312[\325\366?T\003\355%\270\326\360?\311\017|\010 \'\323?\362\203\271\231[\250\351\277\354:q\341\037\215\356\277T\\\256<\344\276\375?x\007\t~PF\344\277\364\321\356pf\267\360?\027\305{Rj\017\374\277u\345\203\326o-\346?>(\303\262Y\217\334\277\271\036\300\217Q\340\337?t\014]W\327#\376\277\242\205\302\341\200\232\310?\016\035\241\327\037\372\365?\370\245\217\213\347\266\372\277\004\034l\000a\346\360?:Y\307\273\nc\337?\214\314e\021\240\214\321\277\270\244\014\024\255\007\344\277\306\301F1\025\030\374?\n\035P\215t\004\323\277P\010A\377>\264\352?(\377\225\363\200e\305\277a\177\001\001\314\001\363\277:T\"\230\330\217\342\277\351z\310k\2103\240?\273\313\317$\010\n\341?\333\2272;\371u\341\277%A)s\306P\360\277O/\263\305\356\300\364?\027a\374p\214!\345\277\324=\364QqY\360?\341\204`\346\244\004\000\300\025w\337\300\247\026\347\277\274\003\237\326\273\001\337\277\221\032S\355\r{\351?\031K\031!q,\343\277\001\010\263\230E\374z\277p8\274<V$\364?\032$\247Z\301\037\371\277\322\267V\203j<\351?h\227[ c=\266\277\252#\272\317\036\363\302\277\234<z)E\177\315?\267w\311\241\032\351\373?i\014jx\325B\265\277l=\020\026\335\001\356?o\037\310\361s\253\001\300\335\311\032\321\275g\366?Y\260\264\277\321\337\342?\313\371\230\270\0042\321?\035\252D)\310<\340\277\274\010\335?6\353\335?\007{\376\302o\340\373\277\334\324\330\233om\340?\323\310\345\371\376S\361?\01033\335\217\371\324\277\326*\341\352b\334\257?5H\200@\023l\346?di\036\261\260\014\361\277H\215\020\261>\247\372\277\276\362\371\357\032\366\333?\205\016\017\001\362k\327\277-\261\233\366\024X\366?E\346\031\303\007\260\326\277Z%\303\027D\345\341?\363\\\340\030\364\261\361?j b\035\277\350\260?4\213\246\002\301\177\360\277\214\321\243z\032v\320?dMj\265\262\005\361?o_\225\275\275\032\354\277\332\333\3271\222\323\201?G\030\002Y\314\241\373\277\224\240\360\273\024\230\360?\350\264\020\326\257\026\001\300\031\023\261)u\036\343?\255\022|\2435\321\355\2772\351T8\274[\351?o\234;\0364\022\353?\272\216\220~I\374\337\277_y0U\351\357\364?\345\374\346\363\225w\375\277g6Em\332\335\262?\222\322\207\007.\224\362\277R\265\267N\255\307\351\277\360\031i\014\233\250\364\277\300\334\026\240\377\000\332?\203\231\000\251\177f\330\277\372\273\303%\256\241\337?\033\002s\375\213\374\315?-\025\033\330\362E\355?07\240\177\323^\353\277\223\217aE\200\200\350?\323,e\333\334A\350?#\260f\037VD\361?\n\"\365\260\246\327\357?\te\033sT\353\371\277Z\350\034\267\315\355\342\277\233\307k\321\322y\316?\264\320\322\263\343\361\347\277\231\020\022\365\267\251\343\277c\303!\300\231\'\272\277\251\214\033\230\305Z\000\300b\330[]@\000\362?\352\215\372\221\261y\357?\037a\236\005\343\014\313?\004\331E>\263\322\326?\005I\026-\253\356\326\277\344\243%\335i\217\360\277\353E/\254\321\222\370\277\301\260\377\265\035!\363\2776Yvq_m\374\277\260q\247\253\214\341\352\277\247\316\n\232\274\265\303?@APC\204\036\001\300$%uw\310I\360?\355\020/2c\010\243\277yD\257\336\306=\343?\2634R\225\301\337\376\277\360\372K\342G\023\241\277\327\303\370\332/`\345\277Z\301\252\360\035\341\370\277\253e\005T\307\275\356?\270\244\014\024\255\007\344\277\326N\352\202\275Z\346\277\203)0\272\207J\330?i\014jx\325B\265\277\365Fd\203\220\246\375\277\007\303b\356\227\335\324?\373\217\254;\314\301\370\277\356\210\246\270*\234\365?\253\250+\026u\321\370\277u\250\335u\3715\347\277\315\343\034#\241&\355?7\262\320\315\323k\373?\313\371\377r\274\033\357?\0378G\314\034\273\001\300\201\257\343\370\232[\332\277W\306\227\017\355\324\344?\254\035:n\347\326\367\277\224<\330\224\356\223\347\277\310\n>\237\245=\324\277\233\307k\321\322y\316?\03456\321U7\341\277b\355\374\264\236\302\267?g_\371\225\275UQ?\374\350\006\230@\300\367?<\242\276)\233\210\367\277q\311~\220\3060\363\277CDa>K\242\361?\204V\332\346\321R\376\277\203)0\272\207J\330?\357a4\362z\217\353?=\373\030\206\017\207\366?\357a4\362z\217\353?\337\322T\253\365\007\250?U\334z_\010\312\346?\'\26043\326\246f\277\0012OP|\333\362?\'\26043\326\246f\277\034r\3341\314.\340?9\021\240Sy\014\000\300\21706=)p\353?\205\023MjlU\326?C\374\374\022#\245\330\277\244\352mK\017\307\360?\000\275@\370\t\326\363?\3670\2013u\261\373\277s\373f&\213\"\350?u\345\203\326o-\346?\377\377\315to\323\333\2770tF\340IV\352?]z\331\007^\014\277\277}\340\347\001L/\335?\2609?\264\220\323\352?J\272S#\321\305\322\277E.\345\250\347\226\375\277\2372\350\346C\270\364\277\020k=i\342\362\352?w\366y\007\274.\374\277\035g\036g\032)\366?\312 r9l(\371?\376\322#H%\313\365?\332\"$\343\206p\342\2773\372\343\256Ps\361?#\260f\037VD\361?\223\217aE\200\200\350?acM\005\316\372\362?\246Y\374AJ\260\304?\005NT\226%\330\325?N\272\244m|\273\365?\344\207q\341k\210\360?\207\375i\032Q`\324?\343\022c\211\371\202\361?Kw-a#\262\370\277\033\002s\375\213\374\315?4\323q\350\240f\347?\034r\3341\314.\340?lux\r\331\017\356\277\023\312hq9\003\350?\211\342Ha\273\201\323\277\371~\266\n\200\300\342?L\251\025\367\347\243\355?~U\366Y\2764\334?\255O\"\004\254\310\354?\226&\365D\323\236\345\277\241\247\366>\266\275\363\277\356\354%\232\010\212\354?\321BH+\3706\352?\374h\323\272d\313\340?\313\371\377r\274\033\357?\273\313\317$\010\n\341?\351\235\013\205\"R\232\277\325\262id\233H\375\277IJ\2034\331\251\322?\025\333\367\347\315\032\360?\321\336\310I\032I\363?2\351T8\274[\351?]\217\023\245\004\345\366?\177\305\306H\266P\334\277xk\210_.4\373\277N\326Xiz\302\365\277F\353W,\202\231\325?o\303\255\344\343\036\365?\303~\317$\274\016\377\277^\216\321\254G\262\272?\254\332\023\2549\303\355?\270l\244\034\261\371\343?\230X\335\332\227\220\372?\304\232\034f\002,\361\277\307\225/G38\325\277\332\352\273\353\212b\342?\247\304\216\307\307\342\305\277\365\252|\252\266\252\346?\252\360\366\373T\270\357?\000\005\014\336\351\274\332?P\244\301\035a\306\363?\252\270\'J\241\300\301?\3670\2013u\261\373\277\222\266\323\0130\215\362?\024?w\311\253\010\347?S*\306\246\037\315\350\277\006\276$\205\035\364\325\277\321BH+\3706\352?\363\\\340\030\364\261\361?\331\255\025\213\024k\343\277\321BH+\3706\352?\204\236>\022\372O\327?\205\016\017\001\362k\327\277\264\215\254\3615\336\375?\233\302\306\255\240\246\341?\033\300\'y\3431\342\277\232M\270U.\241\342?\024f\351\217[\025\361?x\317\240\206T8\344?\004u-\027\215\316\375?@\242\017tF~\332?NV\214FV\267\354\277Uxb8\342\305\375\277K\367`>\377\246\357\277\014\014\022a\213\342\355?D\271o\226\275\247\360?jS\363e\370\366\357?\n\"\216\366\356\355\321?\013\222^\345\346\t\322\277e\033:$Q\363\374?\210rxr\303e\323?\033\002s\375\213\374\315?\003d7\346@\315\327?\305h\354\324\240\031\375\2772\241\211R\334t\362\277\003d7\346@\315\327?\007\303b\356\227\335\324?\307\232m\260\255!\324?K4\007\237u\236\356?\200?\023\n\243?\332?5H\200@\023l\346?\t\250A5\002\377\323\277\0048 \374^\355\360\277cb\013\r\021\310\266? Q;\027\3773\364?\273K\003\002\344\376\367?yD\257\336\306=\343?\300{Wo=\241\000\300\300\327\3306\205\027\333\277,\240\014\200\200@\356?\252(_\363P\306\357\277\003\247]\250\356\340\361?\233B\372\212|\233\370?\315\336w\377nS\320\277<C\344k\357m\335?\033\300\'y\3431\342\277?\34556\364\221\364?7\316\204\311\321r\373\277X\327\215@9\326\372\277Sgl\007\226\304\347?\257\374\230S\032\334\353\277\020\243\245`\336\000\353\277\360\326BJ\355\224\352?\006\006\360j\375\332\374\277\240\020\264\211\016\225\311?\3213dq\377\247\211?\007\303b\356\227\335\324?\223\217aE\200\200\350?*Rp\356\275G\371?\344\207\330\233#r\376\277\327\365\204\356B\342\001\300\r|{\225\313\024\320\277n\'-\306\301\014\354?\341D\372\324\022\177\363\277\271\341\262t#\377\342?N\036$OZ\251\354?u\014\366\234\037:\360?\223\307\311<|\216\350\277\340\317\353|\240y\364\277=\263\264Z\347\211\335\277\025\264\205!\036\016\346?|k\331\251\331)\336?\301L\347\216\367\034\332\277O\2232\247\314\256\353?L4\240\344\275\264\320?\021\340K\301T\370\351?x\317\240\206T8\344?tpu~\375\'\347?6\275\216\230\205q\345?B\207\356\272\260\237\331\277\253e\005T\307\275\356?*\363.vZC\301?\262\277\334\202\227\360\361?\302\tZ\022\222\037\362?+^\301\373\327u\302\277\305\017+\276t1\360\277\324\241s3OG\347?\002\352\352$T\336\331\277\236\275\331\216\321\262\365\277\372\266\036\002|\316\342\277\331\255\025\213\024k\343\277A\022\340b>\232\332\277\206\210[\302\336Z\325?:\034\272\240\334\201\342?\227\377\202~#\222\373\277O\213\315\322~M\001\300&\037\365\025\221-\305?\361\316\335u\2373\000\300\304\363\335|.\024\376\277\357\375\264\020\235\241\364?\024f\351\217[\025\361?(\t\022\306u8\303?p\224\326I\346\260\000\300B\353\006\342\326\243\362\277\222\266\323\0130\215\362?oU\2620\021^\260\277c\364\017Y>\007\362\277\245\344\355\351\327\252\305?\375\025\261\304\212\310\335\277h\227[ c=\266\277s3\317\035\2070\350\277\321\336\310I\032I\363?d\327\031e\203\315\265?s\227\347D\2554\361?\027\223\210\204\237\243\001\300\003\247]\250\356\340\361?\351z\310k\2103\240?-\315O\362\022_\366\277\312\177L\367\027C\323\277\255\r\327\177\003\376\300\277\003_\371|\306\343\330\277:Y\307\273\nc\337?\341(F\331\024x\363?\370\314\001R\227\303\344\277K/b{C\313\321\277!K\273\265\307\027\311?3\372\343\256Ps\361?\346UAP\nv\374?\316\233Q=\301?\366\277\234<z)E\177\315?\276\355\273\206\240\014\335\277\002\352\352$T\336\331\277\244o\337\221e\245\306?\343.\027\205\367\211\361\277\314n\247\020w7\320?!A?\343\322D\313\277\006\276$\205\035\364\325\277#\260\315\331\r.\377\277\000\275@\370\t\326\363?\242\205\302\341\200\232\310?cb\013\r\021\310\266?\314n\016\313.!\356?d\327\031e\203\315\265?\001\010\263\230E\374z\277q\255\312\224\310)\363?\037\3140\213`?\314\277\251\256\253w\254\355\303\2775\200\3507\017z\346\277 \326\254]U\022\312?\214\314e\021\240\214\321\277\2509\235\037:\350\304\277\3645nRD\245\347?T\003\355%\270\326\360?\241\347\\PHC\000\300\337\322T\253\365\007\250?\214\ts,\316m\356\277\213\224d\324[h\357\277\022UZ\031\307\375\350?EvI\324\017\224\326?\375y\311\353\260\314\366\277\022UZ\031\307\375\350?\313\364ZO\212H\322\277\377\243L\255\']\001\300\362E\177E\265}\222\277\025w\337\300\247\026\347\277.&\252N\207]\365?Y\272\227L~\234\276?\264\ry\024Z\351\346?\n\"\365\260\246\327\357?3\372Ji\010]\377\277S\003T\340o\300\376\277m\262\036nO\007\355?\213\370|\373\201l\370?\331u\255\223\030]\343?\211\342Ha\273\201\323\277wO\324c0-\373?\201\264!b\025E\331?z\271\27569C\342?\227\377\202~#\222\373\277\312\177L\367\027C\323\277\243u_\363\234\301\361?U\334z_\010\312\346?o\337a\340\341%\365\277!\342\375jo@\363\277_\225\344P\347\366\364\277}\340\347\001L/\335?\250\242Zj\222\277\372?,h=\316\314H\300?[]+\017@\363\341\277<>?H\275\232\340\277\007_J\307q\331\373?\266\354{w\333~\002\300\313\371\230\270\0042\321?\356$\216\221\004\230\354\277\350?^\000\357\200\372?J\002\037\t\261\254\371\277B\207\356\272\260\237\331\277\214\ts,\316m\356\277\rDzX\207\360\355\277;\3110\360J\225\341\277\356\344\300\305\272(\002\300\273\223\316\347\303\345\336?r>\215\35086\362\277@\235\321\n\314\224\333\277\346R\330!\265\347\250\277\365\342\344\241\262\270\346\277\271\036\300\217Q\340\337?\210\203\022!^\367\000\300w\304\2069\361\302\001\300>(\303\262Y\217\334\277\332j\357\310fW\371?\313\364ZO\212H\322\277\3730\322} \247\336?jS\363e\370\366\357?\277b\312\336\022\022\334\277\200:\325\240(V\333\277\234\247\014\257\302\261\316\277\372\266\036\002|\316\342\277Q}OW\261\271\351?:T\"\230\330\217\342\277 \326\254]U\022\312?d80\030\014-\271\277\205r\'(\030p\360\277)t\244K\363j\304\277\353E/\254\321\222\370\2776\275\216\230\205q\345?\224<\330\224\356\223\347\277Y\260\264\277\321\337\342?|?\302\277\367I\367\277\312\204\212`\222,\322?y|\027\326\302K\343\277\306 !\357\3002\326\277\t\255\177\236|\350\322?\302\tZ\022\222\037\362?\353\305b\211\255\207\357\277\273\223\316\347\303\345\336?\360\372K\342G\023\241\277\\\244\264\374b\247\274?\365*\260\207\222\237\375?\367\224\231Z\233\265\344?;\311\227\252\002\177\337\277\266\202\207l\314\356\345?;\221\310\370N\207\341?\027)\224y\220\023\345?\371~\266\n\200\300\342?lk\225\200,S\262\277\333\376\032K,\362\253?d\246+\314\336\355\375?\000\005\014\336\351\274\332?\034r\3341\314.\340?4oY\301zb\376\277\377c\346\233\225\327\364\277\035\016\304\n\246*\367\277S\216\336\315E\321\361?\024\202\235\213Y\034\361\277-H\336\253\274\200\300\277\247\316\n\232\274\265\303?s3\317\035\2070\350\277\231\020\022\365\267\251\343\277\220\245D\225\233u\352?\241\347\\PHC\000\300\276Q\324\255\306\020\366\277_d\366\267B\027\275\277\025\333\367\347\315\032\360?\203\341d\324\247c\361?\210m:\tI|\324\277\224\240\360\273\024\230\360?\223+I\036Z|\377\277\377c\346\233\225\327\364\277\217h\2364%~\353\277\360\031i\014\233\250\364\277\342\235T1\207}\362?\"\266M;EJ\312\277\362E\177E\265}\222\277\312\204\212`\222,\322?\224\004p\235\362\205\347?\337Z\335$.t\365\277\376.>U\265W\002\300\275}\353\227\250\360\334?#\260f\037VD\361?\256G\275/^g\002\300\001z\0326\\\302\331?z\366\312Qg$\337?\354\272=\004D\230\367\277\3563rK\375&\215\277\327\303\370\332/`\345\277A\027\036\314\270\203\331?XE\211\364\013\227\277?\227c\233\245I\226\344?Sgl\007\226\304\347?b\330\302\027\370\351\377\277z\366\312Qg$\337?\334\324\330\233om\340?\335\014A\223k{\340\277\215F\031\215De\355?_\003\340\004\272\267\271?\034w\201U\376\001\315?\233\302\306\255\240\246\341?\277\252.\n;\017\365?4o\362\006\303x\360?>\314A\353\021\031\002\300~U\366Y\2764\334?\224\274\244\267\022\237\360\277`\356>\255[\365\363?\030\010\227\334\021\251\000\300\001\031[\005\232b\000\300\313\371\377r\274\033\357?\252#\272\317\036\363\302\277s\227\347D\2554\361?\3308\0073\242e\344\277\212\\\374\334_Z\357?\234o=\375\016\272\340\277\342\271\010-\205\204\362\277\360\372K\342G\023\241\277\021\340K\301T\370\351?\315\336w\377nS\320\277}\340\347\001L/\335?\337\224\201\021\007\307\256\277\250\276\016f\220\306\372\277\310 \026\267\272\270\000\300\\\232\321o\266\352\340?\344h\273q\320\334\252\277\374\245\340\325\222\254\335?&\363D\346f7\374?\243\372\3209\363\237\307?\221A\305\263\275\207\363?\375\025\261\304\212\310\335\277\271}\232M\375\372\371\277J\277\221\214K\257\321?\033\375\315\331Y)\341?\264\320\322\263\343\361\347\277\035\342\023\333{4\316\277A\027\036\314\270\203\331?\246\242\376\347\340O\002\300\254\235mK\303\313\356\277H\3206s\354\272\324\277\246Y\374AJ\260\304?\"\300\311\r:\035\310?\322\357\276zfJ\351\2778\'\337%Fq\372?\274\010\335?6\353\335?\177\312\004\2620:\333?.\212)0eK\354?7\365\366\217\201\177\345\277VQ\211\267z\317\345?J\277\370F\003\231\357?\322\267V\203j<\351?~P\270\360CK\335\277I[\035\343s;\000\300Z%\303\027D\345\341?4o\362\006\303x\360?\316X+{\023,\354?\354\272=\004D\230\367\2775\344g\031\355g\375\277\200\336S\331\340\337\000\300\251C\031\362.\273\302?3\372\343\256Ps\361?\364\321\356pf\267\360?/\3777\210\327P\353?\373+\224\024\246\275\337\277\031\257\230\002O\032\372\277-M\203\317\356S\355\277\205r\'(\030p\360\277{f\233@_@\337\277\374\245\340\325\222\254\335?\214\321\n5\322_\356?h!\013\3203\005\373\2779\021\240Sy\014\000\300\326\311\3127\332|\234?:\270\241y\266}\371\277\332\333\3271\222\323\201?Av\370\211d\236\363\277\230\330\251\375\273\233\343?\313\225\200\221\336-\370?\220\245D\225\233u\352?\261\256M\014\003\331\351?^ \326\370t\361\365\277\025\333\367\347\315\032\360?\010\276\031M\027z\000\3000\267l\242\367i\364\277w\222\372%\336@\345\277\264\320\322\263\343\361\347\277\245\344\355\351\327\252\305?\343\022c\211\371\202\361?\004\324\007\3258\351\327\277\253\001\206r\351\317\367?\242\000Q\233*\274\362?{\256\377k\207=\370?u\201k\257I)\375\277?-\001\034\324x\333?\271\341\262t#\377\342?\033\231\265\2623%\370\277\031\030VM\247\361\317?\303~hj\004%\361?\005I\026-\253\356\326\277g_\371\225\275UQ?Dq\013k\225\252\327\277\t\250A5\002\377\323\277tpu~\375\'\347?\023\312hq9\003\350?\025\367\253\343\313!\360\277S*\306\246\037\315\350\277\307\335\372,\023\037\374\277\3563rK\375&\215\277"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content: "I_s\251\256B\335?\016\006*\235\335\255\315\277\255Q\2325\t\341\365\277Ve\224Bj\335\217?\2544\360\002(!\326\277k)\004F<2\342?\215\202@\376<\367\t@5\270u\343\260\372\354?\325\004\372\334\231\233\342\277\245b\356\210\237#\311\277\322d\376,F\221\251\277\372:\360\177\305\236\371\277\3548\263\332t\005\302?\346/;\303\020\267\335\277f\207-\3069\226\330?it%|\023m\345?\003\020%\207N\305\321?\356\014\321\\\016.\354\277)\210\236\232o^\350\277\021\264\335~\254N\363\277t\030B-t\344\303?|%\000g\237\331\336?\205E\321\370<X\263\277\215\326\035\027\227\314\021@\226a\322\377\023\177\363?$0g\325\324\375\371?\031.(-\311J\363\277\021\021\205\203:\263\341?\311\034\311\177AY\361\277\267\000E\nP\306\265\277\017\252\331\337\251\343\350\277\304\324\233fW\376\335?.\026\255uS\257\277?\215)s\252\351K\367\277\350\335\002\022\276\030\317\277\221\231\027AQl\323?}\361\020\310\270E\233?\273\340]\010\031m\326?\003\360Y\373i0\315\277\307\0207^?\001\252\277m\350rB\'\322\315\277\2725\270\347\020B\372\277\231\276\210\353\350\225\356\277\353DAG\272\246\324\277g%\226Rc{\262?\027\2520\336\244J\341\277:Q2\270\t\256\365?\265\236\270N\306\030\325\277,\035S|\304\235\351\277\232\230=pI<\333?!\230\360xgB\362\277\024 \322\347\273\333\312?1\022k\253\n_\351\277\024?,\013\267N\354\277\023]HO\'\035\251\277\362yQ\302\025\376\363?\357\244\006K\363\374\320\277\316\305\345\025q\036\021@\357\335\367Yq\253\311\277\n\234\243\213\276\222\343?\014%V$z\360\363?\307\205Q0)1\346\277{\343D=\263\252\322\277\r4\037n\303\\\372\277\343\317\254\\\235\371\363\277)\310j\221\370\030\350\277\230\343\257rf\177\360\277\007\326\237Fh[\343\277\207\342\362E\312\313\321\277s\250_\000\341R\304\277\315wEW\223\263\252\277^\3717\265G\003\343\277\025Nc\377\236\234\332?\243-\253\006\341\266\322?\260\276\3426\232\236\320\277Z\211`V\177\031\014@\373\230\327:\235L\325\277\025\331\330\005\036\343\324?\006\266\t\234\035\344\313?\361;n\314:Y\332?\217\273\246*.u\305\277;\007\265a\222Z\317?q\263\333\016$\240\350?\364c\363\024\316\320\325\277\327\230s\216<\240\365\277\242\323]\224n\233\346\277\\n/\035]\376\353\2778m_e&-\357?<S\251\251\370I\266?\221\212bIS\227\345?\257\342\202G\267S\341\277\362?\021p\234\311\000@\021\205\340\311\202\261y\277v\273\373\207\220\212\333?o--F\223\304\306?\346\'\325\252\004X\330?\017t\0102<\245\254\277\333\245\305\260p\035\325\277\311\304\327>\263C\362\277r\206\257y\304\333\367\277!,\251S\351\233\201?C\032t]@\245\371\277\003\030\213\237Z$\327\277\323\223A\345t\r\331?`\335+\025~\242\326?\307\020\310\342\305\307\307?\257\301I\204\275n\327?y#\353\020e\350\330\277v\261\204HD\177\347\277+\365\274I/Z\362?\035c\014S\230\306\362\277*w\334\201\247\020\332?.^`\325\264\361\355?\2572\002|\342\374\340\277Of\264v\373g\351?\233\230\333\271\001h\335?\206U\326\003\303%\354\277\203 #\271\027\224\353\277\033\324\345\262o~\"@\030\301\376\305\274\341\323\277\n\207O\\\211\307\255\277\234-\266\276-$\330?3\361\357\"\353\303\364\277\251J\346\307r\033\320\277\001\201\302\023\351C\347\277\245g\314\215\3042\364\277s9\354\215\374O\330\277\013\034\251\347dI\346?\nY\035O\215\324\262?\017\004hk$e\370\277\370\313;\364\3305\312?\346\376\232\010#\335\346?q\246\344\031\345\316\370\277\"@m7\370\224\272?\313\\\"F\224#\332\277Z\234a\030\024\rZ\277\244\266I\242\321\003\272?\324q\362h\202\032\363?\335\335\316^=\263\360\277R\036\302)\321\352\337?\242Y\212*\357\252\341?\3721\216MTQ\312\2773\314\256\374\331\272\320?\272\306\253\261\013\"\353\277@ta\t\224\375\216\277\001\0050]\257\307\271?$\215\003\"\026\365\322?\366\266\003\351\355\013\355\277\025j3\014\370\245\342\277(\005\233Y\304\345\243\277\321|Av\033<\320\277\002\326y#\221\336\351\277C\232\200\026=\017\244\277j:d\250\274\253\322\277e\362\020\374\347#\363\277\354\342\\\341\027B\344\277Y\000\213\3033\276\342?\346\014\025\244r\002\240\277g\317.\372\252\305\336\277\270\367\227\262\247\365\304\277\255\341\026<\341.\364\277\373X\332h\360\247\326\277x\344QA\032e\270?\304\360ks\260\007\346\2771\330!\376\224L\317\277\356\031$\326\337t\323\277\246\237\025\376\373d\333\277s\374\022\355\257\373\355\277\177\302\317\346Hn\344?l\276\377rN6\355?\367\342KL\226\374\347?\016U^cr\240\352\277-\337\240a\r\343\376?\326p\273g\312$\334\277\250\304\223\363\207e\370\277\252\227~\n\314\033\327?I\265*\2555\212\321?klfbQ\215\370\277\036\2435z\321F\321?\362`\266O\242\025\246\277\230\204\207U\'8\340\277\330;\370\336:\027\367?\003\220\302\372\367H\360\277R\353G\000\374&\300\277\201r\201\215A\257\343?\261\274\344\374\026\330\354\277\351\343\312\357\250\200\300?\020$\243=\372\266\337?\321%\250C\230:\305?rV\177\037y2\032@*\t\356\356\264\316\254\277w2\232+.\345\357?\\\331>\250\227g\346\277Y`\214Z\335k\343?\356\014\321\\\016.\354\277\032w,-v\242\272\277\366\007&6\310\"\357?\\Us\256\377B\344?\225\345\336\022\264\t\311\277\010\200J\371(\350\354\2771\267\316\233\007H\323?T\351\030\320\301L\372?\177\005\2173\016\217\331?\231Usk7\256\340?\210Za\256@9\320??\027\267h\2777\302\277\214\254ni2\331\222?\333\343M\316\326\234\316?\253\271Z\346tn\343?Xo\250\343:\252\315?\004\317\377E\260V\271\277\272\r[\217\351\r\241?=\021\031\264!\200\350\277F(\321+\240<\320\277\327\337\233HCi\313\277\032\257\373J\215\372\340\277\221X\030#\212z\264\277\005\013\232\334\320\261\355\277\322\245\255\237>\361\307?\027K\007j\3109\331\277\346<\211\266J\357\365\277\341\337\335\202\302E\340?v\306\330\240\375[\326?9\365w*\261\300\260\2770\377\007\376\3106\260?\203|S\372\202f\347?i\355\tQ\017\243\316?(b\272[\257\347\361\277\352\211{\205\272\350\026@\025\254\023\255\235\001\321\277\3104[8\333\365\363\277\227V\215\376\251z\324\277\007j{\256R4\364\277_\363\377\345\353d\356\277\244\362\337\335\373\244\360\277\t*P\342\322|\000@\310\026qO\260\354\346?\017\202H3\254\256\320\277\367\234\250\220\333\'\312\277y\300\374U43\371\277,\350\224y\314\236\343\277E\333E\371\316I\315?C\034\177R\313\362\301?\366\266\213\302\014]\344\277+\245=\025\004\261\362?\241\344\202\017\234\r\352?gO\247\206\207l\370\277\261k\356\004\311\234\372\277\202\221\027D\255y\311\277\310~\246w$\277\266\277^;#\016:\314\326\277KVX7T\340\341?\340=\007\003\300\251\326?-\337\240a\r\343\376?\356\324\207\354\326\373\364?\3657l\233\330\223\306?\311u1\204\362\000\343\277\n\272\3179\017R\333?\240\025\334~\314\"\327\277\304\033\024W\004\272\001@9\361\2628\335\242\350\277\314\226k\363\t6\344?a\356\214#\034l\316?\n\305?\344\347\341\322?3\366\217\346d\350\333?Wf\345\033\371\376\261?F\360k\371@1\355\277\275{\355\335\231\013\315?\\Us\256\377B\344?|\341an\272\363\342\277,=\210\034\345\220\352\277\244MF\214C\303\350\277\357]\301\"\247\n\310\277:\333\037\201wF\364\277\274\225\256\306m\202\365\277N\342O\271B&\364?\367\345>\242\322b\335?\3524\366\361\024\353\370?\205\357\\\333R=\333?\3547P\20404\353\277C\3533\036\304?\352\277\356\3145A\251]\353\277\003.|\336\r\020\362?\252\227\261\330\220z\232\277p\246\263>\301\344\371\277d\020\373\344\022-\320\277\356&\223\261\257\303\225?1\272\035v\326#\360?\301f\367\014.\276\304?\335\264\326\201\201\356\351?2n\233\354u1\345?\303\341\227\341-\336\354?X\373\377\030\266\252\336\277\263\311\325\277\240J\326\277\001\230\233\263MH\337\277C(\334\343\354\251\325\277\016|\237\306\301\211\341?\374B\304Bp\337\366\277\034\200#\364\r\310\345?\252\037\020\242U\256\330\277\270\321\'\300No\317?\022\324\245\2608\000\361\277\215\204,(2\214\320?\027\264\241@\274}\316?a\356\214#\034l\316?\356\327C5:\031\345\277\007\t\247\243\367\t\243\277!-\030\373\005\"\335?\023\2273L\313\216\323\277\240\n\256)\006\231\367\277\234-\266\276-$\330?}X\257\325\376\225\362\277Z\373%<\215\'\330\277\037vJ\376y\350\323\277\025,\031\tD\270\323\2775&\337\000\007\255\371\277\236s\332\345GK\362?\306ZJ/\350\331\357\277\321\\\326t?P\361?\347\315\324*^\206\306?\0220\210\373o\004\023@\na5\223\211F\340?\t^\231\362\352\225\257?z\335\233\320\310\205\343?\376\374\366\031Q\037\345?\035\032\033i,f\357?\227z&\206t\007\307\277~\200\030y\231(\211\277\3766V7`\014\312?n\301\347\347\271\035\244?>\255\307@\2121\245\277a\316\270\215%\375\343\277\247G\310\310\307)\362\277%\013\357\241\352\253\360?\341c\251|Zj\342\277\205\327\340\"?\313\340?|x@j\305\256\335\277_*V=%\021\343?\361\303\377c\304\353\333\277\340K\207\313\257>\006@\307_\003[1\364\313\277\305a/#\"\003\305\277!\270 \223\360&\324?\223\227\3660\255\312\337?\034A\371i\026+\321\277B\250\245\254\"\t\324\277\321l\272\215\005)\360?G\327s\367r\036\341?\337\032\201\205\025\301\331\277\227\013\2028l\032\334\277\311\247d\031\253\314\367?3\333\317\337\322\222\243\2775j\"AP\r\260?Vn\207\342\010\337\376?\306\260c\351\266\365\341\277\314]\256\005\325[\025@\354\272 \222|\"\302?Ot\210\327\306\026\210?\24343\037\353\240\350?\254\310\367\374v\243\217\277\017 d\315\tJ\340\277\371\022)r\014q\343?\357&L\246B0\362\277\324\322G#T\322\274\277\243\315\207{Z\321\357\277H\237\003\r\307\245\330?\025\264\030\273\177\334\357\277\222\336\357\275\312<\366\277\371KAP\177\354\314?\2065\262\335\220N\364?\246eD\030\275\234\252?C\034Nw\247\010\303?\267\277\304e\226X\267\277<\271i\310\245p\361?\213P5\351\2537\315\277?\220\234\224X7\363\277\303\023\227\354\351U\274\277(*\213\212\013\325\334\277\303\305dro\260\357\277S\000\2413\315\230\355?\262\247\\F]\034\317?\245\034y+\034\013\205?\177EU\370\341\352\362\277\337#\254\252\255\305\343\277\235\276\340\225\001M\316?s\246L\002\342\001\335?K\031l\222eb\014@}G\253g$B\354?\255\216=u\232<\342?7i\230\033\027o\330\277Vd,\325\367\\\351\277\031J\235a\255.\313?\275\025\251j\307\313\362\277|\270=<rS\334\277\216D\234\304\031)\325?M\217\003\302\305C\373?p\344\241\354\350\366\330\277s\014\225O.\000\357\277\362;y\204\207\306\337?^\025\307\030\254V\372\277\013\253\202\325\215)\342\277\246c\336\311@.\314\277\2732\037\3413\312\t@\036\243\t%Ek\361\277\236\276r{O\273\343\277\003\303\227\374A2\320\277\237\002\231MS\362\326?-L\223\273@\003\371\277@\227\274\304e\356\304\277\311;\215\234\345\000\274\277f \251\234\035\r\361?y\333\303\271\034<\331?\262\'\351\317\004\324\341\277\347\002l^a\270\353\277s\366\'\273\237 \364\277\031\324\021\310/x\354\277[\363\312\333\3155\330?\353\310a2h:\240?\020*L\252\344\333\356\2776!\227\347\245?\322?\340\320\322\343f\323\361?\320\317\025\267\312\037\343\277\347\232\234\306\256x\361?\222N\325m:\303\365\277\010\007+=\332\252\346?\210\2156\260\212\"\360?\\\236\027\373\037\340\354\277\355\270\364\311\213\023\311?\210\303\010)p\344\234?\350\234\177\225\247/\361\277\303\001\234\246*\347\356?%\362\337c\214\316\367\277\207\244\255\231\247R\372\277\203\374XV)\035\352?\037\030\366\324\r\371\364\277\201\342\267y\n\356\367\277\r$l0!n\372\277\224\001\245\023\336\365\322\277z\274\201\247S\365\344?\311\001\2066\221\014\344?\234c5\310;\225\304\277mRB\027\030\362\352\277W\343\353H\237k\370\277\311\376f\340HQ\336?\237\215\342\376E]\361\277*G*\005\240\'\367\277\363\330rV\002\035\326\277y\223\337Hq\274\245?%@\262*z\271\325\277b\377C\204\227L\347?\257\024\177\317\226\326\320\277\3742\"\177\274\014\340?T\246H\t\016\020\334\277~\263\365\"\021\346\364?I\322\254\271\204\263\330\277\272M\356\253\004\271\342?\260\366\001U\000\017\367\277S\241R\203\243$\361\277\253\242.w\017H\352\277\320\365Kn\356\356\342?\032\037\341\372\374\200\340\277\250\200\267\324\212\276\273\277\n\312\017\327g\240\361\277Z\234\257{OW\006@\255\221\310\342\331o\363\277j\262\301\226D\375\367?\202F\301\003\270\017\340\277\3776a\357\254y\317?,\304\312\026\336\'\342?\036\34094\240\326\366\277\305\266zpS\254\353?\340\340\266\374,\254\360?\025N\224\332\302\206\331?\006\334y\216vj\301\277\r\006\037\345\220@\310\277\355(q:a\235\354?\217h\377\276,H\243\277\024f\236I*\"\342?\311;\215\234\345\000\274\277\233=\014\314\037M\371\277\032\211S\364\275a\316?\037#F\216\304j\331?`\033K\236\311\236\364?\374\353\334Vp\032\347\277$\204u\232\030\314\303\277\274l\266\351\261\275\356?2\016\232U\314\203\344?\237\302\233{\246M\330?\350\304F\243`]\327\277P\241\267\371,\256\230?\232\240g\365\344C\334\277\346,\007T\314\352\364\277\202@\'~\024\235\355\277\256\327\341\301\272\331\352\277\226\221\353\270\372J\363?\\\321\377^\200\325\261?(\033\240\237\032v\034@&Jd6\206\242\363\277\241\230\305Ih\215\322?\366\241\r\030\202\276\344\277\337=\374Js<\321?\\n/\035]\376\353\2775\234Bt\362\314\357\277\205E\343\003\266\232\320?\211\232i8:K\324?\307\332D\323A#\355\277;\306e\230\374\326\317?\261\243(\216\271\034\345?\355\246Q\002\351\346\364\277\314\354\312\241\370L\370?\006\245\331h\243\004\323?\362\321\217\020\003\207\320?\242W\2018\037w\330?\251\327{\334x\300\325?5\333\345Olm\256\277k\0362\345\033\316\354?~\035\231\242u*\342?\223\227\3660\255\312\337?\273\340]\010\031m\326?\206\334I\331\337\246\342?\320\363\026\'\222\337\371\277\241\370]\241w>\347\277j\232\226\032\212C\322\277\323\n\020\270\030\002\305\277j\255\332\367 \304\351\277\377\272\337k\322z\361\2777\006\320\203\2756\362\2775\303\203\327A\266\346?\177Ko\014\205t\234\277\004a,i\236\314\317?\206\026\264\256;\001\315?\\\3160\264\006\254\354\277\256g\374\021KS\353\277\317nw9\'c\366\277c\353\262a\253p\244?\035h\200\301\205\017\372\277p\242\266\223\366-\345\277\303\341\227\341-\336\354?\265\251\017i\350\366l?\276\241h\210?\377\307\277(6\307\363FD\260\277\356\303]\353\021{\342?\322\371\366\240UM\356\277m\376\216*II\301\277\264\021\315\347\342\\\356\277\223\276M\257\025\010\362\277\345\'7aL,\326?\235C\354E\343\272\355\277\314\t>\307\000\304\362\277D\313q\256\331<\360?.\026\255uS\257\277?\216\0042\204\330B\323?\311\244\242\236\222P\361\277EI\031\326\340\323\266\277m\307\037\340\231\315\321?\004\205\264\006g\215\366\277XSd\212z\260\364\277\354\2314\352\322\230\333\277\316\3519\002\004\273\360\277\177\215 \313\227!\333\277^]6\367\273g\370\277\233\377$\247Jc\310?-\377ba\3445\326\277\230\267\032U\224`\020@9\0238\026\213\216\334\277\314\213]\377xz\352?\264\340h\300e\332\333?\365\320\034|\3329\365\277\341\247\243\371\321\305\365\277\001\"\221A\030\251\300?PT\253\311\026\"\360\277ZC\342\'\374\253\363\277\316\013M\353\205V\342?6\327x[\346K\036@ \345\202\211\013\344\342?\343\312-\246v\363\371??\261\336B\n\303\251\277/\235~\373A\321\345\277\033/\324\372\t\014\314\277\0210?P\230\002\242?\336\310\213\360\205\242\355\2772\322b!\021M\345\277\370\034\256\354\201\336\314\277\003\320\366\331}6\324?\347M\317\316\267\317\303?Y\304\2539\221>\303?Y\0313\'\325\200\253?\265\353\024\376\256\301\327?\205\340\032/\036\202\347\277F\3206Y >\354\277\271\"\334\362v\364\346?\203e\245s\240\235\372?P\336\376\222Y\375\266\277>\237\252\266\220\236\261\277@\261z\177\335\366\314?b\264\313O\305\252\353?I\257Nbla\364\277_\257\313\330\276\313\305?h\311I\372OI\353?\362`\266O\242\025\246\277\257\214\274\\\351Y\320?y\333\303\271\034<\331?(`\334\022N?\321\277\216\356\025\234\266\313\337?i\237\005\000h\032\235\277\372\rs\256\014\"\364\277\263\036\311b\271<\335\277\217\352.\326\336\025\300?\235\255\273\032\324\332\332?\345-~\027\357|\347\277\014v\366Y\327d\302?L\033\0078\013\227\307?}\313E\206\230|\357\277\320\204\n\361\214\277\352\277\366\021\363\307\361D\344\277]\210t\005\326\007\324?\257\210\324\312\032\264\356?\274{\342%M\236\307?\220\037\321\301.\265\352\277\002\262\340\233\306Q\347?\314)B\214\375\314\364\277\035\270\377\365\260\270\371\277F\322*\242\007\021\365\277\303\341\227\341-\336\354?\212\357Fk\271b\320?[D\274M\204b\313?\032\177\023m\312\030\340\277\032w\216\343\275v\270\277\000d\360\272u\355\276\2771\2670RO\034\321?\030.\301\360\351g\326?{\201k\217]\263\347\277\033\266\264>\273\316\325\277L\033\0078\013\227\307?\022\262\350\232\020w\246?\263\2255\177\025]\273\277\214\371\367:\273\253\371\277\365\226;\267aZ\357\277UV\013*\365l\364\277f\342\216\231i\037\362\277b<%ZT\031\267?\350\232k\353\212\216\362?\026\031\341\217\027\365\330?\307\321\235X\316*\343?p\247*\002\344v\354\277\373\231w\320o\305\267?\301\234W|\267\332\345?\257~\273\022\0348\341?\215$\377;\374\002\360\277\226Q\267\002\371n\250\277\007\335\232\217\2505\360\277\224a\246\252\207\243\323\277\201\221\333\260<\"\305\277\313\035\305\t\272\367\275?D\227\024o~\245\344?W\177\217\177\335w\314\277\235\355%[\025\301\334?d\020\373\344\022-\320\277\303ec\333\305\002\357\2774]\331\323\255\343\306?Ks \343B~\273\277V\217oi\251\013\344\277\005-\033U^\005\264?\320\361\374J\300\337\324\277\273L\200\235sz\306\277u6%\215L\305\362\277\334\032\214=b.\337\277\234x\225/\337\250\360\277\367\3562\272\221\036\362?\372z$_K\214\335?\255^/t\000\336\347?u\004\202/\247\324\263\277\253\375\200\270x\245\306?Pk\273vTo\355?\033\203G%n\030\332?\2627z\031\312\212\317\277\020g\357\351u7\373?\346\032\323\375x\031\363?\373\232<,RC\032@\340\275\001\247\031\363\323?\371\221\r\262\3552\344?\033E\277\007\010\231\300\277\021F\177\031\243\t\354?K\364\353\367\222*\332?\243W\214\360k\344\335?\032\237\0272\307!\342\277\227T\252/\261\303\344\277\306\242\373b\n\361\365?]\277\343O\205\203\303\277\3040\230\'\360Z\224\277\013\034\251\347dI\346?j\267@Mk\003\362\277EI{\214(\250\264\277!k\304\343\007~\321\277>b;\001\374\226\352?\263q\347\360\205\336\223\277\325\010\367\207dR\367\277\376\272}\265\212\246\363\277\367].v\250\"\370\277UfK7ak\335\277vF\336\374\243\022\331?\350B\313\346U1\350\277F\0328\312\317M\365\277V\2008u\301\275\305\277\212\307\231\374\223T\374?\371\266\3700\241\236\347\277w-[\307^\313\336\277\020\233\017ZV\327\315\277K\005\021s\300\234\315?>F\010\222=i\355\277?\335\3016h\227\340?\017dd|6\004\332?\2107\346\350\342\275\330\277\360\254\244\254\342D\360?\367\014\200\005\"L\304?\322\371\366\240UM\356\277\267\215\3665\376\312\346?e\264-\006\r\177\351?\322#\222\226\300\177\367\277Ga\364\301_%\357?r1\350+8\305\320?=\006\013\300\220\304\356\277c\342\231Q\266\214\367\277O\034|\370r\017\333\277\020r_\224N\307\362?\234:3\263T>\251\277!\000\265X\315\024\327\277\362\3335(\270b\364\277\213\231-\261\352F\336?\324\322G#T\322\274\277t\230<\321\315-\301?.d\032\274\2152\366\277\235\223kz\016d\355\277\006\345\341\362\234\026\327?\372\365\257\032O\233\362\277\307j\220\376\365\206\354\277i\237\005\000h\032\235\277\301T\320E\346\376\260\277\266;]%\001\"\362\277\236\332\245\352\r\351\340?\372\266\355xT1\342\277g%\226Rc{\262?Y\344WTu\220\345\277\007\245\344 \360q\330?)/\345Ye\376\341?\016<\242\364\024\345\342?2\323M\316\242\371\014?\360\254\244\254\342D\360?\013\2305\230\345\333\263?\277\311#^\212\344\267?9\354z]`\261\345\277\313\\\"F\224#\332\277\330\270l\233\354;\362\277X\236\261\025\336\306\327?\013G\303\237<3\241?~\305\206\251\024}\325?MC\206z\345$\243?9\346\313\276\300-\360\277W\310\207G\034\207\335?Xo\250\343:\252\315?\320\265N\234AJ\344?\213\324u]\304\004\257?\202\272{\017\334\244\262?\354\037\000!\251\235\360?Q\324;\3278\245\311\277\177w\365\373.\370\352?\205{tNc\241\340\277\366p\033\3450\214\364\277\247A\001Bz\213\270\277\202\342\010\266c\246\334\277a\335\230\203\022\344\331?6\376\033\"H\304\332\277\331\305\224kO\367\340?Cu8\223\325R\330?\276\365\244\245\312\302\360\277p\316ke3`\343?\310\303j\337\267\270\232?`*a\365q~\350?$\302\314\334Za\336?\203\220\010i\207\032\353\277,\257a\025<\352\362\277]\310q\327\202\254\322?3\027G\222\341*\362?c\342\231Q\266\214\367\277\351\202\374,\201\357\010@\362\221\342\351$t\262\277#\317\3712U+\354?\204\037\254\365\364\001\371\277\010:\277%\034.\323?v=E\275Y|\304\277\2364(g\2363\343?\022\342u\037\3427\361?.d\032\274\2152\366\277\014U\361\364\335^\347\277\331\343\304H\232\373\357\277\305\201\213\2227\303\346?\265\374\327\302\224_\315?\001D\252\\O\243\270?\177w\365\373.\370\352??\025B\264x\022\335?x\004\230\237@\257\276\277sd\221\330\365\322\320\277x\036\033\036\345)\372?QQ`\036B\213\332\277\242\350\253\017\363\237\316?\204/Z\255\377\341\331?Z\025\224K6\236\257?\003\320X\220\305\n\322?\352\002a\246\024K\346\277SYE[\333\347\360\277H\207\343HYY\370\277u;\305P\306\351\331?\227CU\205}\267\331?g\0073\"\340L\333?x\033\266\323|s\322?\"~\327\345z\024\352\2775\022\366\035\204\337\003@\202\272{\017\334\244\262?h%\241\n\260\350\267?\2578I2\205M\302\277d\272\002\010\324\260\236\277\003\230\307\010\332#\377?\313\\p\344}\275\273?)\211H<q\364\310?\0211x\316H\240\372\277\024\273`\021\037*\352?\306\260c\351\266\365\341\277x\217\014\016\366a\201\277%_\247\024Qc\351?6\212sW\303\304\273\277\2063\024\252\317\207\027@\350\354\234\023\213\004\363\277W+\2504\016\360\343?G\233\332\014p\023\344\277\213c\035\267\ti\327?\202\342\010\266c\246\334\277Z\234a\030\024\rZ\277\234e\304\362\221\310\342?\367\301\006%2Z\341\277\232i\370\2525\310\314?\000\255\nw\2214\342?\'0\\\035\210\220\364?P/\334\354\261\357\315?\376X\373\0050\026\361?\270\213u\035M\350\324?m&\223f\232\340~\277\361n\014\301\253\371\324\277\3356\366\215\375/\253\277\236\276r{O\273\343\277p\275U\321L\240\314\277\242)\373\330\210#\316?\240\010\272\340\036\306\356\277\212*}\377w\234\346\277\350\243>\273\212b\354?@\006\000\010DW\351\277,=\210\034\345\220\352\277\256\201A\372\303\\\323?\214\234\306\317n\266v\277\351\030\264,\246\253\217?\266\353\037\266\373.\335?\017jI|\221\200\355\277}\005c\336\201\263\371\277\215\204,(2\214\320?\'YN\035\017}\344?\360\033>\262\261t\370\277-3\003\242o#\301?\217\352.\326\336\025\300?\006\266\t\234\035\344\313?\331\250\3528n7\361\277\311\376f\340HQ\336?)\323\251`\255\276\340\277Yid\260tN\354\277\300?@v\236\232\231\277\251\227sR\177\256\321?\031\260\331J\217o\300\277\017\377\363\3746\034\361\277\275\243B\242\246b\361?\265\242~\354\267\206\304\277c8\214\221\020b\350\277N\t\327\020\262\n\335?\276!=\t\302\313\313\277\016#\213\201F\217\264\2771\377\022\266\025\244\265?\023\307\345\310\322w\366?\225\020IvZ\205\344?\262\275\207\025\306E\357?\352\336\226C&\324\344?U\032\300\370n%\314?\n\355m.\200\362\325\277[*\376\222\014Z\303\277\3712-7\tz\345?sR\331\327}\365\316\277\321D\r\037\340\032\354\277Xo\250\343:\252\315?H2A\342\231\037\326\277\3756K\177\023\237\304?\343\221\355\241q\341\267\277\352\357\204\261z\375\362?*.Fp\260\325\306\277r\332\314%O\\\276\277\023\216\245\304\315e\264\277y\033\301\213\311\340\327?\362r\335\026\352\324\311\277q\363\330\340\320D\347?\234\036\177\312E\326\351\277\206U\326\003\303%\354\277\266\321\021P\265\224\304?\377\000PI\256K\341\277\025\n\277)\205\336\347?\240(\357\200?\271\357\277#\372\0004\226\202\342?`\r\353~\005\200\001@[\303\334\313U\365\360\277\032w,-v\242\272\277s(Z\244:\234\301\277\314\374L\004wQ\371?\210t\305\273\344p\371\277:\310\000\334f\037\253\277\350|\262\335\203o\324?p\027\020\262S\375\353\277A\3021\340X\327\345?\237\002\231MS\362\326?Y\240\211,\212\020\342?Lg\222v\375\334\330\277\200\262~_\356S\342?\272\314If\251\331\304\2778j\007\326\305\375\273?\247G\310\310\307)\362\277\216\214\303\033b\325\324\277\252\316\0360\237\201\305\277\"~\327\345z\024\352\277\307\334\'\242:\332\334\277\037\364m7E8\316?\225$\010;\010f\214\277\034\326\351\336\333\301\326\277\3719\032\2117-\271\277\246\202\223\361\254;\324?\254k_M\327\234\265\277\233\345\276\226\353\021\340?\366mu\326@\366\270?=\213j\353\220\244\326?\211\007\017\205\016\370\360\2771\377\022\266\025\244\265?\004+\236\241\315\272\357\277\357\230\207\305\364\r\353?x\201vG\252 \355\277yK\005\356\0368\360\277\223P\357I\014\303\352?!\300\267\206 p\330\277r1\350+8\305\320?Rj\356\013\324?\332?\304\213\005U`\303\312\277\255\316:GG\341\340?81(1k\366\357\277e?6\236\367\203\340?\310\204\332l\006\237\363\277o\356\026\n \265\244\277!(m\177?\220\360\277gE\256/\276\276\320\277\252\250r\252\325\243\313?c\362G\t\301l\330?X\341\375\301YG\363?\273j\257\237\370\213F?\231\036\212\202\222C\357\277\266\321\021P\265\224\304?1\262i\024a\261\350\277L\264[\224z\307\336?\360g\"\362Y;\341\277\315\272\230\270]\321\312?f\307*\230\346:\327?X#\351\032L\020\367\277Gl\002\266\360\340\350?K\340\355\030\362\266\033@\205\257_\t\246\230\334?\255N\242Y5l\341?\001 J\271\034\004\364\277\330\256\325j~\022\353\277\n\305?\344\347\341\322?\371:\034\325Qz\331?V\340\221\266\203\"\346?\000\262}9a-\302\277-UXP\027u\275?\010\200J\371(\350\354\277\235m\276H\'6\334?H\275\227N\224\021\345?\017d\225WZ\356\330?&M\236gl\035\360\277p\242\266\223\366-\345\277\217\273\246*.u\305\277A\333\355N\266\222\355\277\350o\"%$\201\321\277\022\372\211\357\370v\347\277(b\272[\257\347\361\277g%\226Rc{\262?pW\253\315\270\315\354\277\323\303\362\265^\246\364\277{\200\364\313:!\365\277A [`V;\334?j\267@Mk\003\362\277\303\373H\214\035\331\340\277\343\337\301P\207\274\361\277T\t\301\240\0300\322?\352Q\225l\251=\323?\314\312\031o\276\205\344\277\220\031\022\345\252\265\320?w\006\341*\367m\332?]\350IG\363\331\364\277\245\034y+\034\013\205?1\2670RO\034\321?\t\213\214\201\340\325\253\277b<\270\353\277\327\263?\276\234+\207\311_c?\326\316\331/{\033\355\277\363b\305\237#\035\314?\363\235R2\335\275\352?\273<\373\267\030\201\305?\310\352N\017\337x\345\277pb\271\301I\211\346\277f7\202<\202\021\371\277#z\006\220<9\345?8\370g\375\0202\346?\365C\372\007\0365\331\277w}MGS\216\310\277jX\347T\010\322\342\277\305\037p\037\274\025\361\277\235\324\374}#\304\301?\276H~l\021\265\322\277\200E\227\275\007\241\335?_\356v\263\202\221\303?\317\037\002Z\212\n\346\277\\s\257Z\344L\232?\202\360\230b\242A\321?/\241\354\356\032\210\265\277\332\3233\377\324D\322?\263\2255\177\025]\273\277\273\326\241\013q\220\335?}\026QL\326\334\347\277\013\274\247P\273\233\345?\313\\\"F\224#\332\277\334\211af\216\005\311\2778\207A\3539\022\342\277\270\363\2409\222\235\326\277\302\357\377g\332\342\370\277A-\002\367\321\021\002@a\356\214#\034l\316?\276\210{>\276Y\321\277Z9\323\320\254\323\343\277[\273(j\340\202\331\277\235\263\321\365RA\355\277\254I\346\323\223n\336\277\237\215\342\376E]\361\277\337\206\3037\216a\263?L\n\023\230\001\017\323?\361)p\327\242\200\366?1\241\262\263\345\320\337?\204\301i\r(\250\315?=gF</q{?\2137\3330\226P\323\277\370#Ss\321\361\365?1?*\322\325\341\366?\277-%#\333=\375?\343\021\301)\313\306\r@E\301\207>WA\305\277\007G\273\240\362\r\342?\3264uL\310;\340\277ge\343\317\336\261\321\277\"?},}\335\355?!\352\211\211d\353\346?\342\204\343\353q\237\343?\375B\344\243\245\255\334\277\020\272\271\311uw\320?\364[0\314\021\254\361\277,\375\212J8\354\353\277\2379\010\230\002n\306\277\230\003\366\374\210>\335?k^\376\333\244\210\354?\274\025\211y\245\255\337?k\202\310>\223\377\355\277\022\371z\024\323\027\331?\261NUL\326\370\363\277P\241\267\371,\256\230?\025\371C\007\372\316\363\277\034\301*\033I\275\363?:\311!\214\337m\320\277\240\002\244\005\240_\334?\025\307xZ>6\363?\240\365D(d[\330\277\\\271\333\305\255\271\t@c<0\022\241\206\274?\351\343\312\357\250\200\300?\254\237\377\215b\212\320\277\304*\265 &\032\320?\360\223u\rO\231\341?\370\262\'\333b\303\342?\325\004\372\334\231\233\342\277\327h/,\347H\335?\271\227\352\265\003\340f\277\3512o\247\256\251\340\277\307\007\315\3543]\325\277\030.\301\360\351g\326?2\377\035nb\021\273?g\030W\361\357n\347\277j\272\313\272\2526\323\277\026\033\364\215\026F\300\277\265\375\027y\336\250\352?\367\026\372\307JL\350\277\361\231U\207\022\007\366?L\260\272mB\206\341\277\037\243@2\036\264\326?\312\035\272Qm\212\270?4\014\267\206\323\314\324?q\376\346\324a\000\341?yN_\200:\201\322\277 8\0337Jp\321?\276\352\315\276\022P\334?\317\r?k\237l\310?\2656\2152\201c\323?j\335$\214+z\350\277\330\216e\343\n\030\315?\276\241h\210?\377\307\277\270\213u\035M\350\324?\335=\320\365\346`\361\277\025,\031\tD\270\323\277\371\025\203\004(\272\365\277n\214\276\325\032\370\233\277Y\000\213\3033\276\342?F`Q\251\260\267\354\277\376l\266\246\351(\353?j\017\277]\303(\332\277\274\254\202\340:x\356?\334~D\213\266\227\342\277\0274\023_\331%\355\277~Ol\204\241;\270?\374K\336\355\031\310\347\277\341\316\317#L\376\316?a\376\240k\350\336\344\277\267\022l\321\227\205\311?\307\'\002\215TP\326\277p\021\372\326\324\226\331?\357\006\215\000\304\300\261?K\217J\235oX\362\277pQd\027\026}\333?\247\202b\026\211Q\325?\240\210R\3160;\356\277\320F\360\355\330\321\333\277\\2\240>\211\020\275\277\311\277\217p\250~\232?Qi`\201z\t\325?\204:\3732\374[\320?_y2Y\241L\340\277:\227\3224\377\310\317\277\316\224\037\345v\202\350\277\351|\037L\030\261\327?\\\3160\264\006\254\354\2774\003\213\265\035x\303\277\245b\356\210\237#\311\277\177l\330 W\212\304?G\320\311\352\213\374\350\277v\306\241\223$\023\361\277^\020\021U\254\007\333\277C5;\301(\256\331?\365]?\360\226>\341?\226\177\274\350>\210\340\277HFJ\314\274E\302?\227\371\244\340\023\260\342\277X\025~\333\234\303\244?\350D\256\265N\350\327\277*j}\244k\014\326\277\262\336\300\330\277*\331\277\235C\354E\343\272\355\277[\304\220\316\006/\317?\346\236A\307`x\306\277c<0\022\241\206\274?\035\351\361(\002\353\351\277\0373\271h\246!\255\277[\372!\031\2645\357?\013\034\251\347dI\346?F\301\222\366\243\256\312\277e\2524\257C\321\361\277]uws\374K\346?\364\006RB\365\312\355\277\246=1\230Y\000\353\277\245}9\"S\022\357\277\242W\2018\037w\330?\325`\310g\275\231\340?\345\'7aL,\326?\331\233\302h\013|\322\277^\0359%\017\303\371\277\324\241\314e\261\017\016@I\025\303\004E;\346\277ie\017%k\215\361?.\264&\300\202\353\336\277\355w\245\000\366\217\311?{o\234r.\253\263\277\025E\325w\241s\313\277/\263\023\266bG\311?\273\325\261\312\317\205\332?\214\346\364v,\221\305\277\355\2741\307\255\266\366?Cj\363\221kN\371\277\\Us\256\377B\344?\322\225/l\2721\356?+\tx\352\350l\354?de\356\207+\037\327\277F\312\357\242}\355\332?F@\034\t\220\304\353\277,\010\373\364\020|\343\277?\375\324\342\253R\337\277t\274\033\335\244\005\363?\201\027\032\210\\\307\343?\220\301\364N\220\304\361\277[\023+%]\264\361\277%m\323\007\215\020\361\277\t1byB\357\302\277\356\335\354\241$>\304\277\326\337\220\220\366\373\305\277\306W\373\344\005N\360\277\2216\237\251FL\335\277\322\371\366\240UM\356\277\006\334y\216vj\301\277z\000\372\'\341\327\367\277k\260\366\363\020\234\270\277\235\340(4!\221\326\277\323\363E\326v\236\260?\233z\257\013\261\250\345?g_\0361\271\003\364\277A\267#\354\307\033\354?\r\200p\034\000e\346\277\261\326Z\300\263\313\323?un\001\217\357\265\326\277R\225.F-\013\316\277\337\032\201\205\025\301\331\277\035\3205\272\244/\342?\213\257I\231\014\276\321?\254}\206\024\037\\\311?\374\366\352J\001\326\340\277T\217\002\373\024\312\340\277\377\020\254\210U\323\350\277p\362\351D\233\017\211?\'?\230\227\007\355\341?R~\356i\351#\371\277y\203\027\\\274\276\023@Ls\357\007\037\224\274\277[\233\302\356\233\245\331\277v\301\340\207\353\006\357\277\231\334\237}\305\340\225\277\377\240\306\330\345L\351\277\017\252\331\337\251\343\350\277\363\254&\304_\347\343\277\377\000PI\256K\341\277\235\254\271\316\271\215\272\277\214\213\251\210\357\010\341?\252\016\353&(<\305\277\2250\340\314\302L\343?\027\2520\336\244J\341\277hT+\303E\201\301\277\200\347m=\n=\347?\325\311\322/\"\024\351\277\217v\302\236\312m\325\277\265\"\204H^=\307\277\221\271\344\370t,\360\277\026d\212\237\r\201\323?\370\313\333JvY\253\277\374\267>\377\316\320o?\004R\324L\3206\341?\306\222H%h\002\366?\'\257\n\027A\203\372\277j\027s\2778\233\361\277\272B\340\267s\375\350?\177|[\371\314\213\246?\326\317ma\343\326\302?\213.M\251\230\'\264\277d\251OA\202]\307\2779\375\3077\276p\225?L12\007t\300\347?\302\220\013\277\031\265\n@`-\260\317@Z\365\277q\202\262\316\371$\343\277\034W\361\206\234\305\271?\230\024\242\245\267\261\340\277H\217UU\274\305\367\277\346\t\251\374\263\230\340?\215\204,(2\214\320?\312\334\034\352\355l\327\277(\322=U\327\231\363\277\030F\352\"Zi\243\277\r!N1v|\354?~9\270\376\352\014\003@\354\004Du\r\002\326\277\333\003\276UJ\227\354\277I%\037D\354\302\355\277Rk\326\341\336~\341?\252\227~\n\314\033\327?}\365\257\240\337\304\371\277\020o\020\272\177\353\325?\354\021\243RI\006\332?c\331\213\232c\261\300?\266m\362p\001\302\344?\230\202\371\014\025\250\277\2771\377\022\266\025\244\265?\331y\333\324\025\274\340\277\024fmn\0068\343?\374\'\024\213+Q\346?4\303 u\334\221\301\277\264\307\3478[&\341\277\256g\374\021KS\353\277j\215t|\334\346\351\277\376\374\366\031Q\037\345?\270\277\000\371\006\260\273\277\233\256\014K\014@\361?a\333\0219\254\242\361?\251(\236)S\327\307?\271n\300\206\335\215w?\313\357\267\305\177T\347\277\326q\275\263\344q\274?$\371\363E\255\002\000@\303[{\376\352p\340\277\002\326y#\221\336\351\277\037\336E\353\270\003\356\277\257\214\274\\\351Y\320?\303\245`\255r\247\355\277\300v\032<A\343\307\277\250dr\373\250\351\341?\034\311\370\033RO\355\277]\212\236\037\214\203\355?F`B\302i\005\320?\233\200n\3504\250\337\277\007\t\247\243\367\t\243\277\034i\367\204\250\241\354\277M:\020\037\255Q\364?\344\324\304\326\344\034\341?Kmc\tz\230\360?cB\233\350_:\370\277\376\037Uqiq\371\277\332\2236-(\240\323?_\252[\231\313\307\345?b\\k\270zc\275\277\020r_\224N\307\362?g.\177=|\243\307?\034W\361\206\234\305\271?x\313\nJ\305\356\362\277\367\014\200\005\"L\304?\320>Y\372\250\210\327?\264$}(Fj\242?@\216LW\313>\360?\235\000^\324A\204\327\277\204\337\256#H]\372\277\2405\021\037\355\025\330\277\353\244\325o\317\022\322\277\334U\353NP\310\345?\016di\002\316\022\371\277> E\360\274`\321?:\365\202\342\375-\266\277\304\324\233fW\376\335?\336\024E\207\277\335\355?\007%\341\267\352/\232\277\374\032\354\272\310\225\367\277\371\313F\254%\243\317?\034\305\304c\256O\303\277\245\3438\027\375S\250?\000\273\013\301^V\321?JL\3638\247j\341?\353\310a2h:\240?\312\276i\016\234\254\337?\324\241\314e\261\017\016@\362\321\217\020\003\207\320?\325\250\365\360\272\244\366\277\262\354\322\234{h\361?]\210t\005\326\007\324?\233\340\037\324\017\304\277?\214F\035\335\312\013\347?\353\031/\216,\342\330\277\345\302\177\006\243/\366?\3259\020\212\252Q\310?=\013\322\375~/\327?\234\255\260b\207m\325?\303f\r}\307\230\317?1\201\261HA\253\264?\355Wzl\004\272\346\277\220ZO\243\307\366\262\277\230\210\"J\252\032\367\277\323`\301\007\357\202\253\277C\210\254\237rm\327\277\274<7K\211\330\311?-9\302~\363\"\353?G\033\325\260\311\\\341\277\\.2K\260Y\355\277\354\021\243RI\006\332?\361\231\036z9\276\320\277\003\245\270\313c\226\370\277\224T\265\347\3750\352\277\361b\257/\212B\301?\317\276S\236\002\322\324?\312/-\276\r\250\356\277x\343O\365\377\027\330\277i\324.\022\007@\245?\030\356*[\034\246\364\277jB\313l\346Z\357\277\260\t\250\350\336c\374?\227\202\356T\310:\272\277g]\331\253xx\366?\221_0J#.\347\277\243\027\361\324\006\024\335?O\204b\314\265\031\362\277M\022Z\340b\306\266?[\231A\326\352\302\347\277!-\030\373\005\"\335?\177\370/V\322\212\325\277u\275?a\263\305\301\277\0066\003\224Y\335\341\277%U\250\373\345\006\336\277\361\261iW)F\354\277KF`<V \315?\353\221\235\366\242O\327?QE\003\215 \324\306?P\366\303\016?t\344?\312G,u(\326\321\277H\362T\212\333\226\360\277T\376\350\rCm\366\277\227\203\264\rr0\326?\024\373]\343\313\316\350?\327~K\024\t\300\320?\315\314\277\177\245\220\256?Og\207\276\260o\323\277n\214\276\325\032\370\233\277$\357\005\367\233Y\255?%X\037\374Fy\323?ZD\261\2257\365\305?\265<\324\350#\264\344\277\271\213\317\350\236S\203\277D\034\212\n\030`\307?\266\000:R\003Y\260\277=a\230\350L)\350\277\354\235\314\006\371\377\322?\3074\377\263H\200\334?\031\326\364\226(/\334\277Gw\020\252\201\234\342?\020\200ed\263\367\340\277\216{m\305\020y\302\277#\357\232\225\354\017\311\2770\221\371C\216\203\371\277#\316\354Dl\253\t@\314\372\237\2269\223\347\277M\213\277;Qx\357?\'\031[W\221\365\303\277\351\202\374,\201\357\010@\3716\363\324\372\347\344\277\263\027S\213N\350\332?\243\212*\345\334\204\330\277\007\257\317W#\347\275?\261\270\036_%j\355?&M\236gl\035\360\277j\034\347-&\344\370\277\232\177\024\223W?\300?&\334\250\\\265\\\241?\2325\2539\253\374\342?\371\222.\316\262\'\346?p\2713?\265\014\363\277\216D\234\304\031)\325?\261(\314\252\036\336\337\277=\036\nw\253\362\321\277\036C\010\216\233\275\360\277\263\330\014\264\210\230\344?\177\013CXE!\356\277;\rS\0260\022\351?\2627k2\203\330\342\277\300\312\222\354<\376\364\277d\010o\251/Q\321?\246,>\244m\310\335?/\002V\267 \234\353\277\256q\223B\271|\362\277K4\275t\263\363\370\277l\220\260\225\352Q\262?R\207Jj\245\022\362?\036\363\210Yp\024\361\277\253\255+\326\036\276\347?\rO\265\366\207{\333?\r\032(\317\263f\324?m\322\034Z<m\362?s\234\204\206<>\364?\333*\377\270\231\200\343?O2b\177\331\215\360?\310?\253\361\221g\330?\344\311\266\342Sa\347?\3074\377\263H\200\334?\321 8\004\2456\345?!\302\013\312#\234\271?\3402\267I\t8\362\277=\013\322\375~/\327?\326z\3058\202\356\354?_\235\321\022!8\371\277\236.X+\277A\343\277\315\314\277\177\245\220\256?g\346\033S\303\237\263?\203\207a\356\023\"\341?\026\354\0337\227\023\325\277\272V&|\212\237\226\277\202b\016\022\n]\337\277\233\t\211\371\331\210\341\277\261\225\037\017|\202\260\277\362\256\024K\245\013\331\277\274\016X\\\221\324S\277v\301\340\207\353\006\357\277\257Q\217}\274s\360\277\326\004\314f-4q?0\024.\031\316G\363\277\217j42\205\314\302?3\371a/N0\364\277\307\2074\377!\350\325\277_\363\377\345\353d\356\277}\376\013\241\233\263\362?k\267q(\217\355\360\277\216\014\311w\010\214\327\277=\204U\236\3606\207\277\017l,K\2127\335\277%\200\257\374&^\324\277\207\021DoH\375\354?\350\202f\002\273\001\351\277\266\322\202\341\"\310\340?\376l\266\246\351(\353?\006\306N\277\rA\341\277#>\317[\201\002\346\277gi=\253Y.\345?\032\373\264\341\3065\341?j\215t|\334\346\351\277\021\321\207\261\215\016\343?\314\326h\305\266\332\342?\031n\311z\343y\332?H\357V\354es\370\277\237K/_J-\272?W\220\245\023\3047\343?R\016\t\272y\235\371\277F2wN\224\265\025@g_\0361\271\003\364\277\351\214\3752)+\360\277\203\246\035\310Vi\300\277\345g\233o\330\263\361\277\177\216\"\027\262n\273?\3074\377\263H\200\334?)\350\2371\031\014\351\277\347s\222p8\330\357?\326P$\021b]\335\277\253\271\253\"\316&\370\277\000\262\256\024\205\027\301\277\230\243\262\240\271\332\361\277>=\370\327/t\327\277C\265\242\323\0269\332?\307G7-uC\327\277\3066\200\314\371b\356?\326\337\220\220\366\373\305\2772\016\232U\314\203\344?\356\007\216\311D\317\343\277\252\332\312\266G\234\362?\271n\300\206\335\215w?\303\337\337\273\243\262\365\277\000\\\3065\332\345\315\277<\213_3D7\321?D,\2559+\205\312\277\335_\2134PE\303\277\375\304\341\245R\256\212?\370\333\370=\252A\350\277E\212h\237vW\266\277s\246\250\206tw\364\277\310f%\216\371\304\334\277uq\375`\037\271\236\277\275]\335|\027\377\346?C\223\353n\'\023\320\277[\250LuF5\366\277\000\203U7\023i\266?d\020\373\344\022-\320\277^/f\323\2658\244\277EI{\214(\250\264\277\212$\n\364Hp\365\277\350|\262\335\203o\324?O\206K\315c/\350?N\360\032\242TO\305?H\325\202\026\325\026\305\277\307v\017\204\364u\302\277!\330\274o\360\374\361\2778\030l\302\r;\350?ni\001\030\351\326\340?=\3136\342\031_\326?i\247E\223@M\025@\364\220V\267\006\336\333?\335\335\316^=\263\360\277\246_\030,O\300\334\277H0\375\010w\344\317?T\032\346\033F\242\305?4b\337\'\351\232\343\277Y\000\213\3033\276\342?Ch\331\265\231N\324\277\252\320\361\354\2571\247?A\3021\340X\327\345?\305\007E\023\025\014\336\277sL\222!\333\244\355\277\337\036\345l\277Z\313\277\226a\322\377\023\177\363?P/\334\354\261\357\315?\305s\3643\"\356\272?\205\246\321\201\250o\315\277vg&\247\344\251\317\277\307\364\224s\007\232\332?#\3636\306y\222\364?e\205\274\353l/\373?\362`\266O\242\025\246\277\374+\251M\371\324\346\277,\035S|\304\235\351\277\0353\243\370\014G\242\277V\236z\010\005~\362\277v\301\340\207\353\006\357\277)\310j\221\370\030\350\277\301P\332x\356\366\351\277l\220\260\225\352Q\262?\313\253\364U\341A\351?/$\260{LL\364\277Q1\372\242\375\255\332\277:\266\207\\k\326\327?M\312*o=\313\364?\254*\320\326\006\322\223?\216\3044\262+\236\324?\326\220\216Q\243C\337\277\2409\023PO\333\313\277\t\213\212t\373\335\314?\2048\3504\375\n\271?Eo\233\274\315X\t@\264\370\020y\205\241\346?D\313q\256\331<\360?V\344b\014\302\375\352\277W\307\205\373\001:\275\277\321`5\326Q\333\343?\022\214\230\210p\303\360\277\331\310\032S\367\033\323?\005\253\230E\'\004\355\277\254\023\267?.<\354?\3074\222E\264>\331?U\t\314Xe\235\327?\t\213\214\201\340\325\253\277\305\004M7A\227\371\277\270\322+\343\'a\350?\n\032\005\0065\315\261?\264k\017\242\010\013\325?\342\2637\230\314\305\316\277\307\372\252N\206\000\355\277\312\035\034\010\265^\266?0a\252)\354\276\333?J\306Z\340\257i\312?\271\225\271~\272\357\372\277s\261\355\207\336{\323?h4\035\362\031[\341?\002f\224s!X\352\2776 v\313\340J\320?s#TP\377\344\344?\353\204>\031gK\323\2776\3748SO\r\353\277\305\344\346\273\374\271\371\2773\371a/N0\364\277\200\266D\375\337\301\341\277\315\024a\324\215\220\357\277\240\200\272.\343\241\322\277\253W\226\341\007\330\370?\317\016\247}\241\237\364\277$\315\013\254\017\007\327?\314!\001[\276J\364\277{c\201\2462\252\372?_\tPB\214\365\003@d\351\271\201\303C\311\277%m\323\007\215\020\361\277\331H\351\241\304\211\360\277Z\361:\005Z\262\262\277\364\007\303\323b\376\311\277?@\263\311\365\307\317\277>\215B\002=\356\340?ahp@\331\376\321?K4\351\311?\317\330?\257x\263r\3063\304\277`T\311\014\376\254\303\277\367\223\245\221\325\271\370?\255/\263\241\023!\364?\312\034\032\274\232\021\326\277\242(Q7\207\215\355\277\316\313O\031\331\261\343?\314{\202|\352\301\250\277\001\373\023KXh\325?\002:\325\225\265\010\336?|\t=\217\274l\005@\263\336\002.\3220\361\277O\200\341v\306V\315\2778\227\034n\310\312\243?U\010\216y\332\370\262\277A\222\340\302\373\370\330\277\177\253A\301\233s\355\277cB\233\350_:\370\277U@0\353\307\253\301\277\005\345\326:P\251\321?\251\\\263\341\346\t\365\277\263\224\0227\021=\361?\265]{\306\317*\351?p\033\006\177K\005\263\277\356\354\233\274\355:\353\2779\227\226\241\216q\313\277\236\003\3655\330\304\362?\356\243\367o\315\235\342?)3\253\367Vl\341\277\224\372.<s\241\320?\302\232\014\305\301\360\361\277s\246L\002\342\001\335?\221\244\262\004\2547\366?\023]HO\'\035\251\277\2132\236\317\201P\361?\004\347\223\346q\343\347?\022\204\216d\n\212\325?\214\206\032\257w\260\345?\337\247\026\232\033f\337?\023\211\313\305\036\212\367\277\036Wv\006c3\332?\322\371\366\240UM\356\277\204\302;\376?\346\377?\346Y];\375p\326\277\375\304\341\245R\256\212?\245\n\\\226\017\027\373?\031\032%u[\203\315\277\370\373\307\370\210\033\324?\225\345\324\006\205\354\352?\340\2060\246\"\243\266?\000`RC\026\026\370\277\211\224\357\243\270\366\364\277\034a_\345Z\010\321\277TY1M\247\213\244\277\203\260\233\220\365\234\322?\337\022\276<Y\234\365\277\327[\320N\253D\331\277\367\323\325:\257\347\202?\177\2702\204%\346\326\277\351|\275\225\320\334\331?\247I\344\340\362\371\231?N\311\316\206\270\370\330?x\374\013d]\323\317\2777^_\016\004x\363\277\365\017Z\307\222G\276\277\250\301T<\n\334\334?\214\355\010\230O\021\272\277l1\376\233\321\237\333?.J\2454\373\336\363?\232\330\330\213\256\014\334?\243\266>\352\204\226\264?\003m~Bs\026\336\277\014\206Jd\016t\304\277h\365\226\343\217H\365?\276\350\255\260\213\361\320\277\026*6:K\001\344\277t\363\315(\204\327\341?\177x5\262xA\330\277\024f\332\334\232y\346?p\275U\321L\240\314\277\361\336\014\005*\241\241\277C5;\301(\256\331?_\356v\263\202\221\303?\232\217Bz\267\321\310\277\253\022\024\'\177\316\351\277sR\331\327}\365\316\277\327n\255\177O2\361?k\376\374D\373\332\353?\271\213\317\350\236S\203\277\324\023GA\033\304\333?[N6\020\255b\357\277\363,\360\214\225F\342\277jM\331`w\026\351\277\346\236A\307`x\306\277\265\"\204H^=\307\277\333*\377\270\231\200\343?\225E\326\235.\232\353?\002\236\275;\224\035\242\277\275\336\317\211\340\211\337?\272^v\211\227O\273?\206\217\302\200\210r\367\2775\203\206\005\225\021\350?o\'W\036?l\221?>r\2714\200V\304?d\275X+\245\203\323?O\322\360PT\037\014@\352\241\350KH\013\363\277\314:\223\\\267\032\310?\215\n\250\034\016B\224\277&Q\326Q\202\305\236?J\205\013\027\032\346\312?~%\\\3531O\366\277\204\260=\t\250\r\354\277\342E\210\206V\030\320\277\304j\275\252\037,\324?\"_r\n34\303?\337\332\224-W8\364\277\373\230\327:\235L\325\277\351|\037L\030\261\327?\254\266\006\237\312:\021@\252\002\353\226|Y\023@\023\317\244\342\224W\323?b\r\254\nDQ\363\277}a\\\022\024=\340\277\254\310\367\374v\243\217\277\315\236eI\237\243\335?z,x\354D\301\340\277\313\324\220\256\n\221\330?o\266t\025\001\030\t@\213\357\263\331M\244\323?r\373\312\330q(\262?(b\272[\257\347\361\277\211\232i8:K\324?0\361\372\33271\372\277\017$\230\205\255I\332?\354H\022\235\370\201\311\277\000v\345\372{r\354\277\361\273<\033\010\307\367\277@ P\250\t\316\326?f\037=\221G\350\343?\356\222\177x\324N\026@\260\330\027l\325\005\352?\330\016_\333F\021\343\277\315:\236\024\004\210\315?}U\342\022\255\\\371\277\n+\21014\340\344\277Ip\310S\342N\350\277>\301/\252\274\304\010@\n\275\036\024\336-\370?\316\013M\353\205V\342?3\314\256\374\331\272\320?\3016Y\375\004\226\315\277=`\277n\342\302\367\277\212@i\270\223y\302?\0100\232\351\331T\356\277\0303\234\233\266\223\372\277Vd,\325\367\\\351\277`p\232\305t\006\323\277.\003e\222F\373\311\277\030u\202n\021N\357?\326Oh\005= \300?\0018\232\034\244\232\336\277\345\357c\024;\217\330\277\276\3414\177\310\271\307\277\000\0149\306\205\332\310?D,\2559+\205\312\277\025\255\025\371\267N\261?\305a^\361`\365\244?\033w\312v.\316\274\277Y\271\024\300\303\341\352\277\033\216U\031\377\323\323?\253\371W\270!\023\342?\200\253\216\263g\275\307?Vk\245\006\273\224\342?\223\227\3660\255\312\337?\250\000P\302\2343\273\277A\221\010\240.\\\340\277m\374{,J\370\331?\241\317\214>0\300\341?\2507FfI%\361\277\231\260\332p\034\226\340?\272\376\332\202\2574\360?\344I\355\031\036\002\351?\024\240\327Cb\222\315?U@0\353\307\253\301\277\377\347\013\0012?\342?C\010\017,\311\351\370? Y\314 %\004\344\2777\316D\276s\376\362\277A\002/\262\005|\344?\277\311\205\024\322\270\265?\347*\267\026?\362\361?&\334\250\\\265\\\241?\205\013\217\236\363\032\341\277r\311H3\237\317\360\277\303l\r\350\254$\347?\'b\361h\2100\327?\332j\374\212F%\342?\245sQEx\200\340\277\371\014\226u\273&\317?\306V\265l\032V\357?\270F\261\r\262\330\355\2778\207\231\225R\311\301?)\022l\002\250(\361\277\263q\347\360\205\336\223\277\377\2444\314\276\003\271\277PV\305\245\350!\345?\026.3\345\025\270\370\277\357\016!\232\233&\337\277\317\016\247}\241\237\364\277\311$\331\325\\\361\362\277\351\273\270\033c4\270\277c\365\271\\z\245\"@I\022\252\2131X\327\277\356\243\367o\315\235\342?R<u\005#\253\327\277\0204|u\357\020\240?\035\245#\001\027k\346?\224&\362-F\014\361\277\253\242.w\017H\352\277y\020\263\2278%\336?m\361\236\023\335&\337?\023*A\362\227n\351\277\325\034S\233\035\020\004@UI\311*\022B\326?sL\222!\333\244\355\277m\250\010\002\346\353\313\2775C&\321\202H\304\277\342\222\3445?\301\322?)w!u)5\265\277\221\2511\273\322=\360\277\0220L\025\312g\306\277$\304rl\305p\302\277\033\343se\206Q\363\277\034\265\2414\233*\300?\322\245\255\237>\361\307?\022p\205z\347c\311\277\341r\264\033\266\334\360\277S\013\257\'^T\347?\273U\350\001\232&\334?(\224Z_\374\364\351?\311\341\201q\224\003\342?\016\r\266\212Lg\013@\202\021\341\014\343\330\307\277\213V\237?I\020\350?sd\221\330\365\322\320\277^\3005,\3338\361\277G\327\244\322\226\010\340?b<%ZT\031\267?X\271PS49\357\277Ix\237\257\347\276\010@/\031\263\001\252\254\343?\231\030\313\245\016D\325?\355!\343\357\241T\360\277c+\302H\3735\360?fp(\321H\266\360?\307ET^|\214\347\277=\006\013\300\220\304\356\277\301\252\216\'@\365\362\277O\245\241\301d]\342\277t\263\320V\3272\343?\222\313\252\211\226\362\326\277\221\231\027AQl\323?\224\377\301D\345>\343\277\240\002\244\005\240_\334?\035\0203\214Q\324\340?\245}9\"S\022\357\277j\247\223A~s\330?\306\354\232\035r,\341?\"\001\3637X\271\273?;X^\334mr\341?\356\213<\263\013\255\014@\3200\366\371\223\222\352?d\272\221\177u\177\275?\'\342\211V\232\245\326?\217z\3039\215\035\005@\224\256\002ZpL\326?\233\377$\247Jc\310?u)4\312\302R\371?\246U\316\230,Z\320\277\243\323R\334!.\341\277\027\273UY\322\274\344?\242hD\375\004\025\316?^\010CT\243u\361\277+\177su\327Y\336\277=\213j\353\220\244\326?>\362\202\375\265\265\302?\305!c,\231H\305\277I\334z\367\313%\345?\227\252\000)\016\207\302?\326\373\316\267\001\227\330\277\257\322\000\3458O\340\277\230\003\2647c\210\362\277\352\273\303\323\257\241\275\277=>\016<\250\373\323\277\226\324\257\213Wz\347\277N\022e\230\2573\274?\025\226\000\212\'\203\236?F\001\362~\230\'\307\277\264$}(Fj\242?\237K/_J-\272?\035T\001\264<T\344\277\323\363E\326v\236\260?[\304\220\316\006/\317?\201\215\025\023K\264\325\277\374\t\370F\273\202\251?1\271\002\247Y\267\367\277f\245\340\241\213V\320\277\3065?j\222\311\351\277\013\034\251\347dI\346?b\r\254\nDQ\363\277\3368q\240\365(\355\277\246\2352/\003\256\353\277K\364\277\242\006O\372\277:\2740\311U\373\346\277&\323\264\030\372+\346\277\327\202\243\357@\206\222?9\304K\220.b\244\277%2J\244\315\264\371\277\235\355\270\354\200\177\331?\352W#n\tS\356\277@\227\274\304e\356\304\277&s\202\246,\224\346\277\304\337\026\311|\373\332?\017\025V\331x\216\346\277\335\305\317\247\"\205\375?\252R\021\371+s\350\277=\013\322\375~/\327?\312/-\276\r\250\356\277\323SD\023\310h\332?dX\375\304\241\254\355\277\033;\235R\033\017l\277[\304\220\316\006/\317?jz\316\350\375\221\324\277@Q\230\202\270\235\347?\322\253KT\334\250\341?\301P\332x\356\366\351\277\236C\335^\234\010\321?\204\312\270R\334\017\362\277\266 \376\251\025L\366\277!\272{\210\312\214\354?O\206K\315c/\350?N\3442\210;\335\363\277\273\261\027\227\347\250\340\277\350\027Ww\200\230\356\277{h\365\277\237l\302\277\334\220\013su\'\321\277R\t\225K\214T\362\277\323\310\377\347l\014\337?\221\022\262L\310\327\002@\312\013\365@m\237\302\277\211\234\235C\214\272\370\277\217Y\356\031\030\354\364\277z\315k\r\024\247g\277\316\320\216}\250\313\304?\270\321\271\245\234\335\344\277@&f\203\2104\351\277\274\373\347\201\363T\312?\370X\345 =\025\334\277jg)\001=\215\326?\247/\0055\n\243\360\277{\360\243\032\357\256\326?O\347\037\254\302\344\322\277\310\307<\211\033\372\331\277\364M\310Ee\247\345?z\340\304\207\300\344\366\277\343\224)\273\177L\340?\324Y`\260\350}\360?^/f\323\2658\244\277I\306\036M?\022\306?E\361a\341\360\300\300?)D\320r\204\336\344?\334\360\252S\327\000\324\277@\227\274\304e\356\304\277\250\304\223\363\207e\370\277\371g\034\025%c\352?\341M\215\2248\363\356\277\021a\253\227U\250\240\277\2058\363\354Ix\276?)\310\363\0265\272\306?Y\313\005s[?\007@V\350\203\256$\006\261?y\003\205\225 \013\331\277\347\251\024\324\236,\343?\316\246O\014\320\016\343?\252\250r\252\325\243\313?\255\316:GG\341\340?\014\202S\353\370\033\326\277\305v}\236\246\007\355?\244\304s\222R\227\342?\255\375Z\225\241(\315?o\034j\201\255&\321?\366\034\324\017Y[\306\277\244\344wWO\240\344?\343\021\301)\313\306\r@\nk\252/\271\230b?g\247\372}]V\365\277\217Y\356\031\030\354\364\277,(\222KyC\342\277P\257C\377\237z\316?\'U\222\213L,\323\277\325\340/z\253$\341?\016_\365\223\340\311\361\2775\251\376,^\020\343?\244N\376hn\273\316\277\355\306U\307\345\357\366\277l\215\3262$\273\347\277\362;y\204\207\306\337?\031J\235a\255.\313?\006\266\t\234\035\344\313?P\213\264\203\004\013\352?\323$\376\241\226\244\344\277\0204|u\357\020\240?\353\310\001\211\005^\301\277O\224L\0271Q\327?\363\350]\370\032\036\343?\"E\006824\367\277\261v\374\370YX\364\277\203\274\356\025\3506\350?a\255\252s\232\243\362\277\275\336\317\211\340\211\337?\332\364\206abI\316\277\350O\355\204\003\216\320\277\271\213\317\350\236S\203\277\216\'\205#\244\'\362?Z\227c\271\205\217\255?\345\'\312\362\267\352\322?GK\275\216\214>\342\277\317~\214-\021&\364\277\235\244\"\333\211D\306\277\362`\266O\242\025\246\277\345]\310\253\3712\346\277\002\240D]vM\361\277\377\307\007<56\340?\026Mlk\321\274\277\277\362\261\363R]\344\253?\305\352\302\006\306\342\326?\023\240\314\213\025%\310?\351s\363zb\\\306\277.Z\'\227y\343\364?,\231\270]Pc\346?ni\001\030\351\326\340?E\333E\371\316I\315?\332\313t\345\022e\365?KP\271\326\230\330\340\277\3239\364r\002\362\354\277\003\323\374\275\314\035\225?C\233\203\016u\254\353\277\222N\325m:\303\365\277\025E\325w\241s\313\277\263\336\002.\3220\361\277-\020p\232\316\027\006@+*\320\213\361\356|\277\317\376$\033#\233\363\277\003\320\366\331}6\324?\336\177\347\243e\005\345?Kt\346\233\354s\327?9v\177\322q\304\323?\277\225\243\016!\025\360\277C\265@\035\317d\334?!u8\255\031\326\242?\370\255\215I\236\375\341?\347\273\017\032^\233\260\277G\220?I\025H\361?\345\231a\226\374=\343?\266\\\315\365\323O\341\277;-\210\266P\005\352?Kk\211\357\0225\307\277\004\341\3651\324+\316?$\036.\371\351\035\311?=gF</q{?\306\262\014}z\365\273?\226\202\343\234{\315\264\277_\030\305\266!z\362\277\035ZI\026\375\364\354?\253\322\026U\322)\353\277a\250\332\200\032\345\323?\322\323t\030\335\252\365\277\301\262\\(I\207\334\277\306\365\345\243?\377\360?\253\301\035/1\223\367\277\351-\r\261H\375z\277j\223\212W[M\314\277vE\334\260\211\305\270\277\241o)\361>>\343?j\001^4m\327\245\277\264\214\223\337\271\371\317\277YBqj\222\003\241\277\242\"\3035\'x\322?\027\273\2064\366\246\343?\200\251\212\0333#\247\277\030\353\320\310\000]\342?\020\227>\004\030\374\330\277s1\363\343\2042\326?^S\362\225N`\322?\224A\017T\037\334\324\277\321,\275\273X\204\361?\210Za\256@9\320?F\n\213\276\342\275\333?\360a\210l\266\310\356\277+E<~Z\003\362?\2454\253\017\246\374\272?\277\311T9\256\316\266?\343\002\343\201\"\253k?\275S\303m{\271\361?\t\213\354*C\262\312?bD\320/\274I\341?\217i\3222\336\304\363\277\362r\335\026\352\324\311\277w\213\334\234\364_\365\277\004\305\261\330\0232\365\277\271^zc\021\016\363?\315wEW\223\263\252\277)\357\007\351\355\'\371\277\365\226rT\'\363\361?^\277\356\007\322\360\310\277\243\315\207{Z\321\357\277\217`\371\205\251\030\343?\005\216\2734g@\277\2777\035e\224\337!\244?\376e.\216\337>\325?\007\334Sk\237\355\307\277\327\337\233HCi\313\277\n\305?\344\347\341\322?\341\r\030\234\252\237\347\277\210\303\010)p\344\234?x\344QA\032e\270?\364\303\364\253w~\326\277\0210?P\230\002\242?\250\200\267\324\212\276\273\277\275\363\301\326\321\013\361?f8\371\377\244\243\353\277\274\"\321:*\207\341?\314\271\276\222\325\032\363\277\017\252\331\337\251\343\350\277t\314\214\3054\356\352\277\312\334\034\352\355l\327\277\000\273\013\301^V\321?\227\225\206\255}-\352?%\315\026d\\t\334?\0257^\n\256\274\362?\003\220\371\007\321\221\325?\010\253\215\215\332\226\347\277\010j\031\370\n`\366\277HM\010F\202(\366?4f\334\322\263Q\370\277\226\004\263\n\313\276\262\277\3776a\357\254y\317?\031\177\036%\027\206\345\277+\365\274I/Z\362?\355s|\000\237\375\344?P\353Sdf\344\354?\212\177?G\314A\202?\010\207\3275\250\030\245\277\006\266\t\234\035\344\313?\210\217\356\325\024N\327?Y\304\2539\221>\303?\342\010\340\300-\256\344\277\244\347\321\351j\351\366\277\376\312a\316P\177\362\277\014\245\356\021\214e\363?\310\307<\211\033\372\331\277\315[\010\263!W\346?\310\177w\350\032\"\330?\310\317\203\321|\261\315?\311\001\2066\221\014\344?\204\\Z\355\322\312\352?\300\367\276\201\234\302\345?\377<\377\243J1\351?\244MF\214C\303\350\277\026\037(F\272E\352\277\213%E$\373\252\343\277\017T\347\237O\016\370\277\341\305S\247\307\027\275?}\240\036\264\016\247\360\277[*\376\222\014Z\303\277-\214\274\342y\203\327?>\330\031\014\006\215\000@ \245\030I\312\375\340?\320\363M4k(\337?\016v\001\022$\322\307?\200\200\256\216\275t\257?\305\224g\207\321\020\372\277\357\250`&ny\344?^\315\r\352\305^r?,\331Sy\2653\347?O\374\344\241\nH\334\277\273\363\225\201E0\321\277"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content: "\250\306Md\346h\321\277Lf\177\305\006s\356\277{\327\275OV\007\265?\242\371\241/\310\370\244?a\277\311\232|\275\360\277-Ew\362<\324\344\277\322\215\237\321^\206\253\277\203\323cY\003z\360\277\305d\316\251tZ\372?\277\322\271\345\017\211\360?\320E\203\257`a\362?\251\247\323o*\201\376?\263\242M\001\233\250\355\277\200#\262ty\233\367\277\035\363]\334\217\311\361?\223\352\301\230\336\003\346\277@j\270-\333\362\364\277\327@Zu|\277\365\277eD*\263\364\031\371?\033\000\022\210|>\363\277nz\031\204\215/\356\277x\301\006K\257X\313\277\027\032\327\023\001_\332\277\"\024\016\2203\227\320?]\2360\204\332\223\376\277\034\227\225\035oD\361\277,8 {\373\225\367?`\221e;\354z\340\277\314\200\370\356\210O\370?\3673\376\350\265\033\357\277E^\227\037Si\365?\367\370\210\251\215-\351\277\326m\342\307d\257\277\277.\375\007p~\336\345?%x\004\214\261\270\361?\330\327\335\no\305\363\277\210\"\325\240\342\300\323?\033u_\\\360g\255?\320E\203\257`a\362?\035\357\210\002\221\254\352?\352k\372S\2704\360?\245\254BA\270\265\362?\031\270E\321\022\022\340?*\027p\307W\310\350\277\263\2518)\272U\325?i2\252\001\3179\357?{\327\275OV\007\265?-Ew\362<\324\344\277+\256P\221\365\004\373\277#\343Y\201\373a\313?\301\004\022\030zP\005@`\221e;\354z\340\277\230\235\206\020\347\242\376?\221\225\236j3\231\325?\303\332\376\277n\311\375\277\326\327\227s\3052\374?J\354!\244;\177\242?\003\373\355b\035\002\360?]Vd\315pg\353?O\325\226y\336\354\260\277w[+\276$m\372\277M+\n\206\336\204\350\277\265,\300\266\365\002\366\277n\0260Q&L\253?K\036\020CH}\357?]\007P\272<W\354\277\336\353\331\022&\036\321?\304\356@_\317\264\342?\253\004\032\312\206\017\002\300\244B\215\225W2\266\277t\343\333\205D\274\327\277L\343\232\003 \217\351?Y\377g\024\211M\363?\275\217\320\321\340k\302?\373\336\303\035\t\r\362?\324\005\374\322Uu\354?\033\000\022\210|>\363\277\237\"\002\261\370\025\375?\3263\246\311\217J\364?\265\343]\212\215\026\264\277\3160\241\306\026P\300?\312~\331\314\242\r\331\277\364\317@\273\312N\247\277d\300b\035(\257\361?\226m\354\361nz\302\277\265\225\337\354W\306\343\277a\204\016\304\252<\363?\241\254Y\336\271Y\337?(\351\2563\034O\324\277\022B\211\214\305}\315?u)\323\213\272\245\005\300\325MkU\024k\353\277\226m\354\361nz\302\277[\230\354?\214\'\341\277\364\317@\273\312N\247\277\370\377s\321\254\332\320?\010lRs\336\005\353\277E\364\327\233P\214\367\277\230\235\206\020\347\242\376?}\204\254zz\240\325\277\200\262m\016\266\031\352\277a\262r#;\177\343?\304\356@_\317\264\342?2+\311\003\272W\332?\213>5}\266\031\361\277\311\364OzF\017\304\2777\225\034f\352>\271?\213b\210Y\312\006\377\277Y\226\353\251{S\361?\203\230\250\2021\371\362?*f\204\332\213\330\347?s\317<\2628\232\316\277`\372\341\245\371t\342\277y|~=\035\004\365?YHx\266\207\177\343\277\246#\010V\023\207\307?\371\257\203\261\320w\273\277\177<\367`\022\030\357?{\252\205h\002\020\361?;\314\231\370\357;\330?\250\007\234X\337i\200?\367\217\014?\2003\347\277K\276\231H\367\005\002\300\0315\262\232\020\332\004\300\364\275*\007g\343\377?7\225\034f\352>\271?;#J\rE\362\001\300\244B\215\225W2\266\277.+\017\233c\352\341?\265\225\337\354W\306\343\277\306\204.\177\303\372\261\277\202\000\354\253\353i\272\277\362\206UU;\025\266?p_\033\267\265\205\274\277\264\210\210u\026\210\366?\253y\022\334\356\007\372\277\330\251y\253\336\202\343\2772x\232\006\327\273\251\277b\212z\023\315\315\310\277/\003\027\213\3658\307\277\260\257\001\255\207\035\337\277\232\313\323\322uA\362\277[B\013\221\016\330\331\277\020\022\251\326\243\302\371?\221\225\236j3\231\325?a-9i\221\256\233\277>4\306\204\250\010\263\277\212\206\313\234`\342\364?\304W\275\311\334\256\344?\354\356\201\341\363\341\320\277A\365\335\257?&\001\300\356\334\273\230$o\377\277\320E\203\257`a\362?\200\267\227\271\212\332\344?\336\353\331\022&\036\321?Vh\344~\226G\365?$?h\327\305y\303?\032\346\006eN\213\324?\344\033\230\251\'\300\352\277Is3q\363\347\337\277\346\3004\037eC\355\277*R\345\006\200\266\356\277a\355\347bcm\351?Bk\0054\226K\377?-\n_\347\277\034\363\277\022@\260\001\211\316\365?\265\303CL\350\010\364\277\352\324v\276\305.\362?\272s\"S\301t\376\277\216\367uD\313x\327\277\201~\324\362\2608\333?\207*\275F\226\312\374?\267Mpj\231\320\344?\232M/\350t\243\306?5=\230\220\307i\005@)\200\3458\351l\272\277\265\225\337\354W\306\343\277\247j?\016\034Q\331\277-\256\363\\J\316\346\277QE\270ta\001\303\277\203/\211L\3175\345?\263\000\326\230+\211\346\277\326n\033\t\2708\372?@\244\347\177+\035\305\277\302\025\027\313\353\200\357\277\320\227\360\265z\003\000\300S\375H\362\242\013\324\277\244B\215\225W2\266\277\367\312\201~\250!\355\277R\241:\234\330\363\333\277\024\000)%~\342\357?\203\230\250\2021\371\362?eD*\263\364\031\371?\263\2518)\272U\325?\327@Zu|\277\365\277`c^\020\007o\344\277=\024\254F\003\373\362\277}\204\254zz\240\325\277\326\244l\203\224\230\005\300\245\376\257G\322W\000\300\223\241\274\240!N\270\277\027\022\367v\304\013\300?\332\225 o|\363\301\277<\027!\274\034p\372?\216\367uD\313x\327\277@\244\347\177+\035\305\2778\000j\247\242\017\336\277-mj\225d\005\374\277\326m\342\307d\257\277\277\023\200\013\331\027\244\220?-\241\342|\262\"\361\277[\230\354?\214\'\341\277n\311-\227\301?\355?\222\013rL\202\321\364?\3319\022\031\262\333\311\277<\024f\257Yh\373?N\207u\020T\323\364\277\021\037]\202\2207\373\277\n\310\275\375ST\367\2776&\211,\324\021\361\277r%\337\270\340 \361?\353\332\342\r\350\277\307\277\360+\026C\002\022\366?\032;\207\307\244,\371\277\203\245\377\371r7\340\277\034\244\246\375\006\360\346\277r\261\340\351\361\353\364\277\204]\220w\264A\341?H\214\236J8u\361?\304W\275\311\334\256\344?\221\303\245\225\030\245\321?8\000j\247\242\017\336\277.\375\007p~\336\345?\345\257/l\363\022\003@T\010(\355\233=\000@\304\010\006\353S\325\371\277-\256\363\\J\316\346\277y|~=\035\004\365?-\n_\347\277\034\363\277\nR\215\347Y\345\363?H\214\236J8u\361?h\177\345\211\306\232\366\277L\375\002[\371x\354\277\373\356\201f5l\366?\224\257LY\266\025\340\277-\334\372\207/\332\342\277\204\233\326\232\024O\373?\024\000)%~\342\357?\310\037A\260a\276\005\300\022\355O|r\223\374?\031\\7{H\372\347?\307\310\201\274\227k\000@^5W\345!c\350\277\267Mpj\231\320\344?\367a\005\024\233\'\353\277\243~;\026\323\251\366?\377\325\246\020K\346\000@:\024\303\343\004\237\357?#\236\227\342\217\225\305?\225\021\336\233\244b\312\277\207\301@\334\210\320\372?\345\263\306\n\"a\343\277\373\243\253\022\214U\340?\265,\300\266\365\002\366\277\375\005=Uz\242\332\277\312~\331\314\242\r\331\277\031!\302; \014\342?\033\362$\233<@\267\277\244B\215\225W2\266\277\2109\220\024i\201\335?\366\202\022\374\351+\356?Nz\301dg^\363?Vl\222\266 N\005\300\201j\241WL\355\366?\'\271\'\034\324J\235?\277v\361&\357\003\360\277-Ew\362<\324\344\277\352=P]~_\350?\2249\326\253\022\024\345?\246C\306\326\252\273\360?\264Z\201J1|\372?\010\351\'\032N\217\336?\331\031\233\213\347\226\255\277\311\363\000\025\305X\363\277a\262r#;\177\343?\346\205\277\337<U\347\277\311\364OzF\017\304\277\037H\336>\346j\326\277\315J\t\036\3609\323?nz\031\204\215/\356\277`\372\341\245\371t\342\277`\372\341\245\371t\342\277\366\260\031\'\3177\352?\177\230\277\0373\235\337?\277;6P\035\203\362?F%\373jg*\307?\322\361\242\226\363\345\332\277\357#\353\272Im\355?\237\260\240\364F\243\345\277\306\010\251\266\250\236\345\277\232M/\350t\243\306??\331M\244\334\260\351?\037n\261\223\nS\346\277rfz\342\272V\320\277<\372\240#\325G\324?\nR\215\347Y\345\363?*\351h\234r\274\354\277n%<\355\213W\345?\310W`\2251x\360?\3160\241\306\026P\300?\326m\342\307d\257\277\277(,Y@\263\200\376?\360+\026C\002\022\366?\023\207\241\240\023\331\005\300v\267\363|E\362\372?\203\230\250\2021\371\362?-s~\035\"\340\340\277\360+\026C\002\022\366?~\262\263\245_\254\321\277g\306\313_\235\016\305?\352\324v\276\305.\362?\034i1\276\336\001\341\277\233\235\314\247\2205\366\277V\321`\351\243A\367?\221\303\245\225\030\245\321?O\207\030\334\250\234\340\277\377\2510\026?Q\343?\022\375\306\355Y\261\307?\203\230\250\2021\371\362?\375\005=Uz\242\332\277\r\035\204\367S\210\303\2771B*sv\201\372\277\232\222\361\206\340o\314?*\027p\307W\310\350\277\371T\3643\003|\365\277\022\214 %\301\272\330\277a\204\016\304\252<\363?\352=P]~_\350?\212\206\313\234`\342\364?a\277\311\232|\275\360\277\355\224\302\255\361\022\006\300\232\361 \222\252\213\316?\325MkU\024k\353\277\316uce\202\034\306?\265,\300\266\365\002\366\277\266\010\375\246\0256\000\300_\276J\302\177\241\276\277\353_\345\370\325\204\303\277\262Z\336~\334\262\356?>O\304Q\200\262\344\277\2639\321\226\215\256\353\277\374{\263\002\036\244\305\277>O\304Q\200\262\344\277`\023V\212\271\005\373?\324nx=co\356?\260\257\001\255\207\035\337\277\311\35643\307\t\350\277\346\002\225\206\254\336\332?}(\236$\260\210\335\277\320D\264k\317L\272?!\263y\313\331\246\367?e\022uL\337\033\000@\262\372g\204\213;\001\3008\000j\247\242\017\336\277\241P\221\037\231\324\356?\203\245\377\371r7\340\277\327\022\366\025\354|\345\277\034\244\246\375\006\360\346\277\032iH[\340\245\375?\210S\211\226\276\375\354\277^#\3602\223\364\324\277\276\337m\221\374\375\361\2770\3759\361\256\200\352?\322\361\242\226\363\345\332\277\256~\374\256\221;\334\277(\351\2563\034O\324\277-\334\372\207/\332\342\277\241\360wY\363\223\005@2+\311\003\272W\332?\256l\244\307\253%\360\277O\325\226y\336\354\260\277(\351\2563\034O\324\277l\265\324Z_\260\333\277\310\300\334\377>r\362?(\263\262\231l\373\240\277n\0260Q&L\253?L\021\\\227[\010\336?\342\311\306\270\363\355\356?\227%}o\260\204\323\277\347\2624;\273G\265\277G0\326\213\027\360\360\277\330\251y\253\336\202\343\277\026\354\317\350\033S\336\277\246q*6;\376\340?\'\271\'\034\324J\235?\213\372HO\033\366\323\277\244\213\222\215\024\350\343\277\352k\372S\2704\360?\354\300z\266\016\326\324\277\014\027u\334\334-\342?\352\324\323\362pe\346?\204\314\033\3758\226\304\277\351x\256\377\244\251\361\277N\343=\317tX\365?Lz\036\231\022\225\347?\243~;\026\323\251\366?\325MkU\024k\353\277\326\234\"4\235D\366?\022\375\306\355Y\261\307?\022B\211\214\305}\315?iDpJ\236\254\360\277\r\035\204\367S\210\303\277\001\315\34678\366\363?\200\033\352x\303\023\354\277\242\332`\t\237e\333?\014\351m\261\367!\346?\216\362L\253\266\\\321\277\223\241\274\240!N\270\277\347Ja=\026\013\376?%\3564\242\253\'\365\277G0\326\213\027\360\360\277\242/\2047J\320\353\277[\024\004f)\314\335\277\221\303\245\225\030\245\321?\204\310\217-:j\000\300=\346YZ\301R\201\277\346\205\277\337<U\347\277\312\332\347\"m%\321\277\316\373\310\005@\023\231?n\216\270W\231Q\347?\222\030&\370nF\366\277\246\262\256\220\332F\310\277]\366J\007\313&\002@\304\254\232`\336\206\355\277\370\377s\321\254\332\320?H\214\236J8u\361?\000\254\223\270?_\371\277\027\022\342\2446\027\243\277(\351\2563\034O\324\277\203\245\377\371r7\340\277\031\363\272\020;\000\346?E\365\032\265Eo\363?.\224\213\005q\344\343?q\004/\005=S\342\277n\216\270W\231Q\347?-\223\365\217r$\265\277\357\000\240!-M\371\277\304\356\372\307%\"\333?\341\345\204`\0051\270?\210\306\306J\030\251\333?\r H\266-\222\345??\253/\334\365\000\361\277,f\'\246\340\241\363?M\233q\030\013,\322?\034\244\246\375\006\360\346\277\306\240\362\317\300\347\371\277\244B\215\225W2\266\277r%\337\270\340 \361?\177\262\312BaP\376\277\352kW\210ck\344?\224\257LY\266\025\340\277L\021\\\227[\010\336?<\372\240#\325G\324?\316\031U\017\270\004\316?.\375\252;\323\247\361?\260\013\312k\250\242\357\277\364\310\366>\247\335\261?8\000j\247\242\017\336\277\021\037]\202\2207\373\277M\233q\030\013,\322?\370\0319]1\373\367?\300\036p\364p\367\341\277\245\310V\306\341\352\373\277\017\003\034\240z\236\320\277Y\226\353\251{S\361?\200\262m\016\266\031\352\277\377\312\347\002\300Bj?i\0217\035\177\274\305\277\241C#\013V\362\344?\352\324\323\362pe\346?\262\361a\024\317\270\354?l\265\324Z_\260\333\277\372&\220\324r9\345\277\277d+\336\037\221\356?r2\223d\315\225\362\277\204]\220w\264A\341?\324\344K\037\262\247\375\277\372&\220\324r9\345\277)\nv\204\301\300\357?\360[\366\370#\315\311?\177\230\005\267\334/\347?\352=P]~_\350?\355f\213\202*\000\374?\266\266\217\240\373\223\362?Dy\017zJ\244\344\277\223\241\274\240!N\270\277E\311\354\024\235\022\317?g\333\255H\347\037\367?\265\343]\212\215\026\264\277Lz\036\231\022\225\347?\244B\215\225W2\266\277\243P4\353\355\235\372?\230\235\206\020\347\242\376?[B\013\221\016\330\331\277\332\225 o|\363\301\277Lf\177\305\006s\356\277l\265\324Z_\260\333\277\233\371\224f\261\272\366?\344\222s\213)\312\330\277\325MkU\024k\353\277\224tK\353:\002\353?\267,I\360\034P\225\277\033u_\\\360g\255?(\215\240\335Q7\334\2771a\270\324Rm\377?}\204\254zz\240\325\277\370\377s\321\254\332\320?<!\275&\233\246\350\277Q\351\251\036\227\351\312\277\034i1\276\336\001\341\277\246q*6;\376\340?g\306\313_\235\016\305?\275\324\222pL8\310?\010\005X\010\2240\324?\364\317@\273\312N\247\277.\375\007p~\336\345?\241\025\034\340p\346\350?\223\030\311\303\303\017\342\277\177<\367`\022\030\357?\247<8\3436E\335\277\3160\241\306\026P\300?\033\\\332F\235\303\363?\357\n\303\303\t{\373\277\341\n\272\177\313\333\001\300\303\30094\352\250\346?\354\300z\266\016\326\324\277[\024\004f)\314\335\277\260\013\020\003R5\327\277\304;C\0314\301\240?.\224\213\005q\344\343?\"\024\016\2203\227\320?\304\371`i\335\374\330\277\304\356\372\307%\"\333?2+\311\003\272W\332??\236\330d\264\302\343?\2561\351\360\331\244\362?^<B\rA\020\320?\332n\352\331\210\030\221\277\303\2222\t\005\235\352?F%\373jg*\307?\032\000\314\360\322\253\373?Q\351\251\036\227\351\312\277\371r\336\344\301\264\366?\330\327\335\no\305\363\277\323M\261\354\275\375\322\277\177\230\005\267\334/\347?\031\\7{H\372\347?\372\202\373^\350\207\361\277E\307\023\212`c\367?\345\356\230~\365\205\375\277\351x\305\234\246M\356?_\276J\302\177\241\276\277`\372\341\245\371t\342\277\304W\275\311\334\256\344?\301\227nF\034}\320\277\367G\235\274\301=\350?\222R\353|\232\353\320?L?c\302@\024\332?r%\337\270\340 \361?\265\267\367k\365\021\241?\3753D\200_\256\326\277l\207\315/z\244\337\277\350\016\263\274\232\223\275\277I6\355Z #\267?\267#\355\226\230L\334\277D=D\240Z\322\372\277Q\270\341\274t\242\321\277?\236\330d\264\302\343?\224\242\365\341t\327\362?~\262\263\245_\254\321\277\372\353w\311\365\201\363\277\304\034\002\363\n.\327?,\317\243\020\356\233\365?-\223\365\217r$\265\277\257K\376\347\362\275\257\2779.q\322\207\033\332\2773\307\031n\222y\340\277\360W\375\342\266\304\370?<\024f\257Yh\373?\320\334\006ESg\360?\247<8\3436E\335\277{\023\002\323\017\n\363?\033u_\\\360g\255?\022\375\306\355Y\261\307?l\265\324Z_\260\333\277\307#v\222\271\224\345\277\304q%!\266\230\347\277[p\022\274\363\343\325\277-s~\035\"\340\340\277\352\324\323\362pe\346?\325{r\200\371v\347\277\265\343]\212\215\026\264\277\247\325\213,E\246\371\277\266,c\202J\314\341\277N\2656\244\217L\371?\037H\336>\346j\326\277\266\010\375\246\0256\000\300#\341\200\366\276\262\363?\346\205\034\024\350\213\373\277\232\361 \222\252\213\316?\\\236\031\347\330\357\321\277\3203z\257\334\352o?!\222&L\341\017\375\277\3319\022\031\262\333\311\277\347\341\344\322\010\021\374?FkK\313?\336\366\277*f\204\332\213\330\347?`c^\020\007o\344\277S+P\035\210\027\320\277\031H\230\247<\330\356\277\202\340t9\233%\346\2779\\x\375l\'\326\277\242\230\000\242W\312\355\277\010E6p\030\247\326?j\204Y\205\007\331\210?_V\007\231\3050\367?\222\013rL\202\321\364?h15\010\005\237\375\277O\302\215\033\321\212\346\277\246\367p/F\023\316\277\266\373\370\311\275\372\340\277p\311\320b\026\t\371?\320U?\373\242\023\005\300)8}\257\246\314\353?\214x\216D\214\353\262?w[+\276$m\372\277\301P\322\241\275\001\335\277i\326\247w\367L\321?\241\254\237uc\354\346?n%<\355\213W\345?\'\271\'\034\324J\235?\n(\010\362r@\342\277q\004/\005=S\342\277e\274\000\235\t\264\312\277\356\224\222\255\017\014\370?\233\215B\324\r\347\314?[\300zK\0226\336\277\207\005WT\232c\265\277\246q*6;\376\340?Mmj\355% \326?\362Y\035n\347\035\362?\232M/\350t\243\306?\350\341*j\262\243\363\277\243P4\353\355\235\372?\034\322\255(\354\373\342\277\367\264pR\323\367\005\300\310\230A$|\367\313\277j\t\265s\314+\363?\364\317@\273\312N\247\277\312~\331\314\242\r\331\277\203\245\377\371r7\340\277\373\336\303\035\t\r\362?\312~\331\314\242\r\331\277\031\337\033=/\336\354\277\260\257\001\255\207\035\337\277\332\316zf\007\014\013@\370\0319]1\373\367?\014\200\361F\352\'\344?\242\230\000\242W\312\355\277\330\251y\253\336\202\343\277mwJsBk\370\277\375\005=Uz\242\332\277O\036\371\245F\331\362\277\031\337\033=/\336\354\277E\3408\314\373]\301?\354\300z\266\016\326\324\2779\212\226\305S\327\376\277w]p\037\342\210\343\277\352\324v\276\305.\362?\210\"\325\240\342\300\323?\351JJ\240\024g\341\277\204p\r\247n~\314\277\263g\330\301r\272\347\277\372T\227\377WE\341\277\312\254\340\367\207\031\325\277\310W`\2251x\360?\260\303\375\264>v\374?O\036\371\245F\331\362\277eD*\263\364\031\371?\010\027/E3\233\332?\312\254\340\367\207\031\325\277\177j\376\213\367#\353?\014\027u\334\334-\342?\213z+\367c\014\005\300-\256\363\\J\316\346\277\013\310`\311\250\035\343\2772&C\225*\177\371?\235\'\234\221\226\306\362?\352kW\210ck\344?\304q%!\266\230\347\277\223\030\311\303\303\017\342\277l\207\315/z\244\337\277*\200\3541e\302\352\277\214\264\322\307E\356\360?\335\324\215[\307\322\336?\243~;\026\323\251\366??\007U\317\301\274\345?\353\332\342\r\350\277\307\277\027\022\342\2446\027\243\277F%\373jg*\307?6S{|~v\275?K\3652l$\311\367\277\244\213\222\215\024\350\343\277\372\275\023je?\343\277\342\'&Jq\371\263?\304\356\372\307%\"\333?\r\035\204\367S\210\303\277-\334\372\207/\332\342\2774\353\315U\002\221\363?\263g\330\301r\272\347\277`\372\341\245\371t\342\277\367\014(}\231O\342?\347\017\354\375\355\034\370?\031\\7{H\372\347?\363$=!\261u\304?\373\037\245\254S\214\315\277\033\322\n]\2272\367\277+s\225\272#\204\375?R\241:\234\330\363\333\277;\314\231\370\357;\330?fQ\336^\341\216\372\277?\331M\244\334\260\351?\200I\361\243\250\037\350\277qm\253oJM\344\277]\007P\272<W\354\277]\215\316\234\275,\000@\352\324v\276\305.\362?\204\314\033\3758\226\304\277^\016;\342[\004\324?{\327\275OV\007\265?r%\337\270\340 \361?\316R7[M\326\363\277\267\344\363\377\213\326\342?^<B\rA\020\320?\nQT\246\006\\\271\277\203\245\377\371r7\340\277\3319\022\031\262\333\311\277\244B\215\225W2\266\277^c\273D\262\245\370\277\260\013\020\003R5\327\277\247<8\3436E\335\277\241\347\024\265\213\332\354?\014\273f\206\022\026\352?\305\315J\024\202T\374?_\355\212.\2706\365?\244\213\222\215\024\350\343\277n\021\235\031\2005\354\277E\311\354\024\235\022\317?U\336\024\225\220\266\370\277r\216[#\356\032\363?\272\377\332\273\250\t\342\277\347h\235\"\211\365\360\277\202\000\354\253\353i\272\277\242\230\000\242W\312\355\277\335\275\322\347@\022\325?M+g\272\211\273\374\277\337\270Ly\2619\364?n\311-\227\301?\355?\271\304\203\021f~\004\300\3066\r\0269\341\365\277\034\324\264\000_\313\350\277\n_A\223FZ\365\277w(r5\327\241\346\277\372\275\023je?\343\277\326\327\227s\3052\374?9\\x\375l\'\326\277\006\247\rJ\260\206\330\277\306\010\251\266\250\236\345\277\342\301\276 \354\200\333\277T\014\326(\314/\375?j\2408\t\2771\361?(\351\2563\034O\324\277\004\3258[2\307q\277\241C#\013V\362\344?\305d\316\251tZ\372?\2619\027.7A\323\277\315J\t\036\3609\323?\337\346S\244\226E\360?\326m\342\307d\257\277\277\341\363\007P\203\272\361\2772x\232\006\327\273\251\277\013\215H\276+f\361\277[\024\004f)\314\335\277^\221|\330\355\036\375?xg\234T\323\362\302?u\021\343\260)\310\323\277\366?\345\222\t\323\341?\374{\263\002\036\244\305\277{\327\275OV\007\265?z\277\233}\013\021\334\277\304q%!\266\230\347\277\006\247\rJ\260\206\330\277-\n_\347\277\034\363\277\224\242R\026 \016\347?\325MkU\024k\353\277p\004\2149\350\211\366\277\250\007\234X\337i\200?\331g\256\300\375O\341\277\007\215_[-\n\356?vNw\0228\370\370?\324\234\177hH{\352?\230-\240\006g\314\365\277`\221e;\354z\340\277\306\010\251\266\250\236\345\277Y\226\353\251{S\361?\370\202\265\307>\365\371?\007$\343\360\037\020\354?\242/\2047J\320\353\277(\351\2563\034O\324\277\304kC\242\017\010\000\300mwJsBk\370\277\000c\027\207\351\301\211\277\037\255\027p\245\023\314?=\024\254F\003\373\362\277\277\244\303\3123\017\371?\277v\361&\357\003\360\277\221S>\003\354\375\347\277\320\334\006ESg\360?9\\x\375l\'\326\277\263g\330\301r\272\347\277\022B\211\214\305}\315?p`T\370\010\017\367?\346\356;JJO\351\277M+\n\206\336\204\350\277w\202\265\363\030\211\272\277r%\337\270\340 \361?\305\261\2737@\034-\277\257K\376\347\362\275\257\277\362Y\035n\347\035\362?\336\303\352\305Kr\301?{\341T`\323r\345\277,\317\243\020\356\233\365?\370\377s\321\254\332\320?r2\223d\315\225\362\277(\027\266^\001[\320\277\267,I\360\034P\225\277\232\222\361\206\340o\314?\033\305V\261\252\275\365?n%\366U\342\304\335?\342\'&Jq\371\263?\022\375\306\355Y\261\307?%3\356\374\330T\001\300Y\377g\024\211M\363?6F\217\217\007\302\330?\244\213\222\215\024\350\343\277\032\227O\206\305\261\371?\265\376[We\300\345\277\325\312\206\223-\207\346?>2\257\377\002e\003\300oSC\030qc\341?\313\351tY\226I\372?\304\356@_\317\264\342?\037n\261\223\nS\346\277\352np\307\246$\363\277\331\370\215\276\022\223\342?\232\313\323\322uA\362\277j\t\265s\314+\363?\221X\321:\222\024\247?\352\231^\263Hw\340?\367\312\201~\250!\355\277\232\222\361\206\340o\314?a\204\016\304\252<\363?\\\204P\010=\260\274?E\307\023\212`c\367?,s\333Q\315\026\365\277\341\345\204`\0051\270?\246C\306\326\252\273\360?8\000j\247\242\017\336\277.\247\0105+!\317\277\245\347\375\027\2126\360\277\033\322\n]\2272\367\277\253\020\226q\341\r\370\277\350\016\263\274\232\223\275\277\316uce\202\034\306?c\363`P\301\231\330\277`\221e;\354z\340\277\335\324\215[\307\322\336?\342\'&Jq\371\263?\304\034\002\363\n.\327?\036bF\226\277T\311\277\370\320\261(\370N\363\277\033u_\\\360g\255??\007\370\232\026\206\361?s+K\010\003\262\306\277\201<\232,g\341\372?\263\320T,\200\264\351\277\242\230\000\242W\312\355\277-\334\372\207/\332\342\277nz\031\204\215/\356\277\304\365\177(\3622\002\300\343.p\306\224j\251\277\312~\331\314\242\r\331\277\306\315\220\253+\347\363\277\200\033\352x\303\023\354\277\034\244\246\375\006\360\346\277{\023\002\323\017\n\363?\2619\027.7A\323\277\221S>\003\354\375\347\277\006\247\rJ\260\206\330\277\345\030O\242U\326\000\300\320\351\272\360?\334\361\277\253\020\226q\341\r\370\277n%\366U\342\304\335?\315J\t\036\3609\323?Lf\177\305\006s\356\277\006\325\024u\225\222\324\277\367u^P\375\266\334?\330J$\t\267h\361\277\246\367p/F\023\316\277\230\235\206\020\347\242\376?\352\242\240\244k\216\342\277n\311-\227\301?\355?=\346YZ\301R\201\277\330\327\335\no\305\363\277(\215\240\335Q7\334\277Q\351\251\036\227\351\312\277\352L\310xs\347\377\277\264\361\004\340#\202\370?\251\247\323o*\201\376?_\317W\316K\317\360?\277d+\336\037\221\356?]\277\3407~a\355?-\241\342|\262\"\361\277O\325\226y\336\354\260\277\324<f\242\242:\001@r\250\006\035E\277\235\277\037v\345i\313v\322\277G0\326\213\027\360\360\277\354\356\201\341\363\341\320\277\226m\354\361nz\302\277\352~\324\267\035\250\317\277\275\324\222pL8\310?>4\306\204\250\010\263\277\254\232e[\347\236\364?\241\233\230\310\276]\360\277\213]\020;\253\001\364?\367u^P\375\266\334?\3319\022\031\262\333\311\277qm\253oJM\344\277\3753D\200_\256\326\277.\321d\310\262\t\225?\276\337m\221\374\375\361\277\374\300u\241\211p\313\277\004\3258[2\307q\277\221S>\003\354\375\347\277b}P>\303A\372?;\314\231\370\357;\330?\353\332\342\r\350\277\307\277\341\345\204`\0051\270?j\2408\t\2771\361?\325a\304\221v\372\334?\232\313\323\322uA\362\277\'\271\'\034\324J\235?\367\243e{\342\302\330?(\263\262\231l\373\240\277\000\254\223\270?_\371\277^<B\rA\020\320?\033\027\304\267\304_\003\300\321`S\004\3458\345\277\010>KH\371\371\356\277`c^\020\007o\344\277\352~\324\267\035\250\317\277\353\332\342\r\350\277\307\277\266,c\202J\314\341\277\226\225S\2022\273\254\277T\010(\355\233=\000@\242\010h4\204q\327?\242\010h4\204q\327?\257K\376\347\362\275\257\277\022\375\306\355Y\261\307?\330\327\335\no\305\363\277xg\234T\323\362\302?\245\376\257G\322W\000\3004b\212SI\244\000\3008\242\303T\005\230\261\277\225\352\247\006\261\207\231\277\277;6P\035\203\362?\310\300\334\377>r\362?\246\262\256\220\332F\310\277M\233q\030\013,\322?\371\231\n\303\333\337\005@\246C\306\326\252\273\360?\021\241\270\227\217\231\317?\347\263#?\315\227\367\277I6\355Z #\267?\232bJZ\251,\304?\030\227\254\272p\350\355?\027\032\327\023\001_\332\277\177j\376\213\367#\353? \036b\253[\376\323?\235\276\037\'\211\314\360?\243\347\267\200\340\243\370?\244\213\222\215\024\350\343\277+\n\031P\026\212\373?`c^\020\007o\344\277\222\013rL\202\321\364?E\3408\314\373]\301?\242]\213b/\334\347\277n%\366U\342\304\335?\2426o_i}\323?^\3403\267v\370\327?\031\363\272\020;\000\346?\341\363\007P\203\272\361\277(\215\240\335Q7\334\277\223\030\311\303\303\017\342\277!\3272[5K\355\277\337\270Ly\2619\364?\320D\264k\317L\272?\320D\264k\317L\272?\224\335\260\270FX\360\277*\027p\307W\310\350\277\225g\335\326\367\037\341?\347\302\351\370\320\331\002\300\031!\302; \014\342?\204\314\033\3758\226\304\277\242\010h4\204q\327?#W\261\014\271!\367\277\330\251y\253\336\202\343\277O\036\371\245F\331\362\277\350=\363(\323(\364?*\027p\307W\310\350\277\242\371\241/\310\370\244?o\201\004\254\254\334\325?Y\241\355pm7\263\277w[+\276$m\372\277\263\005u \377\206\376?v\356\272\200=\356\003@\3263\246\311\217J\364?\377\236\337\014S\352\367?\216\233g\356\000a\337\277=pt\005$\200\363?\373uG\263\373\022\360?!\222&L\341\017\375\277\2639\321\226\215\256\353\277\373\243\253\022\214U\340?\203\245\377\371r7\340\277\351\246\314\307\213Y\352?M\360\253\343\267:\377?\214\035O2S\350\362?\304W\275\311\334\256\344?n\216\270W\231Q\347?\343>\010\325:H\237?>\346G\347r\270\342\277>}\313|e\276\340\277\372\353w\311\365\201\363\277\0063\255\210\353M\326?\204\314\033\3758\226\304\277FX\210\260\010\353\263?t\025\370b\307\234\325\277o\201\004\254\254\334\325?\275H\352\373\t\370\363\277\014\351m\261\367!\346?bI\366\270-\205\341?\277v\361&\357\003\360\277\351\035\026+\213\370\360\277L\343\232\003 \217\351?\323\314\362\363\356\235\366\277-\223\365\217r$\265\277\325\035\240\211\026\025\000@\2420\360.\345\323\374\277c\346\210i\227\345\300\277o\201\004\254\254\334\325?n`\261,\264E\353?\267,I\360\034P\225\277Y\226\353\251{S\361?i2\252\001\3179\357?\255Vy\n\332\340\256\277P\021E\372Yd\361?>\346G\347r\270\342\277KzL\340@)\365?\304;C\0314\301\240?\356\313Y\261\007\010\001@]\277\3407~a\355?\221S>\003\354\375\347\277\350\016\263\274\232\223\275\277\216\311n\031\346l\333\277Mmj\355% \326?Y\226\353\251{S\361?^<B\rA\020\320?\331\370\215\276\022\223\342??\253/\334\365\000\361\277\203\245\377\371r7\340\277\033\000\022\210|>\363\277!\222&L\341\017\375\277?\007\370\232\026\206\361?\257K\376\347\362\275\257\277\311\364OzF\017\304\277=\331\360o1z\365?E\311\354\024\235\022\317?O\276q\221\251\225\267?h\177\345\211\306\232\366\277\272\177\0164\255*\001\3006S{|~v\275?O\036\371\245F\331\362\277\267\216=_V\346\353?\360+\026C\002\022\366?\204p\r\247n~\314\277#J\375`\314\254\365?\276\337m\221\374\375\361\277\313\247\300\027\3037\346?\3319\022\031\262\333\311\277\344\222s\213)\312\330\277\247\016\275\346\244^\300\2778\000j\247\242\017\336\277\031\305\263\345U\364\351?r\214\371\277\334Z\353\277\177\323z\366\004\036\355?\222F\347\213\252\277\372?\265k(\271\346\360\362\277\241\254\237uc\354\346?\221S>\003\354\375\347\277?p\3219\317\266\347?.+\017\233c\352\341?\352=P]~_\350?4a\376k\374\377\366\277$?h\327\305y\303?Nz\301dg^\363?\325{r\200\371v\347\277\222F\347\213\252\277\372?\037\374*\250\265\014\367\277\265\376[We\300\345\277]Vd\315pg\353?-\n_\347\277\034\363\277\315$00h\312\367\277\020\2059\271tY\361\277\324\234\177hH{\352?\244B\215\225W2\266\277.\224\213\005q\344\343?\226m\354\361nz\302\277\364\310\366>\247\335\261?\310W`\2251x\360?\352kW\210ck\344?\326\324r4\223j\377?.+\017\233c\352\341?\031\r#h\024\352\350\277L\324\216g\272\203\257?\214\0130\337YC\351?u\306\316\367\365\314\367\277Q\t\304x\213\031\334\277\350\341*j\262\243\363\277\354\356\201\341\363\341\320\277\n\310\275\375ST\367\277Nz\301dg^\363?j\2408\t\2771\361?zt\235g\260n\313?\367G\235\274\301=\350?\013\215H\276+f\361\277\366\202\022\374\351+\356?\334\\>#\347!\374?\320E\203\257`a\362?\031\r#h\024\352\350\277\244\213\222\215\024\350\343\277\326\234\"4\235D\366?\275\217\320\321\340k\302?[\232\337|U\330\005\300\006\325\024u\225\222\324\277\337Ze\260\330l\000\3004TJ\300\017\213\365?Lz\036\231\022\225\347?^(\000n\340$\373?.\224\213\005q\344\343?\251\247\323o*\201\376?\375\005=Uz\242\332\277\222F\347\213\252\277\372?(\351\2563\034O\324\277g\333\255H\347\037\367?\'\271\'\034\324J\235?\221\274\272m\371\367\351\277\304\2045T\350w\367?\t\205$V\201\\\361\277\362\024\007\337\016\272\001\300\177\230\005\267\334/\347?bI\366\270-\205\341?\031\r#h\024\352\350\277|v\3505\345\341\331?(\263\262\231l\373\240\277\275\r/%8w\366?<\346\244\033\036\357\366\277\3243\003\376:\201\350?xg\234T\323\362\302?\204\314\033\3758\226\304\277L\250%\304\367\240\343?>4\306\204\250\010\263\277\225\352\247\006\261\207\231\277\224\335\260\270FX\360\277\204\314\033\3758\226\304\277^G\371G\235\327\341\277\246Ll\225\355\020\347?x\356a\216v\214\344\277p\367\327\215\373\024\365?\225\021\336\233\244b\312\277\221S>\003\354\375\347\277\312~\331\314\242\r\331\277\275\r/%8w\366?\3134\343RmZ\267\277\334\363\301\270\331\'\372?J\315kO\247\363\366?R\317A\307\275\377\327\277\204p\r\247n~\314\2777_\272\366r\304\346\277\267{w\225~\334\340?\024\000)%~\342\357?\367\321l\246\307\316\324?\017\003\034\240z\236\320\277r2\223d\315\225\362\277\031\337\033=/\336\354\277P?\251Y\352\246\341?\264\210\210u\026\210\366?\304\356\372\307%\"\333?3Y\320.\237c\326?[\024\004f)\314\335\277\304q%!\266\230\347\277!\263y\313\331\246\367?\223\352\301\230\336\003\346\277\375\005=Uz\242\332\277\370\260\274\362#\001\366?\360=j\357\253\333\224?\245\347\375\027\2126\360\27766\373;\253\205\313\277h15\010\005\237\375\277g\013\216\376\010\333\312?\275\244\262\272*}\364?\302\025\027\313\353\200\357\277{\327\275OV\007\265?\033u_\\\360g\255??\007\370\232\026\206\361?\332n\352\331\210\030\221\277\024n\267,n\332\361?p_\033\267\265\205\274\277L\031\360\335\237\334\324\277*\317\000E\231\322\351?]Vd\315pg\353?\224\257LY\266\025\340\277@\252AG\265k\375\277\222t\356\266\217\313\366?\367\370\210\251\215-\351\277\035\363]\334\217\311\361?\337\346S\244\226E\360?#\341\200\366\276\262\363?\221S>\003\354\375\347\277\014\256\370q\3173\340?\324\344K\037\262\247\375\277|?\332\035\"4\342?\306\010\251\266\250\236\345\277\325a\304\221v\372\334?\372\207<\242\034\007\357?\200I\361\243\250\037\350\277\251\247\323o*\201\376?\033\362$\233<@\267\277\263\327?T\237a\321?e\177\237\362\034\010\377?*\027p\307W\310\350\277\ts=\233\375\262\322?g\307\216({\262\304?\0131\3353\266\027\345\277\313\302\366H\266\035\364?<\372\240#\325G\324?\304W\275\311\334\256\344?\034\244\246\375\006\360\346\277\037H\336>\346j\326\277]\215\316\234\275,\000@\2743\302{\026T\312?\031\212\370\016\204s\334?=\346YZ\301R\201\277\243\372}e\3122\340\277\007$\343\360\037\020\354?\277d+\336\037\221\356??\253/\334\365\000\361\277r2\223d\315\225\362\277\207*\275F\226\312\374?\030.0Pc\356\353?>\346G\347r\270\342\2777\363\265\373\265\232\354\277r2\223d\315\225\362\277\376\331TL{\330\375?\356\224\222\255\017\014\370?\361f\330\213\020u\324\277\263g5\366\035\361\373\277\204\314\033\3758\226\304\277f\272Z\311\356\210\374\277\020\251,l\226\310\367?\351\206W\326\037l\311\277\013\366\304(9`\363\277\247j?\016\034Q\331\277\352\324\323\362pe\346?\200\262m\016\266\031\352\277\275b\036\010\257\275\370\277*\200\3541e\302\352\277\203\245\377\371r7\340\277E\365\032\265Eo\363?\370\0319]1\373\367?\332\225 o|\363\301\277U\260\260<\325\333\241\277G\364Kq\264Z\273?\275\244\262\272*}\364?\357\n\303\303\t{\373\277n\3674\302\246K\351?p2M\315#\003\373?\301\354\316\334(\242\255\277\034i1\276\336\001\341\277\233n\345\376\177\332\322?\006\247\rJ\260\206\330\277\326m\342\307d\257\277\277=\\}~\251\205\372\277\263\2518)\272U\325?\037v\345i\313v\322\277\360\0264Z\270\000\304?\356\334\273\230$o\377\277\357\272%\004\356\350\313??5\\\372\246\310\341?:\024\303\343\004\237\357?}V\245O\225\224\331\277\362\375T\257\306\230\361\277\322\361\242\226\363\345\332\277\256\230\244)\027\r\354?\3753D\200_\256\326\277\244\305VZ\205\226\351?q\233\262\232/Y\340\277\010\027/E3\233\332?\030v\374\006\315\032\377\277\r\035\204\367S\210\303\277q\233\262\232/Y\340\277\220/5\\b\236\n@b\212z\023\315\315\310\277\216\311n\031\346l\333\277\207\301@\334\210\320\372?\013\215H\276+f\361\277\363$=!\261u\304?v*4\270\222y\362?\352~\324\267\035\250\317\277\360+\026C\002\022\366?\364\317@\273\312N\247\277\244\271\366\354\244*\364\277b\212z\023\315\315\310\277\021kA\272\014\021\374?\265\376[We\300\345\277\001\315\34678\366\363?\265M\0236\356\231\360?K\265\223\330:\203\355?:L\257\n\370\"\306\277\344\222s\213)\312\330\2774TJ\300\017\213\365?\024)\241\235\225v\001\300\372T\227\377WE\341\277\272\257\031L\024\003\362\277\026\354\317\350\033S\336\277\244B\215\225W2\266\277)\nv\204\301\300\357?8\000j\247\242\017\336\277\265\343]\212\215\026\264\277\244B\215\225W2\266\277g\306\313_\235\016\305?\364\310\366>\247\335\261?7\363\265\373\265\232\354\277\3243\003\376:\201\350?\206 \306\227L\016\236?V\321`\351\243A\367?\026\354\317\350\033S\336\277\270S\177\205\020+\306\277\370\377s\321\254\332\320?\t$\206\274t\331\367?\030.0Pc\356\353?\302\025\027\313\353\200\357\277sq6G\320\"\351\277\\\236\031\347\330\357\321\277\223\241\274\240!N\270\277\201\245\\.\036n\364\277\327@Zu|\277\365\277\224\261F\331\335\337\364?\363\220\362\033\336\201\000\300{\252\205h\002\020\361?n%<\355\213W\345?\331\014\370\302\272\250\371?(\027\266^\001[\320\277P\021E\372Yd\361?\241\254Y\336\271Y\337?\235\'\234\221\226\306\362?8\000j\247\242\017\336\277r2\223d\315\225\362\277L\021\242.\005\233\345?V\321`\351\243A\367?a\204\016\304\252<\363?\010>KH\371\371\356\277\224\335\260\270FX\360\277\305d\316\251tZ\372?\'\271\'\034\324J\235?\201\245\\.\036n\364\277\302\025\027\313\353\200\357\277\357c\225\026\n6\321\277\036\034\010`\002\343\270\277c\346\210i\227\345\300\277\207\2239\261\243\304\376??\276<\035\\\304\306\277\211\357G\007n\334\366?\367a\005\024\233\'\353\277\177\323z\366\004\036\355?\336\353\331\022&\036\321?E^\227\037Si\365?\r\035\204\367S\210\303\277*\317\000E\231\322\351?\024\000)%~\342\357?\204\306\014\342\301;\343?\203\245\377\371r7\340\277\003\373\355b\035\002\360?%\034<\315\2203\361\277\026\354\317\350\033S\336\277\017\344\241\253\276\266\375?g\013\216\376\010\333\312?\320\000m \210\375\001\300g(\243\213\236+\343\277\343dl`D\276\334\277\242\230\000\242W\312\355\277`c^\020\007o\344\277\331\370\215\276\022\223\342?\331\217\021T\005\231\340?\202\340t9\233%\346\277-\241?\354\342\016\347\277\223\241\274\240!N\270\277\3203z\257\334\352o?\022B\211\214\305}\315?\005q\021\260\0003\245\277\004\3258[2\307q\2774\353\315U\002\221\363?[1\330\330;\014\377?^\016;\342[\004\324?M\360\253\343\267:\377?\330@\375@\321\210\341\277\262\210\345\251\301\276\352?\364i\262\212\242\304\361?\024n\267,n\332\361?\177\230\277\0373\235\337?K\036\020CH}\357?M\345T\227;\252\362?\322\215\237\321^\206\253\277-\n_\347\277\034\363\277\277d+\336\037\221\356?O\025\226\001\337\037\n@\346\2463I\334\246\336\277\244B\215\225W2\266\277O\325\226y\336\354\260\277-Ew\362<\324\344\277\264\037\014\013\t\216\364?\014\351\020}L\353\361?\263\232r$\376\334\242?\315J\t\036\3609\323?\346\301\357}\357\300\344\277\244\213\222\215\024\350\343\277\361}\203I\034\264\003\300\232M/\350t\243\306?\310\260s \306\323\316\277\014\273f\206\022\026\352?\020\251,l\226\310\367?l\207\315/z\244\337\277p_\033\267\265\205\274\277\263\232r$\376\334\242?\277;6P\035\203\362?\032\322\304\305\355\237\377?b\212z\023\315\315\310\277\027\325`\371\203\002\270\277\177\262\312BaP\376\277\360[\366\370#\315\311?L\343\232\003 \217\351?\241\254Y\336\271Y\337?s+K\010\003\262\306\277P?\251Y\352\246\341?9.q\322\207\033\332\277\3753D\200_\256\326\277\236\243\343v\231h\274?t\302\230-\324\212\356?v=$\301 \301\343\277\362\375T\257\306\230\361\277\375aK\253D\272\322\277(\351\2563\034O\324\277X:#\353Z\316\360\277\026\354\317\350\033S\336\277\362\375T\257\306\230\361\277>4\306\204\250\010\263\277\367\336 R\264C\346?\\\236\031\347\330\357\321\277\204p\r\247n~\314\277\266\037i?\264\304\350?r%\337\270\340 \361?\177\230\005\267\334/\347?2\322\236\206\025\231\355\277\312\332\347\"m%\321\277=\346YZ\301R\201\277\213\301\206s2c\362\2772\217\277\3777y\373?\r\035\204\367S\210\303\277\345\024\225m~\030\001\300?\007U\317\301\274\345?\'\271\'\034\324J\235?\305d\316\251tZ\372?(\351\2563\034O\324\277j\277\307\265s\023\340?\223\332IX.y\375?\244B\215\225W2\266\277\016\262\354D\251\270\004@\310\300\334\377>r\362?Vh\344~\226G\365?\216\233g\356\000a\337\277L\021\242.\005\233\345?y\254^\363>\277\310?\367\321l\246\307\316\324?F%\373jg*\307?\306\204.\177\303\372\261\277`\314\332z\024i\346\277\362\375T\257\306\230\361\277=\346YZ\301R\201\277\305\237\211\200F\333\367\277\272\367\334M\327^\343\277e\026#\210\017\016\375?\302\021\340\344sC\302?;*B\007\315\321\373?2\306)\317\204>\000\300\200\033\352x\303\023\354\277(\351\2563\034O\324\277F\231R\366$\352\362\277)8}\257\246\314\353?\232\361 \222\252\213\316?D{\317\256)\224\320\277\031\305\263\345U\364\351?\320\334\006ESg\360?\360\302\231\330\364\027\364?\324\344K\037\262\247\375\277E\375\223\310\2261\376\277\356\375\016\030\035\006\372?\244\213\222\215\024\350\343\277p\233\017\317\332\217\364\277\033\305V\261\252\275\365?\014\273f\206\022\026\352?\200\256\031@\344\006\340?>4\306\204\250\010\263\2776\274jzg\027\004\300\303\2222\t\005\235\352?(\351\2563\034O\324\277\221X\321:\222\024\247?r%\337\270\340 \361?\266\266\354\324\246\312\346?\212\223\177HMW\366\277\344\222s\213)\312\330\277An%\016\363\350\365\277\323M\261\354\275\375\322\277L\324\216g\272\203\257?\273\300\250\305\034q\311?c\025\037\362\022\272\004\3008\000j\247\242\017\336\277\210\"\325\240\342\300\323?\014\351\020}L\353\361?-\256\363\\J\316\346\277\357\241FY\374\200\371\277\270S\177\205\020+\306\277\263\2518)\272U\325?\341O\320\016\244?\362?\367\321l\246\307\316\324?y\354\375*\266\362\366\277`\221e;\354z\340\277>}\313|e\276\340\277?\276<\035\\\304\306\277\330@\375@\321\210\341\277\315J\t\036\3609\323?\322\361\242\226\363\345\332\277\245\347\375\027\2126\360\277\326m\342\307d\257\277\277\3319\022\031\262\333\311\277\364\310\366>\247\335\261?\224\335\307UH\374\354?\362\360\240\003\332#\360?Y\240\352)\332\205\376?\324\005\374\322Uu\354?\346\205\277\337<U\347\277s\375\352\314\362\000\312\277\034i1\276\336\001\341\277%\262\252\207H\222\277?\246C\306\326\252\273\360?Bk\0054\226K\377?w\237\273\313\204\027\000@-\241\342|\262\"\361\277\224\335\307UH\374\354?\277v\361&\357\003\360\277\354*\255\233\263\230\304\277S+P\035\210\027\320\277\264\037\014\013\t\216\364?\305d\316\251tZ\372?\177\230\277\0373\235\337?4{\356\205O.\321\277\243~;\026\323\251\366?>\346G\347r\270\342\277\346^\243\334v\366\322?\034\227\225\035oD\361\277\360[\366\370#\315\311?\316uce\202\034\306?`\221e;\354z\340\277?\331M\244\334\260\351?Is3q\363\347\337\277#\236\227\342\217\225\305?+\256P\221\365\004\373\277_\277\203\003\323*\371??\236\330d\264\302\343?h-\033O\001\302\004\300]\007P\272<W\354\277\335\275\322\347@\022\325?*\200\3541e\302\352\277z\321/KeR\310\277\254\374\303\342\005\007\255?,\317\243\020\356\233\365?\364\310\366>\247\335\261?>}\313|e\276\340\277)\nv\204\301\300\357?\204\314\033\3758\226\304\277\177\357&\261\001\237\361?`\372\341\245\371t\342\277\3247\010g{\037\360?\0131\3353\266\027\345\277\2561\351\360\331\244\362?\244B\215\225W2\266\277`\314\332z\024i\346\277n%\366U\342\304\335?\022\375\306\355Y\261\307?\221X\321:\222\024\247?\355f\213\202*\000\374?\332\026*\353\017`\252\277\303\2222\t\005\235\352?R\317A\307\275\377\327\277\363\275\'\0211\377\344\277\346\205\277\337<U\347\277\362\206UU;\025\266?\010\351\'\032N\217\336?\324\226q\311A\263\342\277$\342Mh\234\n\000\300\201\323\035\302Y\347\370?\370\275p\236\020v\367\277\277\322\271\345\017\211\360?;\314\231\370\357;\330?\326m\342\307d\257\277\277\326@\024\336\322,\376?\316\027|\204{U\366?/\003\027\213\3658\307\277\351JJ\240\024g\341\277Mmj\355% \326?\246\273\321r\"\253\343?\235\031_9\302\317\260?<\372\240#\325G\324?\031!\302; \014\342?\246C\306\326\252\273\360?\016\262\354D\251\270\004@\236+\355\230\033\202\013@\330\205\023\320\251\354\001\300\0175\271Aey\374\277\010\325\316\335\353\377\354\277\\(]\242\213[\357?\244\213\222\215\024\350\343\277u\216:\267o\t\365?O\036\371\245F\331\362\277.\375\007p~\336\345?\'\271\'\034\324J\235?\367\321l\246\307\316\324?#\341\200\366\276\262\363?\242\230\000\242W\312\355\277>\267\000F\\0\251?\r\246\005\301\220\253\372\277\364\317@\273\312N\247\277\346\002\225\206\254\336\332?[\024\004f)\314\335\277\203\230\250\2021\371\362?2\217\277\3777y\373?\0131\3353\266\027\345\277\277v\361&\357\003\360\277G0\326\213\027\360\360\277\246q*6;\376\340?-\241\342|\262\"\361\277\343.p\306\224j\251\277\031\r#h\024\352\350\277?5\\\372\246\310\341?n\311-\227\301?\355?]\277\3407~a\355?\023\207\241\240\023\331\005\300\350\016\263\274\232\223\275\277\017.\233\323lv\267\277n\216\270W\231Q\347?%x\004\214\261\270\361?!\205r\240\364\232\373?\264\037\014\013\t\216\364?\013\215H\276+f\361\277\273\255r\223=m\001@\276\337m\221\374\375\361\277\241\275\031%7\252\321\2771\030b\376\305\343\336\277!\263y\313\331\246\367?\221d\243\304\031\321\375?\354\356\201\341\363\341\320\277c\346\210i\227\345\300\277\305)YjLl\364?ZVB\023\267E\347\277a\355\347bcm\351?g\013\216\376\010\333\312?7\363\265\373\265\232\354\277\304\205\304\364\301\272\340?~\262\263\245_\254\321\277\372&\022B\204^\304\277S\375H\362\242\013\324\277s\317<\2628\232\316\277\234\246\350\n\2660\274\277<\302>@\351X\005@\376Nr\331\331\233\320\277\352\002\333\035Vq\342?\303\332\376\277n\311\375\277\335\217\313\274[\006\331?\204\314\033\3758\226\304\277\377\236\337\014S\352\367?\2420\360.\345\323\374\277cA\004\013t\237\262?\034b\317h\272r\347\277\273\300\250\305\034q\311?\010>KH\371\371\356\277\346)\261\211r=\357\277\355\224\302\255\361\022\006\300\3753D\200_\256\326\277[p\022\274\363\343\325\277\335\275\322\347@\022\325?\372&\220\324r9\345\277\322\215\237\321^\206\253\277h\177\345\211\306\232\366\277\326m\342\307d\257\277\277#\341\200\366\276\262\363?\242\230\000\242W\312\355\277^\236\323O/]\352\2774TJ\300\017\213\365?\350\016\263\274\232\223\275\277\256l\244\307\253%\360\277\370&\355\010\036p\371\277\326m\342\307d\257\277\277\204]\220w\264A\341?\326m\342\307d\257\277\277-\223\365\217r$\265\277\3263\246\311\217J\364?\316\373\310\005@\023\231?[p\022\274\363\343\325\277\362a\002\310\203\263\365\277E^\227\037Si\365?\223\030\311\303\303\017\342\277\325MkU\024k\353\277$\354\372o\302\330\345\277\324nx=co\356?O\036\371\245F\331\362\277\203\245\377\371r7\340\277O\036\371\245F\331\362\277L\250%\304\367\240\343?\330\205\023\320\251\354\001\3007\261\324i\271\306\324?\331\235Q\361\336K\352\277>\346G\347r\270\342\277\n_A\223FZ\365\277\304q%!\266\230\347\277\021\241\270\227\217\231\317?%x\004\214\261\270\361??\331M\244\334\260\351?<\372\240#\325G\324?2\370;jEs\375?-\241\342|\262\"\361\2778\000j\247\242\017\336\277\360[\366\370#\315\311?\265\343]\212\215\026\264\277\221\225\236j3\231\325?{\252\205h\002\020\361?-\n_\347\277\034\363\277i\031IK\372\244\375?\367u\244\347\246I\344?L?c\302@\024\332?\177\230\005\267\334/\347?<\372\240#\325G\324?\033\362$\233<@\267\277L\205\302@6\267\362?\307\237,L\233\244\343\277\341\345\204`\0051\270?[p\022\274\363\343\325\277\373\037\245\254S\214\315\277I6\355Z #\267?a\277\311\232|\275\360\2778\000j\247\242\017\336\277n\0260Q&L\253?\320E\203\257`a\362?E\365\032\265Eo\363?]\277\3407~a\355?\352k\372S\2704\360?\346\3004\037eC\355\277<(\250N\272S\320?\263{1\376\324I\331?O\302\215\033\321\212\346\277b\212z\023\315\315\310\277\236\243\343v\231h\274?-\n_\347\277\034\363\277K\265\223\330:\203\355?\026\354\317\350\033S\336\277<\270\235\3608\343\372\277\021\241\270\227\217\231\317?\244B\215\225W2\266\277\3753D\200_\256\326\277B\212\177(R3\322\277\304\034\002\363\n.\327?\311.t\022\315R\262?\022B\211\214\305}\315?\224\335\307UH\374\354?\031H\230\247<\330\356\277\362\360\240\003\332#\360?iDpJ\236\254\360\277_\250t\237\337\322\004\3008\000j\247\242\017\336\277\304W\275\311\334\256\344?=pt\005$\200\363?\224\242R\026 \016\347?\375aK\253D\272\322\277\274\032\343\320$\354\367\277\350\016\263\274\232\223\275\277\275H\352\373\t\370\363\277o\312\217\334\033\203\361?\017\003\034\240z\236\320\277\322\361\242\226\363\345\332\277.\375\252;\323\247\361?\316\027|\204{U\366?G0\326\213\027\360\360\277;0C\214\2659\361?\034\230\366{^\205\004\300\342\017\336\301\330c\302\277,s\333Q\315\026\365\277\031\363\272\020;\000\346?\304q%!\266\230\347\277\263{1\376\324I\331?N\343=\317tX\365?\247<8\3436E\335\277\036bF\226\277T\311\277\357\266\245?}\315\370\277\250\275\353\312\237^\360?\032.\323\033\270\267\367?h\177\345\211\306\232\366\277>\346G\347r\270\342\277\345\263\306\n\"a\343\277\223\030\311\303\303\017\342\277\010\027/E3\233\332?M\233q\030\013,\322?k\013>\230.\311\372\277^\016;\342[\004\324?[\024\004f)\314\335\277\256l\244\307\253%\360\277\034i1\276\336\001\341\277\260\257\001\255\207\035\337\277\260\257\001\255\207\035\337\277-\223\365\217r$\265\277\3076\260\341\215\252\341\2779.q\322\207\033\332\277=pt\005$\200\363?\001\315\34678\366\363?L\021\242.\005\233\345?\224\335\260\270FX\360\277n\0260Q&L\253?\346\3004\037eC\355\277\351JJ\240\024g\341\277\305)YjLl\364?\362Y\035n\347\035\362?\205\330\207py,\333\277\325MkU\024k\353\277H,\376\270\221\261\363\277,\317\243\020\356\233\365?n\3674\302\246K\351?\324\344K\037\262\247\375\277\033\362$\233<@\267\277@H\331)a\005\315\277\305\373Q?g`\370?\210\"\325\240\342\300\323?\350\341*j\262\243\363\277\034\322\255(\354\373\342\277\'\271\'\034\324J\235?Rn\335\\\351\325\372\277\212\206\313\234`\342\364?<(\250N\272S\320?^<B\rA\020\320?\265M\0236\356\231\360?\270S\177\205\020+\306\277\346\205\277\337<U\347\277\367\321l\246\307\316\324?\221g\227?N\215\331?S+P\035\210\027\320\277\031\212\370\016\204s\334?\177\262\312BaP\376\277\221g\227?N\215\331?\005N\3376 \236\371\277\264\361\004\340#\202\370?\262M*\323\357=\335?\312~\331\314\242\r\331\277\177\230\277\0373\235\337?^\3403\267v\370\327?[p\022\274\363\343\325\277\343dl`D\276\334\277\277v\361&\357\003\360\277E\365\032\265Eo\363?\365\327\333lY\030\002\3006\274jzg\027\004\300\354\300z\266\016\326\324\2778\000j\247\242\017\336\277!\340\210\207\200W\367\2779.q\322\207\033\332\277n\311-\227\301?\355?-\256\363\\J\316\346\277\367\243e{\342\302\330?\364\3275*\225\226\336\277O\036\371\245F\331\362\277\351\246\314\307\213Y\352?\222\030&\370nF\366\2775 \025\342D\330\332\277\244\213\222\215\024\350\343\277\352kW\210ck\344?\371\367\335v\"7\364\277>4\306\204\250\010\263\277\232\313\323\322uA\362\277%\3564\242\253\'\365\277b\212z\023\315\315\310\2778\000j\247\242\017\336\277\203\230\250\2021\371\362?\304\332\241\213\303\222\351\277R\241:\234\330\363\333\277gj\275\t\323\366\314?\214\264\322\307E\356\360?\306\204.\177\303\372\261\277\267,I\360\034P\225\277\266,c\202J\314\341\277\361\253\347\250\254\366\003@\326m\342\307d\257\277\277y\010mI\t\327\300?3\312z\326\t\372\370\277\343dl`D\276\334\277bI\366\270-\205\341?\3319\022\031\262\333\311\277Lz\036\231\022\225\347?\025\332\325\236Y$\377\277(\215\240\335Q7\334\277\276x\327\201i<\370?2\200x\341\232]\306\277\367\312\201~\250!\355\277\212\006\253\356\256z\266\277\217B\241>\017\266\364?\033u_\\\360g\255?(\351\2563\034O\324\277\203\230\250\2021\371\362?\2153\027\316\345\\\005\300>\267\000F\\0\251?\221\225\236j3\231\325?uf\204\331e\237\340?\266\266\354\324\246\312\346?\303\300\363\234@\026\337?-\334\372\207/\332\342\277\037g\220=7\370\371\277\035\320\t\334\375\201\365\277[\024\004f)\314\335\277y \266~\374~\364\277\214\321:\rb\342\377\277\305\261\2737@\034-\2774\353\315U\002\221\363?p_\033\267\265\205\274\277[\024\004f)\314\335\277!\205r\240\364\232\373?O\036\371\245F\331\362\2779.q\322\207\033\332\2773.a*\216\025\377\277\364\317@\273\312N\247\277t\343\333\205D\274\327\277\377\236\337\014S\352\367?\304q%!\266\230\347\277\247<8\3436E\335\277\263\327?T\237a\321?\\\236\031\347\330\357\321\277\373uG\263\373\022\360?N\207u\020T\323\364\277\273\224<\2450\366\340?\177\230\277\0373\235\337?<(\250N\272S\320?\347xhh\373\026\372?v\267\363|E\362\372?\312~\331\314\242\r\331\277\203\230\250\2021\371\362?\360\0264Z\270\000\304?\r\035\204\367S\210\303\277\276\337m\221\374\375\361\277\223\030\311\303\303\017\342\277\245\"\026#\007\356\341\277\351\211\2052\336\322\367?\031\r#h\024\352\350\277\341\345\204`\0051\270?\232\361 \222\252\213\316?\370\0319]1\373\367?\362Y\035n\347\035\362?\032\000\314\360\322\253\373?\013\366\304(9`\363\277p\311\320b\026\t\371?-\256\363\\J\316\346\277\207\301@\334\210\320\372?O\302\215\033\321\212\346\277.\224\213\005q\344\343?gj\275\t\323\366\314?t\343\333\205D\274\327\277l\265\324Z_\260\333\277\335\275\322\347@\022\325?\014\027u\334\334-\342?s+K\010\003\262\306\277K\0208\t\322\021\306?\231\2233\345\264\303\356\277\326m\342\307d\257\277\277\322\215\237\321^\206\253\277\316\341\006e\360\321\312\277^<B\rA\020\320?\322\360\026\"\311\252\332?w\205W\351\311a\003\300\372\275\023je?\343\277F\321\027[\223\036\341\277a\262r#;\177\343?]\262,\214\221\354\333?\372T\227\377WE\341\277\200\016\223\001\202\325\376?>\257H\033_\333\374?sp\361\026\315)\375?\360\302\231\330\364\027\364?\004\3258[2\307q\277\311\364OzF\017\304\277\315J\t\036\3609\323?j\204Y\205\007\331\210?a\033\222Y\235B\361?q\233\262\232/Y\340\277$\342Mh\234\n\000\300<(\250N\272S\320?\034\322\255(\354\373\342\277\306\010\251\266\250\236\345\277]\302\326>\217\230T\277\327\"\024\002\357\215\355\277\244B\215\225W2\266\277[B\013\221\016\330\331\277y\010mI\t\327\300?\247j?\016\034Q\331\277\255\325 2\271\037\362\277\277;6P\035\203\362?5=\230\220\307i\005@\231\203>T \304s?B\212\177(R3\322\277\316R7[M\326\363\277(\351\2563\034O\324\277\335\324\215[\307\322\336?E\225R\276\202\234\371?8\000j\247\242\017\336\277\221{\275\221\004K\215\2772<\206q\275\245\341\277\004\322\365\322\325\004\256\277\343dl`D\276\334\277\304q\202Ua\317\373\277\3263\246\311\217J\364?3\207\327Y\204o\322?\312~\331\314\242\r\331\277b\212z\023\315\315\310\277E\227@\020w\022\002\300\2036\251V\277A\362\277\032\000\314\360\322\253\373?\014\351m\261\367!\346?\247\016\275\346\244^\300\277.\247\0105+!\317\277\200\016\223\001\202\325\376?\377\236\337\014S\352\367?P\3473\363\211\340\363?n\021\235\031\2005\354\277(\215\240\335Q7\334\277Y\226\353\251{S\361?Z\346\271\217\261\304\324\277{\327\275OV\007\265?\332e\376\373\371\021\t@;\314\231\370\357;\330?\275\217\320\321\340k\302?G\364Kq\264Z\273?\352~\324\267\035\250\317\277\364\310\366>\247\335\261?\305\261\2737@\034-\277\346)\261\211r=\357\277*\027p\307W\310\350\277\260nk\337\320\204\264\277-Ew\362<\324\344\277\026\354\317\350\033S\336\277\014\200\361F\352\'\344?\036\200w\224!~\361\277\250\007\234X\337i\200?\325\266\347\277!e\355\277\3160\241\306\026P\300?\032\227O\206\305\261\371?u\021\343\260)\310\323\277\3753D\200_\256\326\277O\302\215\033\321\212\346\277\2619\027.7A\323\277\262Z\336~\334\262\356?Y\226\353\251{S\361?\364\310\366>\247\335\261?\372\275\023je?\343\277\316\256\377\031n[\364?\303\30094\352\250\346?\033u_\\\360g\255?<\346\244\033\036\357\366\277\244B\215\225W2\266\277\263g\330\301r\272\347\277\022\375\306\355Y\261\307?\333\324#\325S\327\371\277\nR\215\347Y\345\363?;\\2f\303\224\356\277\036\276T\354\211l\301\277\301\354\316\334(\242\255\277\343dl`D\276\334\277\313 \212\006\014W\307?Bk\0054\226K\377?o\201\004\254\254\334\325?]Vd\315pg\353?\221\303\245\225\030\245\321?^\016;\342[\004\324?]\277\3407~a\355?a\277\311\232|\275\360\277\240\035\344\027\220\374\324\277xg\234T\323\362\302?>\346G\347r\270\342\277[B\013\221\016\330\331\277\260\257\001\255\207\035\337\2774a\376k\374\377\366\277\236\243\343v\231h\274?R\241:\234\330\363\333\277f\365\352\300\221\275\277\277\253\016\337\033\013\321\321\277\303\300\363\234@\026\337?\325{\317\264\244\255\373\277\257\341x\'\305=\321\277\304\034\002\363\n.\327?\247\016\275\346\244^\300\277\2060\006\2275\371\335?h\177\345\211\306\232\366\2778\000j\247\242\017\336\277\204\314\033\3758\226\304\277\200wU\0039b\370\277\027\032\327\023\001_\332\277\034\322\255(\354\373\342\277\351h?\273\271\263\356?\346\205\277\337<U\347\277\335\217\313\274[\006\331?\313S~0x\230\341?\264\037\014\013\t\216\364?\242\010h4\204q\327?\312~\331\314\242\r\331\2779\\x\375l\'\326\277\030\227\254\272p\350\355?\024n\267,n\332\361?\2018\227r\200\352\266\277\314_\245o\220\270\375\277\354\326\344u\352\217\374\277L?c\302@\024\332?j\263\332\356\210!\372\277_\270\202o9N\333\277\246C\306\326\252\273\360?(\351\2563\034O\324\2773\236\222\315\n0\334?{\327\275OV\007\265?\247j?\016\034Q\331\2774\264J\277\324[\246?\316R7[M\326\363\277-Ew\362<\324\344\277\036\276T\354\211l\301\277\\(]\242\213[\357?\255\325 2\271\037\362\277;\314\231\370\357;\330?\270\274\302\365\3071\003\300J\345B*;U\371\277/\003\027\213\3658\307\277\301\354\316\334(\242\255\277\343dl`D\276\334\277\033\305V\261\252\275\365?/\003\027\213\3658\307\277\262\361a\024\317\270\354?\361\331\356\323\221\002\000@\003l\371\374\361\316\342\277`c^\020\007o\344\277?5\\\372\246\310\341?\232:W(\020\324\344\277\244\213\222\215\024\350\343\277\337\270Ly\2619\364?+\310(\253\311\r\313\277l\265\324Z_\260\333\277\240\215\360\\\321\320\343?\223\352\301\230\336\003\346\277@H\331)a\005\315\277<\346\244\033\036\357\366\277t\343\333\205D\274\327\277\177\323z\366\004\036\355?iDpJ\236\254\360\277U\336\024\225\220\266\370\277\233\235\314\247\2205\366\277\017\003\034\240z\236\320\277\225\352\247\006\261\207\231\277\034\227\225\035oD\361\277\203\230\250\2021\371\362?\010\027/E3\233\332?\303\30094\352\250\346?\337\346S\244\226E\360?\177<\367`\022\030\357?\033\000\022\210|>\363\2776&\211,\324\021\361\277\226\311\360\276\022\314\373\277\034i1\276\336\001\341\277\242\306\007\315<\326\351\277\247\016\275\346\244^\300\277\241C#\013V\362\344?\230\235\206\020\347\242\376?\363\365^\263\034\375\351\277xg\234T\323\362\302?\305T\031\312\366\251\376\277\032\000\314\360\322\253\373?\235y\t\230\260h\000\300\203\230\250\2021\371\362?\235\031_9\302\317\260?|>\276\212,V\360?\322\361\242\226\363\345\332\277\255\366\030\\m\257\362?\326m\342\307d\257\277\277\255t\262\"\346&\365\277\311\364OzF\017\304\277\224F-#TR\362\277\267{w\225~\334\340?-s~\035\"\340\340\277\344\373\343V\337\267\243?\264\210\210u\026\210\366?\344\020\237\261\206*\357\277F\321\027[\223\036\341\277\203\245\377\371r7\340\277\306\204.\177\303\372\261\277\346\205\277\337<U\347\277\0131\3353\266\027\345\277i2\252\001\3179\357?\362\024\007\337\016\272\001\300\014\351m\261\367!\346?\200\262m\016\266\031\352\277\3753D\200_\256\326\277\265\303CL\350\010\364\277!\205r\240\364\232\373?y\010mI\t\327\300?X:#\353Z\316\360\277\254>\235\234\306\031\364\277\244\213\222\215\024\350\343\277\367a\005\024\233\'\353\277R\317A\307\275\377\327\277?B\312\016\352\252\353?\037v\345i\313v\322\277\203\245\377\371r7\340\277(\351\2563\034O\324\277\215\260\350\306A\256\332\277;!\343P\207\301\314\277E\311\354\024\235\022\317?"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2262
          }
        }
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
        string_val: "2"
        string_val: "1"
        string_val: "1"
        string_val: "2"
        string_val: "1"
        string_val: "2"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content: "=+\223F%\010\323\277w\205\321\232\372:\364\277\252/\313\\=\364\266?\n\331\3262^\332\317\277\267\356S\375\325\240\355\277\272\010\030=\337h\301\277\255\324J\224\356%\327\277z\322\004\305\266\313\342\277S]C\252\362\256\361?f\261\333,\256\241\347?o\353jF\202\031\367?\362\221\204[\340a\006@6\302\021\320zW\361\277\274\347t\244\343\310\341\277S]C\252\362\256\361?\201_\211y*\t\366\277^\207{\234\336#\364\277\217\375\253\206\223C\001@\252/\313\\=\364\266?J\303\311:\002\273\227\277\243:\344?v\004\352\277\031uX\246\261<\347\277e\321a\335\232\236\360\277\217&\235Gr\276\370\277\301v)ZHy\360?\255\324J\224\356%\327\277&h$\244\235\353\311?\243:\344?v\004\352\277:u\241%\305\213\360?\2139AXZ\327\367\277\364\226\353P\027\013\262?\235\355\260\025\272s\373\277\272\010\030=\337h\301\277g\021\263gRK\365?Z\004\321\307Mg\333?\326<*\017\256^\336\277\255\324J\224\356%\327\277V\357\034\253sl\341\277\324|I,U/\360?\355\027hJ\377\257\300\277\237M\210P^\035\351\277~R\247\331%%\354?[7\373\210\"}\363?e\321a\335\232\236\360\277\255\324J\224\356%\327\277~R\247\331%%\354?\320\024\345\235\271!\365?z\322\004\305\266\313\342\277\230\346\"\0143[\002@\202\275XQ\301H\371?\252/\313\\=\364\266?z\322\004\305\266\313\342\277&h$\244\235\353\311?w\305\"%\262\347\370?}q\251\330\013\355\007@;\234\361L\216.\324?\313\2050\350Tq\346\277Z\004\321\307Mg\333?z\322\004\305\266\313\342\277\252/\313\\=\364\266?\320H\027e\207\250\362?z\322\004\305\266\313\342\277e\321a\335\232\236\360\277\274\261:z\010\330\371?H\027\357\330(\366\356?h\017\352/Yj\000@\252/\313\\=\364\266?\255\324J\224\356%\327\277\024\344\233\215?\"\356\277\272\010\030=\337h\301\277\272\010\030=\337h\301\277\252/\313\\=\364\266?&h$\244\235\353\311?\326<*\017\256^\336\277\206y\n\275\274\236\277?\202*%\3507\255\300?\243:\344?v\004\352\277\273~\363-9\030\360?\353p2q\372|\226?\231\244\265O\374\277\362\277\272\010\030=\337h\301\277z\322\004\305\266\313\342\277~R\247\331%%\354?;\341G\347\213I\303\277;\234\361L\216.\324?S]C\252\362\256\361?;\234\361L\216.\324?\272\010\030=\337h\301\277;\234\361L\216.\324?\360\026h\355\352\266\353\277\244\313\240X\350\036\343\277\255\324J\224\356%\327\277\255\324J\224\356%\327\277y\251\254:\340\276\344\277m\253\031\274\312l\362\277\255\324J\224\356%\327\277\217\206t\202\026h\346\277\350\301\247o7\302\357\277[7\373\210\"}\363?o\353jF\202\031\367?\326<*\017\256^\336\277\335\335\024\236\200\305\002@\323\003]\277P\367\000@\215\006\027\227\205\301\357?>\323H_x\302\342\277z\322\004\305\266\313\342\277\2139AXZ\327\367\277\360\026h\355\352\266\353\277X\256\313\303\247\306\347?;\234\361L\216.\324?\n\331\3262^\332\317\277J\303\311:\002\273\227\2776\302\021\320zW\361\277\215\006\027\227\205\301\357?\302\027o\007\263r\371\277\266\273\014\261\006\341\343\277<\300\364\212W\273\305?\323\003]\277P\367\000@\215\006\027\227\205\301\357?\272\010\030=\337h\301\277\326<*\017\256^\336\277w\205\321\232\372:\364\277\243:\344?v\004\352\277\260\2271\021!]\363\277~R\247\331%%\354?F6X\241\006P\341?\352\352\377\371\r\317\355\277\272\010\030=\337h\301\277\374`9L\221\377\326?Z\004\321\307Mg\333?\201_\211y*\t\366\277\272\010\030=\337h\301\277\"\r\036a\024\206\000@\326<*\017\256^\336\277\215\006\027\227\205\301\357?v\331\367\354\032(\017@F6X\241\006P\341?\270\000\263\207\313\r\325\277\272\010\030=\337h\301\277\326<*\017\256^\336\277\330\256K\3621C\362\277\201_\211y*\t\366\277}.\244\233\\\230\352\277;\234\361L\216.\324?z\322\004\305\266\313\342\277\343\224\372\365g.\332\277\267\356S\375\325\240\355\277F6X\241\006P\341?\252/\313\\=\364\266?\267\356S\375\325\240\355\277(\264\'*}\002\362\2777\225^\303d\275\023@\307\025\027h\336\366\314\277wi[\260(\022\320\277\227SJ\301AR\376?\215\006\027\227\205\301\357?\2139AXZ\327\367\277\024\rDT\335@\316?\325\221\352\214aS\332\277\342\363\264H\3754\341\277U\352\307^f\354\344?\267\356S\375\325\240\355\277\037\006\025\277#W\340\277U\352\307^f\354\344?m\253\031\274\312l\362\277g\021\263gRK\365?\215\006\027\227\205\301\357?\023$\250\356\030\034\300\277K\265\215\221\237\364\361\277\n\331\3262^\332\317\277\353\351\272s\033#\326\277&h$\244\235\353\311?\353\231\237~<\300\350?U\352\307^f\354\344?\202l\223\267\022\366\360?\316\"\321i\377\321\265\277\247\307h\364\351A\375\277S]C\252\362\256\361?\255\324J\224\356%\327\277\024(%|\365\253\370\277\260\245X7\030\355\344\277J\255\000>\250\220\344\277&h$\244\235\353\311?U\352\307^f\354\344?J\303\311:\002\273\227\277\262\014\346\031\'\270\014@:T\220\201K\244\277\277z\322\004\305\266\313\342\277\201_\211y*\t\366\277w\305\"%\262\347\370?\227SJ\301AR\376?S]C\252\362\256\361?\272\010\030=\337h\301\277\272\010\030=\337h\301\277\217\375\253\206\223C\001@\255\324J\224\356%\327\277\255\324J\224\356%\327\277\275xPn\230\350\275\277uz\367]\003\301\364\277\023+\2064gF\013@\2139AXZ\327\367\277\330\315\020\354K\335\271\277z\322\004\305\266\313\342\277\221\323\317J\266\001\346?\227|z\2554V\333\277n\2367\034\306\210\350?\255\324J\224\356%\327\277g\351w\305\212\341\355\277J\303\311:\002\273\227\277\0273\377\270\354%\370\277\326<*\017\256^\336\277\033\236\2600\210I\345\277~R\247\331%%\354?n\2367\034\306\210\350?\255\324J\224\356%\327\277\206y\n\275\274\236\277?w\205\321\232\372:\364\277\n\331\3262^\332\317\277\226\023\3716\212\245\371\277\025\r\364\027\026/\354\277o\353jF\202\031\367?\n\331\3262^\332\317\277F6X\241\006P\341?e\321a\335\232\236\360\277\326<*\017\256^\336\277\326<*\017\256^\336\277\253\217\244\275)\371\345\277\203\237\332\003\342\265\372?\257\225\024\314\375\300\307?Z\004\321\307Mg\333?n\2367\034\306\210\350?\004+\207G\013\364\313\277\3620|i\273\220\341?XFg5\014\271\354?U\352\307^f\354\344?\270\307\356\363\366\313\370?&h$\244\235\353\311?\014\374#R\020V\001@\243:\344?v\004\352\277\227SJ\301AR\376?;\234\361L\216.\324?z\322\004\305\266\313\342\277e\321a\335\232\236\360\277\266d\007PLG\353?&h$\244\235\353\311?\n\331\3262^\332\317\277\323S\361\241~\"\362?\215\006\027\227\205\301\357?\303t\371XW\006\365\277\025\203\247j\214\325\351?U\352\307^f\354\344?v\340S\211\221d\345?\336=\354\330$o\000\300\353\231\237~<\300\350?\034\264d\252v=\344\277\\\023 \351<\371\342?\024S\255\007\275+\362?\252/\313\\=\364\266?F1\263\0302\276\322\277\255\324J\224\356%\327\277~8a\360Do\363?\255\324J\224\356%\327\277-\366\224\346\263\235\001@\277C\024{\211\225\351\277\217\206t\202\026h\346\277m\253\031\274\312l\362\277\207\330t\323\212\223\304?m\253\031\274\312l\362\277J\303\311:\002\273\227\277Z\004\321\307Mg\333?JCW\314\005\336\354?\024\010\237\313\010\257\357?K\201[\312\321m\364\277>\260\262E\205\352\371?\252/\313\\=\364\266?z\322\004\305\266\313\342\277\216\013l\343\222A\354\277&h$\244\235\353\311?\326<*\017\256^\336\277Z\004\321\307Mg\333?E\322H\002d\311\335?\215\006\027\227\205\301\357?\004\236*1{\277\331\277\272\250h\240\036\310\344\277\213y\222\342\021\204\374?\n\331\3262^\332\317\277z\322\004\305\266\313\342\277J\303\311:\002\273\227\277\272\010\030=\337h\301\277\n\331\3262^\332\317\277;\234\361L\216.\324?\223\267Y`\344\330\361\277\036\023d&\352\366\315?\272\010\030=\337h\301\277w\305\"%\262\347\370?\326<*\017\256^\336\277\n\331\3262^\332\317\277#\177\025\373\231\023\360?\005\263\301\302Z\020\362\277w\305\"%\262\347\370?%u\033&\270\001\365\277\306\226\314\225/ \373?\223\006\307Z\276\257\315\277\375\3460\n\"\322\341\277K\303\264\267\226\204\343\277\252/\313\\=\364\266?\r\324Oy@~\360\277\245\346\371Z\253\244\320?\252/\313\\=\364\266?/\005\353\235\343\371\270?\243:\344?v\004\352\277\202l\223\267\022\366\360?F6X\241\006P\341??sq$\324\030\365\277~R\247\331%%\354?~R\247\331%%\354?`\362,\024zG\341\277F6X\241\006P\341?\323r\214\327lX\347\277\226\023\3716\212\245\371\277i\302\212\226V\'\274?\007\n\344\256\017T\354\277\r\324Oy@~\360\277U\352\307^f\354\344?\217\206t\202\026h\346\277Z\334x\232\213S\342\277\305\355\344\262\267\220\303?\252/\313\\=\364\266?S]C\252\362\256\361?\252/\313\\=\364\266?\326<*\017\256^\336\277\215]\034\370?[\350\277Z\004\321\307Mg\333?\255\324J\224\356%\327\277\255\324J\224\356%\327\277\324\r8\262\327%\354\277~R\247\331%%\354?\215\006\027\227\205\301\357?U\352\307^f\354\344?\255\324J\224\356%\327\277\213b\231\3420\344\365\277\272\010\030=\337h\301\277\255\324J\224\356%\327\277\206#\215\336k\343\370\277m\253\031\274\312l\362\277V\317\226\372\206o\370?z\322\004\305\266\313\342\277\212\366\267\306\270F\302\277\272\010\030=\337h\301\277\213y\222\342\021\204\374?U\306\304 \235_\343\277\243:\344?v\004\352\277\326<*\017\256^\336\277[\000|\330T\340\343?\272\010\030=\337h\301\277\215\006\027\227\205\301\357?\237M\210P^\035\351\277z\322\004\305\266\313\342\277\217\206t\202\026h\346\277\326<*\017\256^\336\277Z\004\321\307Mg\333?o\353jF\202\031\367?\243:\344?v\004\352\277\326<*\017\256^\336\277\354\035\025\331\314\262\364?\326<*\017\256^\336\277\n\331\3262^\332\317\277\240#\023\336xm\364?[7\373\210\"}\363?\356Rd\210\251\334\350\277\333?:x\2649\336\2773\304s>|\246\357\277\233[\207\330q\244\311\277\360\354\312\334!\376\325\277J\255\000>\250\220\344\277\267\356S\375\325\240\355\277\323\003]\277P\367\000@s\037\235\rP\240\364?\215\006\027\227\205\301\357?\267\356S\375\325\240\355\277z\322\004\305\266\313\342\277\375k(k\236\253\347\277\267\356S\375\325\240\355\277U\352\307^f\354\344?\272\010\030=\337h\301\277\326\377\020\214\340\225\372\277dc;\336\033\\\320\277\210\346s[\236\032\345?8\305I\327d;\322?\265\256\002s\036\364\330\2770\341\324\243L\226\367?\272\010\030=\337h\301\277\243:\344?v\004\352\277;\234\361L\216.\324?\022\233\240\307\201n\345\277Ws\220Z\351\020\n\300\255\324J\224\356%\327\277\255\324J\224\356%\327\277\272\010\030=\337h\301\277;\234\361L\216.\324?\252/\313\\=\364\266?&h$\244\235\353\311?\263)3\260\205#\364?\213y\222\342\021\204\374?\354\366\304\261\003\020\341\277~R\247\331%%\354?\2139AXZ\327\367\277\365~\340J\370H\007@\n\331\3262^\332\317\277\352\321e`\027W\003@z\322\004\305\266\313\342\277\255\324J\224\356%\327\277;\234\361L\216.\324?z\322\004\305\266\313\342\277o\353jF\202\031\367?\227SJ\301AR\376?\232S\"#^I\335\277\243:\344?v\004\352\277S]C\252\362\256\361?\236\2378e\0137\345\277z\322\004\305\266\313\342\277z\322\004\305\266\313\342\2773\304s>|\246\357\277\203\237\332\003\342\265\372?$\307\313:e\033\361\277\267\356S\375\325\240\355\277\3311;\360\240\262\355?z\322\004\305\266\313\342\277\326<*\017\256^\336\277\335\335\024\236\200\305\002@\2139AXZ\327\367\277\375z\373\340\177y\007@\325\343\302?\362u\367?\326<*\017\256^\336\277\317\026\001\3208\020\000@\215Q%\3239>\362?~R\247\331%%\354?\330\315\020\354K\335\271\277\034\264d\252v=\344\277\255\324J\224\356%\327\277\3777\341\301\272\362\330?\3065\353.J\252\266?\221\nO\373\203\236\365?\261\241 \323\031\020\377\277?\372\230\206Ae\366?\003\023\255\314p>\000@I\3101\242\207\r\361\277\217\206t\202\026h\346\277\243:\344?v\004\352\277:\306f\277s\336\370?\357\366\024\356\312!\303?m\253\031\274\312l\362\277o\353jF\202\031\367?;\234\361L\216.\324?z\322\004\305\266\313\342\277U\343W\363}+\356\277F6X\241\006P\341?\213\300h\272\307#\371?\255\023\1776\227/\365?\026\217\327\303\373v\257?^\031I?\233\321\237\277\2051\004A*\205\314?\227SJ\301AR\376?\347s\007!\245|\310\277\225\303x#\316\376\370?T4\303\2018\231\322\277+R \356\347\345\350\277\326<*\017\256^\336\277\201_\211y*\t\366\277\206\272\013h\3012\347?\323\003]\277P\367\000@\333\025\305\005\317\211\371\277\232\345#\302\302\017\356\277\320\216\332#[x\332\277&h$\244\235\353\311?\016=\371\215\3167\363?\037\363p\256;>\341\277}\226\010*\370\245\345\277\251\351\t\304\261\177\320?\317\026\001\3208\020\000@\215\006\027\227\205\301\357?\272\010\030=\337h\301\277\326<*\017\256^\336\277Z\004\321\307Mg\333?m\253\031\274\312l\362\277U\352\307^f\354\344?m\253\031\274\312l\362\277z\322\004\305\266\313\342\277;\234\361L\216.\324?\237\321:+\350J\327\277~R\247\331%%\354?S]C\252\362\256\361?S]C\252\362\256\361?C|C\376\275(\352?\205u=\363\030\375\364\277\326<*\017\256^\336\277F6X\241\006P\341?;\234\361L\216.\324?\n\331\3262^\332\317\277\317\026\001\3208\020\000@\257\205\252\350G\347\332\277\252/\313\\=\364\266?~R\247\331%%\354?\242\277\333\240\362\335\357\277\326<*\017\256^\336\277;\234\361L\216.\324?\217\206t\202\026h\346\277;\234\361L\216.\324?\252/\313\\=\364\266?z\322\004\305\266\313\342\277\215\006\027\227\205\301\357?\217\206t\202\026h\346\277z\322\004\305\266\313\342\277\255\324J\224\356%\327\277S]C\252\362\256\361?&X\272\300\347\021\335\277\255\324J\224\356%\327\277\002\250\347\205c\226\362\277-\007\340D#\215\343?&h$\244\235\353\311?S]C\252\362\256\361?\000\213\256\276v\257\373?[\017\300\346Z\023\354\277\251^\227Ax\177\311\277z\322\004\305\266\313\342\277&h$\244\235\353\311?[7\373\210\"}\363?&h$\244\235\353\311?J\303\311:\002\273\227\277\326<*\017\256^\336\277\n\331\3262^\332\317\277S]C\252\362\256\361?\226\331,\235\274\362\367?\000\213\256\276v\257\373?\0226L\242\354;\352\277\203\237\332\003\342\265\372?U\352\307^f\354\344?\272\010\030=\337h\301\277\326<*\017\256^\336\277\323r\214\327lX\347\277\255\324J\224\356%\327\277\254\005\010\324\330\215\301\277\213y\222\342\021\204\374?\317\026\001\3208\020\000@~R\247\331%%\354?g\021\263gRK\365?\246E%Fe\020\000\300opb\247\376\362\374?S]C\252\362\256\361?\351\235\225\260l\n\206\277n\2367\034\306\210\350?\204\335\311\037\230\023\321?\315G\357i\217\246\354?\243:\344?v\004\352\277\336=\354\330$o\000\300\227SJ\301AR\376?J\303\311:\002\273\227\277w\205\321\232\372:\364\277Z\004\321\307Mg\333?\243:\344?v\004\352\277o\353jF\202\031\367?\217\206t\202\026h\346\277z\322\004\305\266\313\342\277J\303\311:\002\273\227\277\341\305\2675R\226\304\277&h$\244\235\353\311?\215\330$\227\303\201\342\277~R\247\331%%\354?w\305\"%\262\347\370?\327\307LU M\343\277\326<*\017\256^\336\277[7\373\210\"}\363?\332\360\270\256h\336\001@U\352\307^f\354\344?\345\312\\\276&(\343\277q\327\251M\213]\321?\300\332jf\373\333\326\277&h$\244\235\353\311?A.\243\257+\343\322\277\255\324J\224\356%\327\277\305\264J\343\016\263\371?\342*H\310<V\001\300g\021\263gRK\365?\326<*\017\256^\336\277\272\010\030=\337h\301\277\272\010\030=\337h\301\277\243\265\354\336\371*\344\277\261\311[u\341y\346?J\303\311:\002\273\227\277\322\221\212\005\360v\276?\255\324J\224\356%\327\277\263\215_\332\"T\351?\272\010\030=\337h\301\277MZ\013\243\010\313\320\277z\322\004\305\266\313\342\277Ry\221\366\340\316\364\277[7\373\210\"}\363?\n\331\3262^\332\317\2776\243\250\007\235\375\376\277\320%\201K\224\320\331?\t\361I\025\031\334\001@\2139AXZ\327\367\277\326z\031+d\274\364\277;\234\361L\216.\324?~R\247\331%%\354?\226\331,\235\274\362\367?\267\356S\375\325\240\355\277F6X\241\006P\341?w\205\321\232\372:\364\277;\234\361L\216.\324?\201_\211y*\t\366\277\016\253\367\356iq\362\277J\303\311:\002\273\227\277g\021\263gRK\365?v\257\020J\232r\337?\243:\344?v\004\352\277H\027\357\330(\366\356?U\352\307^f\354\344?\255\324J\224\356%\327\277z\322\004\305\266\313\342\277\323\003]\277P\367\000@\203\237\332\003\342\265\372?\335\320\036/\n]\370?\016\216\276\'}\212\373?\255\324J\224\356%\327\277n\2367\034\306\210\350?~R\247\331%%\354?B\3357!qu\356\277z\322\004\305\266\313\342\277\341\335\000\317\016A\342\277\214\302p\035\325\215\343\277&h$\244\235\353\311?Q\242\351\200\267\333\362\277\010\205\354M\223z\346\277\257\205\252\350G\347\332\277e\321a\335\232\236\360\277\317\026\001\3208\020\000@\236\353\223\320\226\327\317?i\276\275\314\262\205\361\277[7\373\210\"}\363?J\303\311:\002\273\227\277\006\364/5!`\355\277K\353\210\220f\\\004\300k(\353\222Gt\001\300\353p2q\372|\226?F=\347\2751\026\313\277\022\277\243\005K\373\346?\267i\\\234Y\307\347\277w\305\"%\262\347\370?J\303\311:\002\273\227\277\000\\\344\377\203\177\312?\255\324J\224\356%\327\277\243:\344?v\004\352\277d\337\210\003\222.\342\277z\322\004\305\266\313\342\277\323de\261u\310\365\277\330\276\030\316|\005\241?\301g\307|\213\020\311\277\267\356S\375\325\240\355\277\255\324J\224\356%\327\277\031g1\200\272\254\365\277F6X\241\006P\341?J\303\311:\002\273\227\277e\321a\335\232\236\360\277\006a\021\256\255\366\365\277\350\267\314|\260\223\004@;\234\361L\216.\324?\215\006\027\227\205\301\357?w\205\321\232\372:\364\277\272\010\030=\337h\301\277\330\327\243|\010P\360\277;\234\361L\216.\324?\217\206t\202\026h\346\277\255\324J\224\356%\327\277\230\211\204\353\034C\346\277\n\331\3262^\332\317\277opb\247\376\362\374?m\253\031\274\312l\362\277~R\247\331%%\354?J\303\311:\002\273\227\277\212-6d\3425\001\300\217\206t\202\026h\346\277\n\331\3262^\332\317\277\235\355\260\025\272s\373\277\030U\252W\3416\335\277\215\006\027\227\205\301\357?\362\221\204[\340a\006@J\303\311:\002\273\227\277&h$\244\235\353\311?J\303\311:\002\273\227\277o\013\361\366n\026\340\277\320e\2527ht\375?\017\312\222$X\247\327\2777\244\223\202\233\304\362\2777\247\340k\233\332\344\277\034\264d\252v=\344\277\215\006\027\227\205\301\357?\310\'L.\250\377\341?\221\nO\373\203\236\365?\255\324J\224\356%\327\277\267\356S\375\325\240\355\277u=\363\274K*\322\277\023\014\327/\007\214\365?;\234\361L\216.\324?;\234\361L\216.\324?[7\373\210\"}\363?\325\221\352\214aS\332\277e\321a\335\232\236\360\277\267\356S\375\325\240\355\277U\352\307^f\354\344?C+j\225\235Q\001\3003\304s>|\246\357\277\255\324J\224\356%\327\277\266@\004\022\203\272\351\277\326<*\017\256^\336\277\213y\222\342\021\204\374?\224\245\3227\013c\331\277\326<*\017\256^\336\277\326<*\017\256^\336\277\n\331\3262^\332\317\277J\303\311:\002\273\227\277U\352\307^f\354\344?S]C\252\362\256\361?\025\220\261\250t\302\324?\255\324J\224\356%\327\277\326<*\017\256^\336\277e\321a\335\232\236\360\277~R\247\331%%\354?;\234\361L\216.\324?\252/\313\\=\364\266?\226\023\3716\212\245\371\277\221X\307\2532\333\353?\255\324J\224\356%\327\277\255\324J\224\356%\327\277\023\014\327/\007\214\365?\275B\367\222z\362\362?o\353jF\202\031\367?\243:\344?v\004\352\277U\352\307^f\354\344?\255\324J\224\356%\327\277;\234\361L\216.\324?m\253\031\274\312l\362\277\272\010\030=\337h\301\277\261\241 \323\031\020\377\277\326<*\017\256^\336\277z\322\004\305\266\313\342\277\243:\344?v\004\352\277\366\025#g\370\n\324\277w\205\321\232\372:\364\277\304\336\277U\364b\356\277Qg\n\316\007Y\334\277F6X\241\006P\341?S]C\252\362\256\361?Z\004\321\307Mg\333?w\305\"%\262\347\370?z\322\004\305\266\313\342\277m\253\031\274\312l\362\277\n\331\3262^\332\317\277w\205\321\232\372:\364\277&@\314v\333\327\340?\243\332\014\005\322Z\374\277\003\375\344\203\020\306\340\277e\321a\335\232\236\360\277\215\006\027\227\205\301\357?\213\275\033\321\307\r\347?\311\352\324I\261\265\303?:T\353\320\373\024\321\277w\305\"%\262\347\370?z\220\253\327\361\264\363\277m\253\031\274\312l\362\277\274\342\037X\326H\345?m\253\031\274\312l\362\277\343\210\003\321a\021\364\277m\253\031\274\312l\362\277\215\006\027\227\205\301\357?$\241\300\231\216$\345\277\177\317\267\333\266\265\360\277F6X\241\006P\341?&\323\302_k8\327\277\0004\214\322\301k\341?\320\024\345\235\271!\365?\217\206t\202\026h\346\277\004+\207G\013\364\313\277\317\026\001\3208\020\000@n\2367\034\306\210\350?\252/\313\\=\364\266?Z\004\321\307Mg\333?Z\004\321\307Mg\333?J\303\311:\002\273\227\277z\322\004\305\266\313\342\277Qg\n\316\007Y\334\277z\322\004\305\266\313\342\277WJ\237\231\n\226\362?O\330h\324p\177\335?U\352\307^f\354\344?\267\356S\375\325\240\355\277^\031I?\233\321\237\277\326<*\017\256^\336\277\352e\010\231\221\365\347\277ai\375N\377\220\365\277\217\206t\202\026h\346\277z\322\004\305\266\313\342\277&h$\244\235\353\311?\326<*\017\256^\336\277z\322\004\305\266\313\342\277e\321a\335\232\236\360\277\n\331\3262^\332\317\277j\243\214h\323\010\345\277\n\331\3262^\332\317\277\206\272\013h\3012\347?`\r\001\003a\370\332?\373\307\307ADx\357\277\350\265\260J1\245\371?Z\004\321\307Mg\333?;\234\361L\216.\324?\317\026\001\3208\020\000@U\352\307^f\354\344?\267\356S\375\325\240\355\277w\205\321\232\372:\364\277\236\322\177\261\332\366\356\277\244\3503+\311\352\355\277_j\0327\0164\334\277f\233\327v\370\233\306\277\267\356S\375\325\240\355\277\032K\3433\314\214\362?\272\010\030=\337h\301\277\221X\307\2532\333\353?\255\324J\224\356%\327\277\260*P\230\224\306\352\277\201_\211y*\t\366\277&h$\244\235\353\311?\274\357)\226\2765\320?J\303\311:\002\273\227\277z\322\004\305\266\313\342\277\201\210\341\003\001\026\364\277\252/\313\\=\364\266?n\215\233n\353\331\363\277\217\206t\202\026h\346\277\272\010\030=\337h\301\277\310/+\344\256\320\322\277\352e\010\231\221\365\347\277\323\003]\277P\367\000@\n\331\3262^\332\317\277z\322\004\305\266\313\342\277\"\007\344\220\263C\246\277\212\036\020\364zZ\353\277\n\331\3262^\332\317\277J\303\311:\002\273\227\277\202*%\3507\255\300?F6X\241\006P\341?z\322\004\305\266\313\342\277\321g\306i\347b\010@\214o\243 \031\321\360?&\323\302_k8\327\277\255\324J\224\356%\327\277`\r\001\003a\370\332?\n\331\3262^\332\317\277\3620|i\273\220\341?\'\251M\355\205\210\362\277U\352\307^f\354\344?;\234\361L\216.\324?o\353jF\202\031\367?\223\006\307Z\276\257\315\277\373B\320\340\307\236\351\277\215\006\027\227\205\301\357?w\205\321\232\372:\364\277J\303\311:\002\273\227\277vsJr!\305\333\277n\2367\034\306\210\350?\201_\211y*\t\366\277\272\010\030=\337h\301\277yi\203N\014\033\361?\365v\027\212\253W\310\277\317\026\001\3208\020\000@w\205\321\232\372:\364\277n\2367\034\306\210\350?\252/\313\\=\364\266?z\322\004\305\266\313\342\277\207\007?\222}\303\365?\217\206t\202\026h\346\277e\022\320Oa\356\353\277\326<*\017\256^\336\277\217\206t\202\026h\346\277\326<*\017\256^\336\277\231)\255\260x\231\370\277\202\nQ!\314\371\266\277\252/\313\\=\364\266?\231\250\342\240\021>\331\277z\322\004\305\266\313\342\277\255\324J\224\356%\327\277c\"\'wI\361\370\277I\010[\216[\261\324\277\255\324J\224\356%\327\277\217\001}!\232\216\340\277g\021+B\375e\270?\243:\344?v\004\352\277\243:\344?v\004\352\277\002\352@s(\255\341\277\226\023\3716\212\245\371\277K\340G\212wP\356\277\217\206t\202\026h\346\277\326<*\017\256^\336\277w\205\321\232\372:\364\277\326<*\017\256^\336\277z\322\004\305\266\313\342\277\341\212\253\254\375\236\262?\217\206t\202\026h\346\277J\005\317yG\022\r@\016\253\367\356iq\362\277\274\225\330^\2503\006@\217\206t\202\026h\346\277V\317\226\372\206o\370?~R\247\331%%\354?\272\010\030=\337h\301\277\217\206t\202\026h\346\277`M\257\002\021q\362?\343k\312\tu*\375?\216\201\0376\t\350\351?z\322\004\305\266\313\342\277\332O\244[j\023\313?\232\262\334u\363O\344\277;\234\361L\216.\324?\2139AXZ\327\367\277~R\247\331%%\354?&h$\244\235\353\311?z\322\004\305\266\313\342\277\"\375_p4\361\354\277\215\006\027\227\205\301\357?F6X\241\006P\341?{\035k\346\026\322\267?J\303\311:\002\273\227\277Z\004\321\307Mg\333?\201_\211y*\t\366\277e\321a\335\232\236\360\277\274\261:z\010\330\371?\n\331\3262^\332\317\277\255\324J\224\356%\327\277\2139AXZ\327\367\277z\322\004\305\266\313\342\277\217\206t\202\026h\346\277\t\223\'C\374\216\010\300\275\017\367\225\321@\315\277\243:\344?v\004\352\277[7\373\210\"}\363?d\250\tS\304\221\362\277\024\010\237\313\010\257\357?~R\247\331%%\354?\326<*\017\256^\336\277\217\206t\202\026h\346\277\243:\344?v\004\352\277\\*\361J:\220\370\277\267\356S\375\325\240\355\277\255\324J\224\356%\327\277;\234\361L\216.\324?z\322\004\305\266\313\342\2774I92\350\243\362?\243:\344?v\004\352\277\267\356S\375\325\240\355\277\255\360\350\034\244W\334?M\354\014Bm\221\341\277\332\360\270\256h\336\001@z\322\004\305\266\313\342\277J\303\311:\002\273\227\277&h$\244\235\353\311?\326<*\017\256^\336\277\n\331\3262^\332\317\277b\320vb\234\327\374\277\0349\\\013\363\026\352\277\352e\010\231\221\365\347\277\255\324J\224\356%\327\277n\2367\034\306\210\350?J\303\311:\002\273\227\277n\2367\034\306\210\350?\217\206t\202\026h\346\277\323r\214\327lX\347\277~R\247\331%%\354?\317\026\001\3208\020\000@\033#\250\221\004#\353\277z\322\004\305\266\313\342\277&h$\244\235\353\311?w\205\321\232\372:\364\277vj\2406\033\276\347\277\023+\2064gF\013@\'\251M\355\205\210\362\277\343\241\0044P\033\345\277\217\206t\202\026h\346\277\240&#G\177H\364?S]C\252\362\256\361?z\322\004\305\266\313\342\277;\234\361L\216.\324?\"s\023\303\252\227\352?Cb\375\024\335r\361?\213y\222\342\021\204\374?\201_\211y*\t\366\277z\322\004\305\266\313\342\277\206\247gW\331\031\350?kL\207\007\031o\354?e\321a\335\232\236\360\277\320e\2527ht\375?\313.+\207\232\327\355?JCW\314\005\336\354?\317\026\001\3208\020\000@\267\356S\375\325\240\355\277I\010[\216[\261\324\277\326<*\017\256^\336\277;\234\361L\216.\324?;\234\361L\216.\324?\340})\224j\227\364\277|\200T\260\t\262\346\277\326<*\017\256^\336\277\244\313\240X\350\036\343\277^\311\324\211\243:\343\277\215\006\027\227\205\301\357?\272\010\030=\337h\301\277\252/\313\\=\364\266?u\302\352\035\310\003\330\277\346\346\252\n\025H\326\277o\353jF\202\031\367?\332\360\270\256h\336\001@w\205\321\232\372:\364\277\272\010\030=\337h\301\277\326<*\017\256^\336\277\356\277E\0016s\361\277\n\331\3262^\332\317\277\326<*\017\256^\336\277mm*\240\024\017\334\277\235$0\306\207\020\353\277o\353jF\202\031\367?\326<*\017\256^\336\277\311\301,\203\023\227\343\277m\253\031\274\312l\362\277\342*H\310<V\001\300Z\004\321\307Mg\333?IM\261(Y\314\263\277e\321a\335\232\236\360\277\215\006\027\227\205\301\357?\332\360\270\256h\336\001@Z\004\321\307Mg\333?&h$\244\235\353\311?z\322\004\305\266\313\342\277Z\004\321\307Mg\333?&h$\244\235\353\311?~R\247\331%%\354?,\364x\2644\257\366?-\366\224\346\263\235\001@\326<*\017\256^\336\277\245OS3rL\321\277F6X\241\006P\341?5\021\317\006\034@\357?\272\010\030=\337h\301\277?\372\230\206Ae\366?p\257p\321\013O\273\277\255\324J\224\356%\327\277&h$\244\235\353\311?\243:\344?v\004\352\277\253\323-\254\337\202\360\277&h$\244\235\353\311?2,\330\314\027\264\352\277\362vS\367\000\345\t\300\n\325\224\3772*\370?\306\352\204\r\352\243\341\277\232\205Ja\326\n\277?U\352\307^f\354\344?J\303\311:\002\273\227\277\004\236*1{\277\331\277\347\234\257\347B\233\350?\234\272i\311\352\263\361\277\224\374\327\230\305\374\301\277M-\243R\027\352\355?w\256)%\321G\362\277\267\356S\375\325\240\355\277~R\247\331%%\354?\252/\313\\=\364\266?\326<*\017\256^\336\277\215\006\027\227\205\301\357?S]C\252\362\256\361?:k\344\320\334\264\347\277\n\331\3262^\332\317\277J\303\311:\002\273\227\277\211d\311\343!W\361?\255\201}\2272i\364\277&h$\244\235\353\311?\326<*\017\256^\336\277\274\365\303h\276a\344?\004\230\220^{\223\345\277\307!,\\\233I\342?n\2367\034\306\210\350?F6X\241\006P\341?\255\324J\224\356%\327\277\313\2334\236\nw\307?e\321a\335\232\236\360\277z\322\004\305\266\313\342\277\252/\313\\=\364\266?w\205\321\232\372:\364\277\252/\313\\=\364\266?z\322\004\305\266\313\342\277\217\206t\202\026h\346\277<5\202\010\036\273\336\277\320I\204\211]]\313?)\301c\325u\313\357\277w\205\321\232\372:\364\277\267I\326\353l\312\376?\002\007\324E\ty\354\277\243:\344?v\004\352\277\2538\237\\o_\355?U\352\307^f\354\344?\360\354\312\334!\376\325\277F6X\241\006P\341?\267\356S\375\325\240\355\277\317\355\224v\360~\341\277\255\324J\224\356%\327\277\247\307h\364\351A\375\277\326<*\017\256^\336\277\243:\344?v\004\352\277;\234\361L\216.\324?\362?\300w\301\303\351\277\017\312\222$X\247\327\277&X\272\300\347\021\335\277\244c<\312L\021\350\277rp:\t\033\352\333\277>\323H_x\302\342\277w\305\"%\262\347\370?\227\343\351\361\244\311\320?S]C\252\362\256\361?FE\234\257\014\203\351\277\2139AXZ\327\367\277\250\2557\355\036\276\305\277*7\307\353$`\313\277[7\373\210\"}\363?u\331\343\035\251\243\356\277K\304\326\037H\200\021@U\352\307^f\354\344?\243:\344?v\004\352\277\016\214\365\357\203\251\006@P^`\222\001R\350\2778\275\224\345\211\316\343\277\217\206t\202\026h\346\277\306E\007\374\200\315\362?\243\332\014\005\322Z\374\277\255\324J\224\356%\327\277g\021\263gRK\365?Ld\372d\001~\334\277\010\275\330\"7\314\336?[7\373\210\"}\363?\n\331\3262^\332\317\277\n\331\3262^\332\317\277\223\227\323\257\367\333\350?4\332\'\270j\232\356\277\030\271\341\224g\306\361\277\215\006\027\227\205\301\357?F6X\241\006P\341?\000W|\367\250(\376?\033>\001\224\307\250\330?\272\010\030=\337h\301\277\210W\277\2459j\366\277\341\363\004\205\304F\303?m\253\031\274\312l\362\277J\303\311:\002\273\227\277\335\335\024\236\200\305\002@~R\247\331%%\354?\217\206t\202\026h\346\277z\322\004\305\266\313\342\277S]C\252\362\256\361?v\314\247r\260\332\360\277n\360\227\364\253\220\302\277&h$\244\235\353\311?\021 \230(\376G\353\277~R\247\331%%\354?U\352\307^f\354\344?\206y\n\275\274\236\277?x\273P\356\263\336\336?[7\373\210\"}\363?e\321a\335\232\236\360\277&h$\244\235\353\311?m\253\031\274\312l\362\277\347N77\224^\362?S]C\252\362\256\361?\255\324J\224\356%\327\277\027t;\276\242\231\360?\356D=b\262L\367\277\2623\"r~\326\377?U\352\307^f\354\344?\332\360\270\256h\336\001@\326<*\017\256^\336\277\224*\312\230\207<\337\277\376\357\332E(\331\325\277S]C\252\362\256\361?~R\247\331%%\354?\264Cd\267P\247\313?\262\337Lo\311\250\367?\201_\211y*\t\366\277\262\316\260\301\356\371\342\277\2139AXZ\327\367\277\n\331\3262^\332\317\277\267\356S\375\325\240\355\277e\321a\335\232\236\360\277n\220\350W\353\357\345\277n\372\206\266\244C\316\277\005\263\301\302Z\020\362\277o\353jF\202\031\367?I\037d\331\346\033\245\277\272\010\030=\337h\301\277v\327\201\257\247T\360\277\272\010\030=\337h\301\277\024\315\242\215^\202\327\277KtdH\267W\311?\022.\227\260\021\317\313\277z\322\004\305\266\313\342\277r}DG\003\327\346\2776\0314\274/\233\353\277Hy\271\224\304\327\325?\370i\343\207\227\006\353?w\305\"%\262\347\370?\003\375\344\203\020\306\340\277Z\004\321\307Mg\333?m\253\031\274\312l\362\277\336\346\322\250\370P\367?S]C\252\362\256\361?\213y\222\342\021\204\374?^\031I?\233\321\237\277\252/\313\\=\364\266?\217\206t\202\026h\346\277\316\"\321i\377\321\265\277z\322\004\305\266\313\342\277\272\010\030=\337h\301\277\005:\351$\310\\\363?\231\244\265O\374\277\362\277\255\324J\224\356%\327\277L\013\225\3758\371\214\277\263\001\370\r\276\271\354\277\n\331\3262^\332\317\277~R\247\331%%\354?e\321a\335\232\236\360\277\033,R\315\n*\337\277\022\233\240\307\201n\345\277[7\373\210\"}\363?\213\326\343\377L\223\250\2775Aq\204?`\264\277G\326X\310~\235\342\277\211\371\027l\2063\344?VQ~\362\374m\376?)\206g\227\313\236\307\277z\322\004\305\266\313\342\277\370\302Uj<N\361\277\375\313\327\007_L\304\277\020d!\027\264\321\365\277X\256\313\303\247\306\347?\020\013\2574\017\212\357?n\2367\034\306\210\350?J\005\317yG\022\r@\n\331\3262^\332\317\277\257\205\252\350G\347\332\277\177C\023\217X\340\321\277w\205\321\232\372:\364\277\252/\313\\=\364\266?\240Xwok\311\311\277\252/\313\\=\364\266?\312\3629\377\304\020\320?\177C\023\217X\340\321\277\326<*\017\256^\336\277\332\360\270\256h\336\001@\217\206t\202\026h\346\277\255\324J\224\356%\327\277\311\274\207\372>\005\305\277\255\324J\224\356%\327\277\2051\004A*\205\314?\262\342\\\330\317\203\367?U\352\307^f\354\344?\217\206t\202\026h\346\277U\352\307^f\354\344?g\021\263gRK\365?\214\225\340.\000\244\377\277\305\"ID\252\354\370\277J\303\311:\002\273\227\277[(\324\005\027\364\314?n\2367\034\306\210\350?w\305\"%\262\347\370?;\234\361L\216.\324?\201_\211y*\t\366\277\252/\313\\=\364\266?&h$\244\235\353\311?w\205\321\232\372:\364\277\255\324J\224\356%\327\277e\321a\335\232\236\360\277g\021\263gRK\365?\227SJ\301AR\376?s\277\261\003:r\006\300\350:\250\253\255~\377?&h$\244\235\353\311?\037\002D$\035\014\001@\214zIah2\233\277lQ\334S&\357\350\277\326<*\017\256^\336\277\016n\033\354\225\343\360?\203K\310\2003M\340?z\322\004\305\266\313\342\277\250MK\320d\342\366\277\n\331\3262^\332\317\277\255\324J\224\356%\327\277;\234\361L\216.\324?&h$\244\235\353\311?\243:\344?v\004\352\277\231\244\265O\374\277\362\277\n\331\3262^\332\317\277F6X\241\006P\341?\226\331,\235\274\362\367?\221N\330\3519(\340?&h$\244\235\353\311?&h$\244\235\353\311?\201\237\262e\376\254\331\277.\255z>\233\006\331\277J\323\013\337~\207\360\277\255\324J\224\356%\327\277_\027K\024\n\034\270?A8\222q$\226\336\277S]C\252\362\256\361?\217\206t\202\026h\346\2777\225^\303d\275\023@\003#\"\222\367\230\337\277x\341pq\240\007\374\277\326<*\017\256^\336\277z\322\004\305\266\313\342\277\252/\313\\=\364\266?[7\373\210\"}\363?C\351\374\330f\266\341\277\243:\344?v\004\352\277dc;\336\033\\\320\277\260\2271\021!]\363\277z\322\004\305\266\313\342\277t\272H\350\272m\371?\217\206t\202\026h\346\277\252/\313\\=\364\266?\353\244(l\310z\005@\344\312p\215\230\254\003@\2139AXZ\327\367\277\227SJ\301AR\376?\217\206t\202\026h\346\277\255\324J\224\356%\327\277\252\375\242\036\3052\325\277w\205\321\232\372:\364\277\215\006\027\227\205\301\357?\326<*\017\256^\336\277\255\324J\224\356%\327\277\315\271w\2218*\305\277c\355\327\307l\307\344?A}\307\257\304]\007@w\305\"%\262\347\370?\320\216\332#[x\332\277\330\256K\3621C\362\277\005T/\016\251\022\354?\213y\222\342\021\204\374?\203\237\332\003\342\265\372?V\371\013ml\037\355\277J\303\311:\002\273\227\277\002\235\rIl\034\363\277z\322\004\305\266\313\342\277S]C\252\362\256\361?[7\373\210\"}\363?\217\206t\202\026h\346\277J\303\311:\002\273\227\277\243:\344?v\004\352\277;\234\361L\216.\324?z\322\004\305\266\313\342\277\326<*\017\256^\336\277\264Cd\267P\247\313?\221\305\200\206\333h\343\277\255\324J\224\356%\327\277\004-\337\346\337o\370\277\n\331\3262^\332\317\277z\322\004\305\266\313\342\277\032\001\300r\026\327\343?~R\247\331%%\354?\231\250\342\240\021>\331\277\211\000\247\210\261\371\315\277\023$\250\356\030\034\300\277\n\331\3262^\332\317\277\267\356S\375\325\240\355\277z\322\004\305\266\313\342\277\036~\002\342\267C\333\277\371\003\304\334\002\236\354\277\255\324J\224\356%\327\277\252/\313\\=\364\266?`\033\325\332\027f\301?\247\307h\364\351A\375\277J\303\311:\002\273\227\277Z\004\321\307Mg\333?\343\032\005p\306\327\364?\217\206t\202\026h\346\277\n\331\3262^\332\317\277\227SJ\301AR\376?[7\373\210\"}\363?\033>\001\224\307\250\330?\217\206t\202\026h\346\277S]C\252\362\256\361?n\2367\034\306\210\350?J\303\311:\002\273\227\277Z\004\321\307Mg\333?\326<*\017\256^\336\277#\221}A\030\246\010\300Ld\372d\001~\334\277\354\035\025\331\314\262\364?`M\257\002\021q\362?5\346\354o`\333\341\277\347N77\224^\362?\217\206t\202\026h\346\277U\352\307^f\354\344?\002\007\324E\ty\354\277U\352\307^f\354\344?\267\356S\375\325\240\355\277\232>\201\302Q%\363?J\303\311:\002\273\227\277)\206g\227\313\236\307\277\326<*\017\256^\336\277\224\301p\300\300\224\336?\330u\234@s3\347\277\252/\313\\=\364\266?U\352\307^f\354\344?\177\203\264U\327\236\310?>\260\262E\205\352\371?7\224<[\263\301\345\277&h$\244\235\353\311?\255\324J\224\356%\327\277^\346g\\\204\006\356\277U\352\307^f\354\344?\361\014y+\362\003\340\277\n\331\3262^\332\317\277\323\332\360e\010f\342\277J\303\311:\002\273\227\277\226\023\3716\212\245\371\277\326<*\017\256^\336\277z\322\004\305\266\313\342\277J\303\311:\002\273\227\277>\341\227#S[\345?\302\013x\342\254U\343?/2\232=\373\350\377?[7\373\210\"}\363?&h$\244\235\353\311?\272\010\030=\337h\301\277h\007\3410TB\333?\323\003]\277P\367\000@;\234\361L\216.\324?~R\247\331%%\354?\376*\327\203\322\005\356?z\322\004\305\266\313\342\277e\321a\335\232\236\360\277n\2367\034\306\210\350?\323\003]\277P\367\000@\272\315\210\306\366\367\374\277\255\324J\224\356%\327\277z\322\004\305\266\313\342\277\n\331\3262^\332\317\277\327\307LU M\343\277U\352\307^f\354\344?P\227\017D\300a\363\277\255\324J\224\356%\327\277\322\215\275;L\325\363\277F6X\241\006P\341?\270\304\336\212\360\360\370?\310\313\033E\014J\357\277\003z\'\363\2612\310\277\226Q\350R@\003\340?\227SJ\301AR\376?\326<*\017\256^\336\277g\021\263gRK\365?\2204\304miN\352\277\323\370\323\321\304<\344?g\021\263gRK\365?\267\356S\375\325\240\355\277\020\355P\334.\210\341\277\3630\025\240\303\376\n@U\352\307^f\354\344?\323\003]\277P\367\000@\341\363\004\205\304F\303??W\3739\002\360\320\277\252/\313\\=\364\266?\206y\n\275\274\236\277?\255\324J\224\356%\327\277:\330\305IiK\360\2778\305I\327d;\322?\345\313\027\371{\223\254?w\205\321\232\372:\364\277\306\352\204\r\352\243\341\277\326<*\017\256^\336\277w\205\321\232\372:\364\277]u\343\335\1772\255\277\217\206t\202\026h\346\277\255\324J\224\356%\327\277H\251\360w\215\274\337?\360)s\307\312a\001\300\037\371\n\201;j\325\277}\006K[\366\326\000@vOG4X8\312\277S\253\273Z\241\353\347?\365\037\022)\361\275\337\277z\322\004\305\266\313\342\277\n\331\3262^\332\317\277e\321a\335\232\236\360\277\232\205Ja\326\n\277?U\352\307^f\354\344?\224! ]\2015\353\277F6X\241\006P\341?J\303\311:\002\273\227\2775+\273\344\010\021\364?\252/\313\\=\364\266?\206y\n\275\274\236\277?9_\355\253\326\227\361?\267\356S\375\325\240\355\277\016n\033\354\225\343\360?J\303\311:\002\273\227\277k\336\210\246}5\335?&h$\244\235\353\311?\n\331\3262^\332\317\277\255\324J\224\356%\327\277\n\331\3262^\332\317\277z\322\004\305\266\313\342\277J\303\311:\002\273\227\277\n\331\3262^\332\317\277~R\247\331%%\354?\37541\340%\364\264\277\217\343\022\243,\200\002@T>\262C1L\336\277\324}Q2N\240\325?N\207\270\034\330^\346\277\r\251\357\213\\\007\350?\000\006\267]\372\325\365?\n\331\3262^\332\317\277&h$\244\235\353\311?\266\273\014\261\006\341\343\277\362\221\204[\340a\006@\361\361[\226\204\013\004\300\247\260\227\222\354\252\347?\215\006\027\227\205\301\357?U\352\307^f\354\344?\017\005\217b\002\324\357?&h$\244\235\353\311?\327\344\337\'\001\031\356\277&h$\244\235\353\311?\220\254\177#\355^\362\277\336\213P\272a\'\346\277\355-l\000\265\265\341?[7\373\210\"}\363?YK\274\201\0319\351\277\'Y\315\331\311\341\361?\033\233cG\2103\363\277g\021\263gRK\365?\375\313\327\007_L\304\277B\300\244N\220\251\343\277Z\004\321\307Mg\333?l\324\231\344\204\202\321?w\205\321\232\372:\364\277\360\343 \241\033\367\341\277\362\265s\3127j\347?e\022\320Oa\356\353\277z\322\004\305\266\313\342\277\210\346s[\236\032\345?\234\272i\311\352\263\361\277\n\331\3262^\332\317\277Z\004\321\307Mg\333?;\234\361L\216.\324?z\322\004\305\266\313\342\277C\313\222Z\371\247\003@\217\206t\202\026h\346\277n\2367\034\306\210\350?^\321\211{~\247\321?\n\331\3262^\332\317\277\350\301\247o7\302\357\277\326<*\017\256^\336\277~R\247\331%%\354?\010&2\373\375s\337\277\345\312\\\276&(\343\277\326<*\017\256^\336\277\3446S\274\264\367\367\277;\234\361L\216.\324?\267\356S\375\325\240\355\277\260*P\230\224\306\352\277\026\210\374\266\231U\346\277\236\002\370j\322\262\301\277\203\237\332\003\342\265\372?;\'\203\200\n4\356?&h$\244\235\353\311?\326<*\017\256^\336\277I\204\250\263\321\203\346\277[7\373\210\"}\363?&h$\244\235\353\311?yi\203N\014\033\361?F6X\241\006P\341?\210\346s[\236\032\345?e\321a\335\232\236\360\277`\0260RC\324\342?e\321a\335\232\236\360\277\246\372\222\265\276W\325\277&h$\244\235\353\311?S]C\252\362\256\361?\215\006\027\227\205\301\357?\323\003]\277P\367\000@\355!W\014\370b\314\277U\352\307^f\354\344?\326<*\017\256^\336\277\306\352\204\r\352\243\341\277\243:\344?v\004\352\277\272\010\030=\337h\301\277Z\245\371\351\275\266\362\277\014\000\365\354\026\241\340\277\372\255\224\0241\231\306?\316\324\223\023\002u\360\277\353\371$W\321\374\302?\230\346\"\0143[\002@~R\247\331%%\354?[7\373\210\"}\363?\000\006\267]\372\325\365?h\017\352/Yj\000@\214o\243 \031\321\360?\255\324J\224\356%\327\277\264\240\003\353\nm\350?\315\311\341t\356\003\322?\240\301\320G2q\272\277Z\004\321\307Mg\333?\320H\027e\207\250\362?;\234\361L\216.\324?\255\324J\224\356%\327\277\215{\377c\3741\352?\353\244(l\310z\005@\310\346J\203\243k\272?\326<*\017\256^\336\277>s\231\302\267!\326?\272\010\030=\337h\301\277!\274\361\375m\241\361\277&h$\244\235\353\311?m\253\031\274\312l\362\277\n\331\3262^\332\317\277\207\330t\323\212\223\304?C\333\325\262o&\360\277\255\324J\224\356%\327\277\262\316\260\301\356\371\342\277\201\237\262e\376\254\331\277\217\206t\202\026h\346\277\272\010\030=\337h\301\277\225r\263\211\037\254\360?K\265\215\221\237\364\361\277\"\375_p4\361\354\277n\2367\034\306\210\350?m\253\031\274\312l\362\277\024S\255\007\275+\362?J\303\311:\002\273\227\277F6X\241\006P\341?S]C\252\362\256\361?\227SJ\301AR\376?\272\010\030=\337h\301\277;\234\361L\216.\324?\247\242H\316\021\022\345\277\220\375D\275\233\261\372\277e\215\330\356\344\024\346\277\272\010\030=\337h\301\277\2139AXZ\327\367\277\215\006\027\227\205\301\357?\016n\033\354\225\343\360?\323\003]\277P\367\000@t5Q\207>\224\363?\372\224\200\365t\270\345\277H\251\360w\215\274\337?\226\245\372\325\356k\372?;\234\361L\216.\324? a\227\255\272\200\361?\252/\313\\=\364\266?J\303\311:\002\273\227\277\216\201\0376\t\350\351?w\305\"%\262\347\370?g\021\263gRK\365?m\253\031\274\312l\362\277&h$\244\235\353\311?\265\326=\025\346]\360\277\255\324J\224\356%\327\277\375]\001E\247\033\366\277\247\307h\364\351A\375\277*\314(0W\023\336?\353\244(l\310z\005@\326<*\017\256^\336\2772,\330\314\027\264\352\277w\205\321\232\372:\364\277n\2367\034\306\210\350?m\253\031\274\312l\362\277\272\010\030=\337h\301\277\243:\344?v\004\352\277\n\331\3262^\332\317\277\272\010\030=\337h\301\277\000\006\267]\372\325\365??~Ka\313\222\364\277\267\356S\375\325\240\355\277E`\315\023\354\377\365\277\205\010\\z\214f\354\277\326<*\017\256^\336\277\215\006\027\227\205\301\357?M\314\206\221\200\224\370?\217\206t\202\026h\346\277\335\335\024\236\200\305\002@w\205\321\232\372:\364\277q\335C \213\211\345?\250\270\374G\000\006\344\277\024\315\242\215^\202\327\277\276\271\307\315\377;\347?\323\332\360e\010f\342\277Vt\024\014\360E\347\277U\352\307^f\354\344?\204\273\260u%\273\272\277\272\010\030=\337h\301\277\227; \n\340\212\000\300\033,R\315\n*\337\277>\355\216HYx\373\277z\322\004\305\266\313\342\277\307\025\027h\336\366\314\277O;\242\332*q\336\277n\2367\034\306\210\350?8\2430-\362\342\273\277\227SJ\301AR\376?\220\257\314\014\355t\344\277\335\335\024\236\200\305\002@\023\332\300\232\270\363\002@;\n\360\255)h\343?\261\241 \323\031\020\377\277~R\247\331%%\354?5\003\200BA\247\354\277\2726\n=\241\250\336\277\016\316\347\023Q.\357\277n\360\227\364\253\220\302\277~R\247\331%%\354?\366\354\362z\005\007\367?\224e\251K7\277\365\277\272\010\030=\337h\301\277\272\010\030=\337h\301\277n\2367\034\306\210\350?\255\324J\224\356%\327\277\n\331\3262^\332\317\277e\321a\335\232\236\360\277e\321a\335\232\236\360\277Z\004\321\307Mg\333?\326<*\017\256^\336\277m\253\031\274\312l\362\277\023\330\244h9\005\370?\272\010\030=\337h\301\277z\322\004\305\266\313\342\277\217\206t\202\026h\346\277w\205\321\232\372:\364\277\272\010\030=\337h\301\277m\253\031\274\312l\362\277z\322\004\305\266\313\342\277Z\004\321\307Mg\333?\177\366\3633\016\324\003\300\326<*\017\256^\336\277p\271@\342\301\374\343\277S]C\252\362\256\361?;\234\361L\216.\324?\243:\344?v\004\352\277\326\243q\265:\311\362\277\215\006\027\227\205\301\357?e\321a\335\232\236\360\277\326<*\017\256^\336\277\326<*\017\256^\336\277\255\324J\224\356%\327\277VT\216[\003I\376?\022.\227\260\021\317\313\277\310\263\005]\034\007\362\277T\251P\377\376\230\273\277\217\206t\202\026h\346\277\217\206t\202\026h\346\277[7\373\210\"}\363?\364\245\343n\346\342\252\277n\2367\034\306\210\350?;\234\361L\216.\324?\306\226\314\225/ \373?\027\212\361]\331\350\260\277B\300\244N\220\251\343\277\n\331\3262^\332\317\277\003\202\334\344\214\237\346\277J\303\311:\002\273\227\277\3623\311R\273\246\363?z\322\004\305\266\313\342\277k\307\217\246\234\225\346?\215\006\027\227\205\301\357?\310F$\344\217p\351\277\272\010\030=\337h\301\277;\234\361L\216.\324?\217\206t\202\026h\346\277\207\264q\225\301\006\323?9\360\3331Y\216\355\277\326<*\017\256^\336\277\215\006\027\227\205\301\357?\0057\234;\310F\341?z\322\004\305\266\313\342\277z\322\004\305\266\313\342\277\252/\313\\=\364\266?>\341\227#S[\345?Z\004\321\307Mg\333?t\264\353\225\264|\347?Ph\344\262\200\244\241\277Hy\271\224\304\327\325?w\205\321\232\372:\364\277\213y\222\342\021\204\374?o\353jF\202\031\367?\307\025\027h\336\366\314\277\033\236\2600\210I\345\277\217\206t\202\026h\346\277\247\307h\364\351A\375\277x\273P\356\263\336\336?\262]ewS\252\361?e\321a\335\232\236\360\277\213y\222\342\021\204\374?w\205\321\232\372:\364\277\227SJ\301AR\376?\247\307h\364\351A\375\277\n\331\3262^\332\317\277\232;4\331Q\017\341?\215\006\027\227\205\301\357?S]C\252\362\256\361?J\303\311:\002\273\227\277Z\004\321\307Mg\333?\326<*\017\256^\336\277|\200T\260\t\262\346\277z\322\004\305\266\313\342\277\335\335\024\236\200\305\002@F6X\241\006P\341?S]C\252\362\256\361?\213y\222\342\021\204\374?\335\320\036/\n]\370?\332\360\270\256h\336\001@\340\347\357\220\007\364\355\277\023-\030\033I\364\247?\211\231,bp\005\006@J\303\311:\002\273\227\277\336K\'\316\215\203\362?\203\237\332\003\342\265\372?0\341\324\243L\226\367?\216\374\'\325\214\016\344?\013\240\035\262r\367\362\277\251fL3S\354\347\277\2139AXZ\327\367\277M\032\377A/\321\356?\326<*\017\256^\336\277S]C\252\362\256\361?\224\301p\300\300\224\336?\217\206t\202\026h\346\277N\350\324\335n\264\373\277\337\276\227\0061\347\357\277hu\337\221\357{\352?\323\374(\301\275\303\333?\243:\344?v\004\352\277&h$\244\235\353\311?J\303\311:\002\273\227\277\217\206t\202\026h\346\277\2257\324\326o)\352\277\272\010\030=\337h\301\277?\201\230J\313\250\346\277\243\003e\217\250g\372\277&h$\244\235\353\311?n\2367\034\306\210\350?\201_\211y*\t\366\277\361\014y+\362\003\340\277\224e1q\214\244\262\277\255\324J\224\356%\327\277Q\331h1\205x\342\277z\322\004\305\266\313\342\277\203\237\332\003\342\265\372?\275xPn\230\350\275\277\247B\2311Qq\330?\2139AXZ\327\367\277\243:\344?v\004\352\277\267a\247\252~Z\311\277\267\356S\375\325\240\355\277O\261\316~T\336}? \306\010^J]\336?\212\334\266\006\266C\374\277z\322\004\305\266\313\342\277\310\313\033E\014J\357\277~R\247\331%%\354?[7\373\210\"}\363?\275B\367\222z\362\362?;\234\361L\216.\324?z\322\004\305\266\313\342\277\021\366\372\0275\217\325\277\325\221\352\214aS\332\277e\321a\335\232\236\360\277\217\206t\202\026h\346\277n\2367\034\306\210\350?D\262}(\231\031\362\277MG\2170\004\273\362?n\2367\034\306\210\350?\243\265\354\336\371*\344\277[7\373\210\"}\363?F6X\241\006P\341?{\375\226\037\253\036\316\277\326<*\017\256^\336\277&h$\244\235\353\311?\243:\344?v\004\352\277\325\221\352\214aS\332\277\255\023\1776\227/\365?\037\226\321z\201x\324?\251\310So\350\010\361\277S]C\252\362\256\361?\312\364s\317\342V\355\277z\322\004\305\266\313\342\277\323\003]\277P\367\000@\322\2149\212E\240\006@F6X\241\006P\341?\236\002\370j\322\262\301\277\267\356S\375\325\240\355\277\323\374(\301\275\303\333?J\252\263T\250z\362\277\370\302Uj<N\361\277\322\372\343\335\266\036\317?e\321a\335\232\236\360\2776G\t1\3670\367\2775\231\271E\244J\363\277\215\006\027\227\205\301\357?\n\331\3262^\332\317\277\n\331\3262^\332\317\277\304\336\277U\364b\356\277\243:\344?v\004\352\277\353\371$W\321\374\302?z\322\004\305\266\313\342\277\022\233\240\307\201n\345\277\n\331\3262^\332\317\277@\245\233\210\2245\350?\327_\350\306\204?\350\277\217\206t\202\026h\346\277\215\006\027\227\205\301\357?\202\361\212\030\217\317\366?\255\324J\224\356%\327\277w\205\321\232\372:\364\277U\352\307^f\354\344?\272\010\030=\337h\301\277\030L\000\034\333/\351\277;\234\361L\216.\324?\255\324J\224\356%\327\277\272\010\030=\337h\301\277Z\004\321\307Mg\333?;\234\361L\216.\324?\343\032\005p\306\327\364?\217\206t\202\026h\346\277J\303\311:\002\273\227\277\014\246\216\323\352l\005@\255\324J\224\356%\327\277\332\360\270\256h\336\001@^\001\301^G\214\333?&h$\244\235\353\311?\312\364s\317\342V\355\277&h$\244\235\353\311?O\330h\324p\177\335?+R \356\347\345\350\277\267\356S\375\325\240\355\277\001\307\202\273Q\314\327\277\363\325!\031\010p\321?Ga\352\373\372\242\334\277\n\331\3262^\332\317\277\252/\313\\=\364\266?\232{]\305%\263\364\277z\322\004\305\266\313\342\277\255\324J\224\356%\327\277\240Xwok\311\311\277`M\257\002\021q\362?Z\004\321\307Mg\333?z\322\004\305\266\313\342\277\\\275\017\322\255\371\357\277\202DX\025K\214\351\277g:\343SEO\322\277\242\277\333\240\362\335\357\277\247\'@/\216\353\352\277\326<*\017\256^\336\277~R\247\331%%\354?\272\010\030=\337h\301\277S]C\252\362\256\361?&h$\244\235\353\311?\217\206t\202\026h\346\277\326<*\017\256^\336\277YK\274\201\0319\351\277\025\r\364\027\026/\354\277\267\356S\375\325\240\355\277\n\331\3262^\332\317\277\255\324J\224\356%\327\277*<lt\371\361\351\277w\305\"%\262\347\370?\004+\207G\013\364\313\277\230\324\352\014}I\273?e\321a\335\232\236\360\277\3109\032\246\247\203\336\277\037\226\321z\201x\324?\213y\222\342\021\204\374?\3364KY\247\215\355?\252/\313\\=\364\266?\203\237\332\003\342\265\372?U\352\307^f\354\344?&h$\244\235\353\311?z\322\004\305\266\313\342\277\326<*\017\256^\336\277\332\360\270\256h\336\001@\2139AXZ\327\367\277\026^\207D\264\245\361?e\321a\335\232\236\360\2778\275\224\345\211\316\343\277<\300\364\212W\273\305?\317\026\001\3208\020\000@&h$\244\235\353\311?\332\360\270\256h\336\001@4[\312)\356\354\334\277&h$\244\235\353\311?w\205\321\232\372:\364\277[7\373\210\"}\363?e\321a\335\232\236\360\277x\273P\356\263\336\336?\243:\344?v\004\352\277\212\036\020\364zZ\353\277\252/\313\\=\364\266?\214o\243 \031\321\360?\246\034Q\020\201?\332?\272\010\030=\337h\301\277\266Gt}k{\340?|I\325\377;\025\367\277A\252\360\324\241\265\344\277<\222\247;\345\n\307\277\330^\243@\222\223\320\277\272\010\030=\337h\301\277\240\373\327;\261\003\355\277\034\246=\204\177\255\362\277Z\004\321\307Mg\333?\237!\343\334\207\372\370\277Z\004\321\307Mg\333?;\234\361L\216.\324?\024V\275p\303\006\362?[7\373\210\"}\363?\000\263\351`>\031\323?c\355\327\307l\307\344?\252/\313\\=\364\266?\343\032\005p\306\327\364?\243:\344?v\004\352\277\326<*\017\256^\336\277\274*\023\030\233\213\370\277f\261\333,\256\241\347?\326<*\017\256^\336\277\262\313c\330\356\343\360\277\255\324J\224\356%\327\277>\323H_x\302\342\277\306+\033\036\224\374\355?\360\343 \241\033\367\341\277\271\217g=0\276\363\277&h$\244\235\353\311?A\216\030=\026U\243?n\220\350W\353\357\345\277J\303\311:\002\273\227\277\243:\344?v\004\352\277\272\010\030=\337h\301\277\202l\223\267\022\366\360?\225 \333\326\216\211\323\277J\303\311:\002\273\227\277w\205\321\232\372:\364\277\2457\227Vv\356\367\277\326<*\017\256^\336\277\247+\2401p\321\341?\255\324J\224\356%\327\277ifKG\"7\320\277\232\2067\002\035-\364\277\236\2378e\0137\345\277\030U\252W\3416\335\277m\253\031\274\312l\362\277~R\247\331%%\354?\255\324J\224\356%\327\277z\322\004\305\266\313\342\277Q\331h1\205x\342\2771\254]V\214c\362\2772\371\220\200H\364\340\277\227SJ\301AR\376?\232\205Ja\326\n\277?\326<*\017\256^\336\277\252/\313\\=\364\266?[7\373\210\"}\363?n\2367\034\306\210\350?\255\344\264w\244\377\303?\267\356S\375\325\240\355\277\255\324J\224\356%\327\277o\353jF\202\031\367?o\301\313\017q\005\260?\255\324J\224\356%\327\277\344\312p\215\230\254\003@\252/\313\\=\364\266?\n\331\3262^\332\317\277w\205\321\232\372:\364\277\375k(k\236\253\347\277[7\373\210\"}\363?;\234\361L\216.\324?\217\206t\202\026h\346\277\255\324J\224\356%\327\277\010\241:\232\201\232\331\277\226\023\3716\212\245\371\277\210\321C\223\266[\003@\227SJ\301AR\376??~Ka\313\222\364\277\252/\313\\=\364\266?\370\231\375\337eA\363\277;\234\361L\216.\324?#\330\027\254x\270\303\277z\322\004\305\266\313\342\277z\322\004\305\266\313\342\277\371~\314{\206\304\346\277e\321a\335\232\236\360\277m\342\230l\230\t\342\277t\272H\350\272m\371?J\303\311:\002\273\227\277\037\371\n\201;j\325\277\245\177\212\026;1\333\277S]C\252\362\256\361?\276^E\337h\022\366\277\217\206t\202\026h\346\277F6X\241\006P\341?z\322\004\305\266\313\342\277\252/\313\\=\364\266?\375\330\t\344*B\360\277&h$\244\235\353\311?\201_\211y*\t\366\277\326<*\017\256^\336\277J\303\311:\002\273\227\277\276\331M~\3548\360\277N\242\021\037\233\344\323?g\021\263gRK\365?\326<*\017\256^\336\277j\034\215\244I\305\364?\203\237\332\003\342\265\372?\255\324J\224\356%\327\277\000\006\267]\372\325\365?\243:\344?v\004\352\277\036\335\2744MJ\342\277\326<*\017\256^\336\277J\303\311:\002\273\227\277\224\374\327\230\305\374\301\277\201_\211y*\t\366\2772,\330\314\027\264\352\277F6X\241\006P\341?&h$\244\235\353\311?fD\322\025>\002\336\277\031uX\246\261<\347\277\202*%\3507\255\300?A8\222q$\226\336\277\313\2050\350Tq\346\277\213y\222\342\021\204\374?O;\242\332*q\336\277\240LC\312kq\321\277\375k(k\236\253\347\277\217\206t\202\026h\346\277&h$\244\235\353\311?w\205\321\232\372:\364\277z\322\004\305\266\313\342\277\n\331\3262^\332\317\277BnDv\252\241\311?o\353jF\202\031\367?|\373\\O\215\330\340\2775y3\225\267M\352?n\2367\034\306\210\350?y\211&\212\363\301\373?[7\373\210\"}\363?m\253\031\274\312l\362\277k\336\210\246}5\335?o\353jF\202\031\367?\374\275\330\177K\305\343\277w\205\321\232\372:\364\277\2204\304miN\352\277Q\331h1\205x\342\277-\312\333\243k\366\360\277\313\2050\350Tq\346\277~R\247\331%%\354?o\231\222\223\361\366\331\277g\021\263gRK\365?\215\006\027\227\205\301\357?\257\037\335$\225\336\001\300g\351w\305\212\341\355\277\201_\211y*\t\366\277\235\355\260\025\272s\373\277\032\213\014 \2400\346\277k\336\210\246}5\335?\255\324J\224\356%\327\277e\321a\335\232\236\360\277I\3101\242\207\r\361\277\323\367\2038\3511\355\277\332\360\270\256h\336\001@\326<*\017\256^\336\277\227|z\2554V\333\277\377={\224\272\036\355?\326<*\017\256^\336\277x\223\370\300\361\312\345\277g\021\263gRK\365?\207\254\274\243\346\231\344\277\326<*\017\256^\336\277\274\261:z\010\330\371?8{;\370\304\267\364\277J\303\311:\002\273\227\277\312\3629\377\304\020\320?N\207\270\034\330^\346\277\217\206t\202\026h\346\277\207t$W\232\020\241\277z\322\004\305\266\313\342\277z\322\004\305\266\313\342\277\272\010\030=\337h\301\277\220\241\245\346\365\344\362\277\222\340\331\210\236\356\320?w\205\321\232\372:\364\277\354\213\023:h\354\363\277e\321a\335\232\236\360\277z\322\004\305\266\313\342\277\342\r\3731\336\352\371\277\n\331\3262^\332\317\277U\352\307^f\354\344?\006\334\346\233d\265\317\277\372\242\317\271OQ\350?\020\013\2574\017\212\357?\272\010\030=\337h\301\277e\321a\335\232\236\360\277\217\206t\202\026h\346\277\237\305C\006\342-\361\277\326<*\017\256^\336\277\207\254\274\243\346\231\344\277J\303\311:\002\273\227\277Z\004\321\307Mg\333?\215\006\027\227\205\301\357?\010\205\354M\223z\346\277S]C\252\362\256\361?*\327\027Od\277\356\277w\305\"%\262\347\370?\243:\344?v\004\352\277;\234\361L\216.\324?\252/\313\\=\364\266?S\325Xkj\244\335?e\321a\335\232\236\360\277M\367\261\006\372C\234?\255\023\1776\227/\365?\353{\274\022\200\351\346\277e\321a\335\232\236\360\277\366\371\350\351{o\001@o\353jF\202\031\367?e\321a\335\232\236\360\277ifKG\"7\320\277[7\373\210\"}\363?\270\270\277\307\006\313\361\277\326\261\230\3331Y\344\277\217\206t\202\026h\346\277z\322\004\305\266\313\342\277\326<*\017\256^\336\277\255\324J\224\356%\327\277\213y\222\342\021\204\374?\267z\370I4v\374?J\303\311:\002\273\227\277H\025y\233\265\"\000@&h$\244\235\353\311?\201_\211y*\t\366\277\267\366\010\357\260\r\334?J\303\311:\002\273\227\277e\321a\335\232\236\360\277r\002<\250\177\260\354\277w\205\321\232\372:\364\277\372\242\317\271OQ\350?\261\241 \323\031\020\377\277[7\373\210\"}\363?\005\3177\255,9\346?J\303\311:\002\273\227\277\326<*\017\256^\336\277\355\334\000r\372G\335?\2600\352j\224\362\336\277\326<*\017\256^\336\277"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content: "\017\232\3356\1774\341\277d\005\275\255a\274\226?\316\0147E!\221\332\277k>\321\357\205\357\245?\253\025\316\t\263\327\316\277\265u\026l2\362\354?\214o\273\naL\311?\251\376\330\320\306?\361?Y\364\362\303\034r\360\277\234Me,\377\373\356\277Y\364\362\303\034r\360\277\340\362\231\013\n\327\362\277\\\031Si]6\243\277\252iC4\203i\307\277\023S\224\354\023%\333\277\002\257\270\"\245\322\004@\344\307\274\2143+\375?]94\"j\373\341?\2566v\032F=\360\277\005sP\216(\226\306\277\241\3020\025w\233\260\277\276\240\245%<\251\274\277\266\363h\037[\212\254?;\370\320]\255u\363?\371]\301\244+\020\334?\340\334\271:\237\246\346?\317\250\000\262\343\205\351\277^Z*\214.\305\010@)\r^i>]\361\277\234^\016w\314\006\353?\307l\233\031$I\357\277\214\005H\252\230\377\367?\307M\342+\035\310\234\277\327\364\006\264n;\363\277^\302\211?\000\237\356\277\360sP\256\342\330\267?{;x\007\\p\326\277\275Tg\373R\220\325\277\030\237K\301\377\350\360\277\005sP\216(\226\306\277\302[q\\5\232\340\277_P\235F\370a\355\277\263\222 \235!-\355\277\344\266T]NL\250\277\rb\217\032\237(\346\277\315\267\231:\255l\334\277Fo5Q0{\325\277\322\322\230h\371_\324\277H\327)\303\263\261\340?l\312\2677\277\000\355\277\202\262\203]Ep\363\277\005sP\216(\226\306\277\256o\354\026\312\333\360\277d\207\303\2024\333\342\277s\304\326,\032+\326?\271\255\037\313m \345\277\272\345m\347M,\340\277\027\265\277|\256\350\343\277%$\372\004\221\357\351\277\347\224\357r\366\376\305?\272\300v2}2\322?\005\253\236\252\010\242\301\277\205\324\361\250\272K\342?Z\025\226\025O\373\320\277\362Ss>\235N\273\277\035d~\253\276\322\347?\t\016\032\360\316\226\355\277{;x\007\\p\326\277m\"\215\344\332\333\331?\r\360\242!\227\353\344\277g\247C!\267s\221?\017\014\312/\207q\342\277\276\020\021\226\352Y\333\277\230Q;4\001\212\335\277\nn\227c\'S\345\277\261c\344\315A\261\361\277/\241\256=\301a\300?^\336\260M\360$\354\277w\216\254\2622k\346\277\220\211\322VM\256\355?\275\020B^\374\300\262\2771\222nR\221\200\342?a\210\353b\330m\350\277\265\347\275\247\225Q\353\277_P\235F\370a\355\277[\230J\374G-\226\277\265\347\275\247\225Q\353\277\355\222)-\370\224\260?%2k\255\266C\327\277J\000\336\313\222\346\240\277cJ\371\"\022\314\364?\327\302\377\324\023\205\351?\t\216\213q\361O\276\277\326|\323}\341\250\320\277\227;)\036\024\247\362?(\370\314\320\216\022\321\277\355\377\'\352%\355\246?\314\321\311:\215!\275?\014\233\005\027#\307\346\277\204\2254o\261W\360\277Qb\374\037\334\246\275\277\322`\254o\361\"\323\277e\243\352\220$a\340\277\212\306\331\235.\375\331\2773\313\344N\025\037\343?\226&\335B\t:\345?\017\005\027\322)\367\377?\303\361\373aX\327\322?\325\242\253\273\234\341\364\277L\033\036\203Z\313\342\277\376\220=\342\026\206\271\277\332\372M\361\363\220\344?\2531\365\027\243]\314\277\275W=\3708*\354\277k\202\351\204#\n\n@\022\375X|E)\335?\314\340\253\264$\322\313\277\377\201s\221;8\357\277V\322g\220\212W\334\277\322\266qZ\t\332\326\277\344\0075\024\2645\324\277\317\262\215\367\031\351\004@\357\266\005\211\244\321\375?\331\373u\321\227#\352?\201\353\371Y\311\016\364\277_\027\'Jt\303\354\277e\352>\310\372\317\336?:f\256\260\273\037\312?\3350\214K\320x\326\277\346\260\026\201\346\204\303?\351\354M8\263\013\001@J\271\2555\033*\307\277\350\370~\243\315\017\354\277\346\260\026\201\346\204\303?\331\211D\033\353\010\346\277\245\240\262v+\373\341\277\307|z\365\345\361\244?\344\266T]NL\250\277!l\t\212\336t\335\277\336\026u\377\343\026\342?}\254\306\232\t\326\327?\033\227p\203\376\333\350?\314\340\253\264$\322\313\277\263\222 \235!-\355\277Mb\005(\004\276\320\277\322\322\230h\371_\324\277$\010\030\264EG\357?\010\200\006\351\326\323\356\277d\207\303\2024\333\342\277\265c\005X\033\242\242?\016oEuMf\336?\354\377\022\177\371\324\314?\232<;o\020M\340\277\263\313\226\231\245\313\355\277\242\210ap=\003\323\277p\023M\371\252\372\353\277F\177\332\245\356B\007@\343\207\327r\206\244\345\277\017E@,\013\020\343\277\204\"\017\315\225!\313?\322\266qZ\t\332\326\277\177\001\332*4?\320\277\316^C\020T\371\344\277\001\317\276[\207\277\363\277I\234-\177u\252\334?bk\234tDU\345\277\207)\217\263.p\340?\026UB\tV,\354\277ixR\317\362\222\335?K\214\'YcS\341?{\311\213\016T3\325\277\003\262om\363\246\360\277\216g\377N\221\364\342\277%2k\255\266C\327\277V\365\032\244\300\004\366\277X|]\350\315\302\305\277\321y\027\373\225J\004@4\332\326tx\013\313\277d{q\275\246\366\277\277a\351J\254%\244\004@\300\201\325\256N\004\327\277\303\361\373aX\327\322?\255\341\330\017\322\030\362\277\206\234^\3175b\344\277\301\326\3743\014\344\332?\330\325\021\177~\271\323?o\277\2568u\337H\277s#\\\022G\032\261\277P\257x\307\327\343\362?\337\3545\346gB\334\2771\357\311\262\351r\363\277S\247\304\341\355)\341\277-S\261\030\210\214\360\277\272\036\344\343\321\312\340\277]94\"j\373\341?\274e8\033\2509\337?\331mb\312\237`\353?\233\211\023\313*Q\336?+wo$E\215\352?\016\206-\'\272(\327?\300\371\271\267<\245\365?\317\360\01771\013\335\277\334\335\376\002`x\341?^\211\023C|\000\356\277\203\224,\216\257\305\323\277\324\212\211\343\253\332\340\277XD\017\314\355\266\312\277\026\247\223\221-r\331?\347\224\357r\366\376\305?\tzY\242\000e\003@\327\212\261\2703y\356?(\370\314\320\216\022\321\277X\237U\271\250M\362\277V\203.\253\270\307\364\277\272\036\344\343\321\312\340\277\024r\221\367\351D\357\277\344\024\010W\177\262\341?1 \202Y\211C\341?pO\277\375!K\013@\307\261\0016t\257\312?_\027\'Jt\303\354\277\370 \215\264\303\367\247\277b\335\210mL\222\346\277\354\313\226!T\034\336?X(\350\275\3750\315\277\335\026X\027\307\327\354?\200T\200\'\230\222\261?\236\010\004\317\017r\344\277\223\026y\300\374\000\344\277\264Y\252\240\235\216\354\277\264 4\244\031\360\353\277\362\256\275\270vH\325\277W\265\030\242\366>\331\277\220\014\3017\274\373\357\277-\214\'\025\014+\361\277vn\021B\002t\322?\027\246k\261\211\337\323?\235\242\037\037\220_\342\277\214o\273\naL\311?\206\234^\3175b\344\277`\372\327[\340\252\351\277#\273#\373E\364\243?\2167Y\371\355\311\302\277\267\221\370\274}\232\347\277]\301\303\004\036)\341?[P\377\353\271~\345?\255\032O\014V\267\362\277\010\271|\345Zr\357\277\3274\354\315\033\302\352?\t\016\032\360\316\226\355\277\214\267@\025e\026\347\277\t\016\032\360\316\226\355\277S\267B\306a\026\020@\216g\377N\221\364\342\277)\307\315\3225\356\343?\314Q\265\212-Z\332\277\017\202OI\322\374\363\277|\236\313w\232\306\344\277Z\250\350x\312\201\324\277\207\233{\2546\255\341?\214\031=w\002\351\364\277\025\274K\202\364\017\360?\335\t\205\324\373Z\337\277\317\016G\007%\265\343?F\235\374\254\341\350\263\277\025\337\341\255\r~\324?\333P\316\036gj\345\277z>%\342\2570\001@9\202\325\276\253\245\307?\344\277%\217f\260\340\277\237\373UJG\322\360\277\367\022h7V\"\364\277\200\235\313l~\322\354?\263\220R\201=%\363\277\272\036\344\343\321\312\340\277\353\032\n\327_*\360?\036\r\251\t\277\353\302\277\177\001\332*4?\320\277I\270\312\022\034u\324\277\rb\217\032\237(\346\277|\252\266\330\005\262\356\277\316\0147E!\221\332\277\346\314=\217\326\n\301?d{q\275\246\366\277\277!\336\365\202\346\261\336\277%k\234\354\225\004\305\277\321`6\352:\336\330?\033nN]\273:\300\277(j\271\311\226O\322\277\362\004\r\036\330\272\336?\210\305\200\365x\003\315?)\354N\002P\243\327?\\\360<\273\274\344\352\277y\221 \365\270\231\253\277jM\010\276\357j\347\277\r)\031\036\033\212\345\277\"\211\023\273\315\257\315\277^\302\211?\000\237\356\277\305\030\342\005\035g\002@\357\223y\315\205w\312\277\230\003\n01\214\342?;\035\r\320\"M\364\277\334\335\376\002`x\341?9\326J\351{7\300?\275\030`\277\2155\341\277!\336\365\202\346\261\336\277\237\2577\037\000\272\302?K_W\000\246\302\347\277\013\270T\005\267\337\351\277\245.\306}#\276\340\277\023g\256w\200\353\361?\330\202\032\273f\376\361\277\271\346\225\307\361\276\345\277\331mb\312\237`\353?-S\261\030\210\214\360\277`3NXdI\352\2776\206f\t\tV\343?\003\353\345iwE\361\277u\004\203\2231^\270\277\367_\373\325\313H\377?4\243p:\370\220\343\277\234{\212\371H\232\274?\271FX\370\356X\340?\322`\254o\361\"\323\277\327\212\261\2703y\356?r\014\346\261g\260\351?aOufT\317\347\277%\026D\237\306\275\331\277\341\244&a\032\275\350\277\260L\034\006\331\240\250\277\243G\301\010\031f\366?:\264z\370D?\371?\263\222 \235!-\355\277#G\255\030\307\234\363?\215\376\2614X\304\332?b\306e\231\345$\217\277\223\013\231W\030i\352\277(\370\314\320\216\022\321\277\200$pVM\255\364\277\005\247\377\004\276\216\002@\200\235\313l~\322\354?%2k\255\266C\327\2779\326J\351{7\300?\250\266}5_\212\355?\254K\340Z\3364\312?zv\376\305\3432\340?\034\372\257\023H\n\265?{\311\213\016T3\325\277\271\346\225\307\361\276\345\277\332^S\247\201\346\264\277\312\007\202c\347\210\333?c\353\r\366f\016\266\277g\317pb\300C\316\277\t\325\243\363J\370\354\277\353L\364\315\235\241\344\277\010\271|\345Zr\357\277c\263\277\331\206\002\273\277\377+\313\216@\300\340\277\342\275\001\355md\325?f@z8\311\313\334\277Y\364\362\303\034r\360\277 \272-\007/\235\363\277\033\346Z;1z\374?\376\036\333cX\004\316\277^\322n\202C\216\237\277\303c\350Z`\024\324?\334]\204y\025\250\335?\212\303\033\312\004\306\267\277\001\317\276[\207\277\363\277&\367\375\242\"\324\271?b\306e\231\345$\217\27739@\375\277\253\310?\326|\323}\341\250\320\277\220\362\356\250tw\316?\375:\002rH\212\313\277\310\014\336\274%\332\256?\275\020B^\374\300\262\277\306\341\025;\350\200\360\277PhLe\211\023\362\277\217\023M=\002#\374?E\363P\0103\370p?\337\256\364x\002\257\364?\260\021B~\266\003\304?C\253\2362\267\362\341\277\030b\221#\273\345\205\277\237\000 n\036\214\t@\001\361i\216\273\332\360\277\270;3\322e\343\343\277Z\261\001\345T\037}?b\244\022q\310\363\345\277-Z 6\261t\347?\273\362h\377\240G\313?\304\326-\374\035K\302\277\275\020B^\374\300\262\277\325\241T\255\373]\344\277J30s\357L\"@\262\205jBs\357\304\277\226\nqwt\326\344\2771\222nR\221\200\342?e\350K\356\023\353\352\277^\211\023C|\000\356\277[\230J\374G-\226\277\274`>+\252\303\177?\255\005R^\352;\351\277Q\3310}\217\276\326\277\2566v\032F=\360\277\200+\337sv\225\353?\265\212\316\\\371\217\363\277K\3164\267\305\327\257?y\343I\275\246\217\344\277\354\275\375\243\246)\343?\345\226+>\253\255\305\277\202d\020\263UV\351\277\t\216\213q\361O\276\277\\\027D2\221\002\342\277-[\003Y\260)\352\277\327\212\261\2703y\356?]3\260\375%f\342?,\033c\374\247\200\365\277\373\020\021\036\231\252\353?\234\010I\214\264O\347?\177\001\332*4?\320\277\027\266\307]\260z\360?W\230\204\366\275H\303\277\330\245\260\346\177l\346?\025C\030AK\211\345?\265\\\023\013W\254\302\277%\300~\264\256\006\326\277\326|\323}\341\250\320\277\024}q`\316\334\350\2771\235\336\272\306\230\000@_\245:Ql\206\353\277\213R\263s\206\207\365\277/\241\256=\301a\300?\334\001\344f4\314\361\2774&\244\330\013\274\350\277\026\213l\203=\354\333?\2404\247\210\310\223\307\277\037+\226]\255\333\265\277\3274\354\315\033\302\352?\027\346\346O\217\253\336\277\242\266\327\004;\t\361\277\233\235\303\332\357\\\350\277\376}\373C\010x\006@/\221\206p1\357\336\277\250\313U%\310(\335\277h\314\307\371\302$\326?\340]\372\376\313\354\327\2775\204VG\0052\332\277pL\303\365.\231\354\277a\210\353b\330m\350\277K\013\347\2246\r\300?\036\t\030\277a;\347\277\'\316y\327\035\026\351?\314S\200\217\214\240\340\277\303\361\373aX\327\322?\272\345m\347M,\340\277\205\305\3444O\226\361\277\006LN\326\264T\340?p\306\234r\030\225\333\277\300\235\374\274>\212\324\277\270DH6\3534\327\277\003\001\251R\3056\330\277\363.`\027I\267\346\277\267\2065<\266A\343\277G\340\203\344\335\340\326?\357\345\235\301tB\271\2771 \202Y\211C\341?~H.b\n\256\356?\262>\367\210k\313\364\277\033\321\311\242\201/\354\277\033\260\002g\272V\000@\026\303\272\237\035\370\326?\254\2070\210qY\272\277\017\014\312/\207q\342\277BMN~\035\350\241?`\301a_\\\014\351\277\276\330\363A\034\265\267\277\016W\257\261\272\220\354\2778\312Z\311\257o\345\277\036\t\030\277a;\347\277\346\314=\217\326\n\301?\303\361\373aX\327\322?\343\207\327r\206\244\345\277|\310\355\250\371[\325?\3757v\006\006\371\241?\025.8{\374L\361?[\230J\374G-\226\277_\264\253\004\256\316\300\277~\257\022\035\246\264\350\277\254\305\261\001\342\222\364\277\265u\321\256\215\024\352\277\305\216FLXd\354\277I\356\257\317^W\341\277/\201\267\254\326\022\003@\002\253m\342\366:\332?\331I\244\276\342_\361\277/\223Qu\2205\345\277$K\207\302\205\334\255?\234\254<d\027C\362\277\330VRC\253\377\344\277-S\261\030\210\214\360\277\255\341\330\017\322\030\362\277\236\363\'\364\263\204\002@\250\215\024\270b\225\365?|\346\225?Cn\305\277\276\330\363A\034\265\267\277\200\017\220\220\376p\340\277^\336\260M\360$\354\277\006N\034\362\230\\\372?\234\337N;\371L\334\277\301\016KP\354\357\325?\313\t\030Wm-\270?\266\363h\037[\212\254?\236%S\275\243\212\347\277utx~)\312\334?X`6\332\335<\310\277\326\\x\366Vd\245\2773\233!\374\266f\244\277\235\242\221p\035\270\263?\272\036\344\343\321\312\340\277\375;l\370\0139\360\277&^WX=/\246\277p\004\026\026\2430\321?%2k\255\266C\327\277.\376\023\016\024h\362\277-S\261\030\210\214\360\2778.\033\32766\334?\260=\240z\312G\344\277e\006f\326\352U\334?%2k\255\266C\327\277\331\020.\302^\301\360\2775\314M\243\226T\331?F\202\214\270?\215\342?X\360Y\243\331#\340\277w\260\371s\316U\244\277:-i|I\350\320\277\253\014\336c0c\365?\245\276\270~\r>\261?v\274_.\357\260\342\277|\037Q\371k\352\330\277ixR\317\362\222\335?l0\271\317[R\344\277K\2511\212R\216\341\277\020\267\017=\366\r\357\277\253p\024\367mn\366\2773B\240\243\361\237\r@\330\314\262\236\363\255\314\277\202\007!h\271\224\361\277\367\227\325\006\n\206\334\277W\021B\262\260\212\363\277\200\31247\335\314\232\277bk\234tDU\345\277\276\270\312\"y\026\305?\317\226f\351)c\007@\3314\247\020w\344\347\277\263\313\226\231\245\313\355\277\370\001\332:\221\340\300?\202\007!h\271\224\361\277S.Bs\245\261\362?\307M~\017\254(\362\277E\207\234\346\305_\374?P\014\301\257\r\253\317\277\177\001\332*4?\320\277\000\031\235\207\360<\251?\303\325\324ShQ\325?l\350\356\007\263\252\323?\272\345m\347M,\340\277\014\324{\023\247e\347\277\271\346\225\307\361\276\345\277\256\276%\374\233k\330\277!%\"\3454\202\357\277.\260\240c$N\350\277\003$\\f\373\343\361\277\221\204\021Vf\315\367?\321]x\026\021\247\306\277+wo$E\215\352?\255\341\330\017\322\030\362\277\022{\303C\214\325\327\277c\353\r\366f\016\266\277:\031\271l\204\334\346?9[j\330\232\344\002@\216(\005.\311\300\342\277\342\234h\0136\357\365?\267\327-\034\330\215\263?\200+\337sv\225\353?\375:\002rH\212\313\277`3NXdI\352\277\013\361\312\001;~\352\277\337g\310\026\264\336\363\277/\005\203+=P\351?\003d\374\302\003\215\346\277\265c\005X\033\242\242?\275\331\252[j\337\343?\022\031\200\2125\257\332?/\017\313\263\316\325\001@\014\233\005\027#\307\346\277\t9\262\261\000e\300\277 Fz\364\272h\016@\313c!\371W\031\360\2774\014\322I\3047\307?\273\032O\256\201\313\002@\356\235\374\242\301\306\004@\324\355\360H}\247\272?\rb\217\032\237(\346\277\325\343\337\r\005N\330\277z\005\257\345+\222\000@\343\334t}\372\310\343\277\202\200|~\352\271\351?V\247\247\371\320\352\353\277\215\376\2614X\304\332?}\331y\013\252\'\314?\207\233{\2546\255\341?\272\311F\331]\246\342\277Mq\022\234os\361\277\253\367%si\305\336?\r\267,%\023M\344\277y\221 \365\270\231\253\277\313b\374/9H\336\277\'\242\221`\300\026\323?\256\332L\n\214\361\325\2778\200\017y\255;\262?6\200\372\r\201#\310\277\334\210\034;Gv\340\277[\230J\374G-\226\277E\200|\366;i\331\277Er\013N\026\025\354\277e\352>\310\372\317\336?\031m\365\264\005A\323?\244C\343*1:\323\277%\300~\264\256\006\326\277\013\361\312\001;~\352\277\204\271\362znX\352?\001\036\370@YO\333\277\\\365\230\377\\\347\344\277\300\216\250\361\031\201\344?#\373u9\2141\271\277X(\350\275\3750\315\2773\363\261\000\314\262\347\277^\211\023C|\000\356\277\252iC4\203i\307\277\260+\006\262\020%\002@\000\256\231\224\333\016\022@R\302\241\036\nJ\023@\244@5\003\323>\352\2771 \202Y\211C\341?\252iC4\203i\307\277\337\\\241V\026\363\312?\r\267,%\023M\344\277(j\271\311\226O\322\277\275W=\3708*\354\277)N\222\273\246\311\324\277+\276\270n\260\234\320?\031ea\316\275\207\352\277\351\0363\367\363\370\004@\327\246\330\306#\377\353?\321\340!:\333\026\266\277l}\302\363\207\275\311\2777g\007Yq\031\327\277y\221 \365\270\231\253\277qj\331\362\022\265\013@V\247\247\371\320\352\353\277\303\361\373aX\327\322?\235jCT=\254\270?\273E\243/\177\007\n@x\321?\364=\355\366\277^\336\260M\360$\354\277_l\304T\350\347\352\277\360G7\270\251\017\001@8f\337x\315\206\321\277\277G\301Lp\216\326?f@z8\311\313\334\277\236\370\314\340\353\263\301?m\241\302\245d\332\342?\221\221z\035\212\217\330\277\376\036\333cX\004\316\277-\212\201\316\257\301\324?\331\260 O\265\204\004@\013\r\362\017+\004\350\277\322\322\230h\371_\324\277\362\'\0232m \022@\276\240\245%<\251\274\277\222\365\325n\312w\363??\205y\221\327N\017@\273q\266\351\346\250\330\277V\203.\253\270\307\364\277\263\313\226\231\245\313\355\277\246\224\357\352G\256\345?\013\361\312\001;~\352\277\177\345\262\034D\271\322\277\006iX\007\244\217\340\277\344\225H\033\254\370\322\277\327Q\366\376\n\375\352\277+wo$E\215\352?<\311Z\276\223{\355?\304R^\263\266\363\237\277\271B\016\005K\374\363\277\246\\\\\021\303\304\347\277\233\235\303\332\357\\\350\277\322`\254o\361\"\323\277\341$?E\243p\304\277\037^\265\311\325_\345\277\240\210\034\263\230%\300\277l\367B\323\327\263\343\277[\230J\374G-\226\277_P\235F\370a\355\277\267Ep\026\217\307\334\277\367\345mo\374|\320?\020![\3106\274\362?\005\217w\234\030\034\304\277\212\3367\020\324\010\016@\205\324\361\250\272K\342?s#\\\022G\032\261\277\020D]\t\014[\340?\253\025\316\t\263\327\316\277l0\271\317[R\344\277\030\205\374>\356~\316\277\361\322,\227\224W\373?g\334C\245\213\300\353\277$\243\376\375\010\207\313?/\223\22625\023\350?\363\365\351\032\305\030\346\277X(\350\275\3750\315\277;{p\021}\321\361\277\005\253\236\252\010\242\301\277%2k\255\266C\327\277\213SO?\314\350\330?V\203.\253\270\307\364\277R\265\253$h\021\262?P\014\301\257\r\253\317\277\374\223\271\364X\337\014@\334>\207n?\210\351?\017E@,\013\020\343\277\275\317\215\026\343\373\363?\326\313b\376e\313\262?Y@~\201\220\006\357\277w\030\330kH\356\360\277\2157m\356\200@\316?\263\313\226\231\245\313\355\277\005W)\2008\020\311\277\271\255\037\313m \345\277f8m\265E\014\366?\272\311F\331]\246\342\277\232\002\2269s\311\374?\370\216\305\213!\256\234?%\000\025\241\274\233\371?\317\360\01771\013\335\277\331\225\357\222\260A\247?f1&m\244\302\354?3y\341\246\322\217\013@B\334\342\355\264\364\321\277\271\346\225\307\361\276\345\277\256o\354\026\312\333\360\277V\274\244\247<f\365\277\351~@j\2355\361\277\031\211\034\303\365\306\320?\005\247\377\004\276\216\002@@\001d\035\317\251\345\277/=\321G\035\\\344?{\215\204\322\216\330\340\277\177S\236\312?\306\014@\030\376\'\252\261g\264\277S\265\242\034@\372\336?\253\025\316\t\263\327\316\2778\003\321\3053\016\346\277\035\000H\030\201\307\326?\216Y,\001\252\203\335\277\rb\217\032\237(\346\277+\351[\035M\312\353?l\223\226\272\343c\310?\005\253\236\252\010\242\301\277#\277%\014\371\014\311?/\326T\267J7\001@\343\n\336|\261T\274\277\002]\322b\177\202\362\277\\\266\343\2339\221\347?k\032\320\333\000I\005@\232B\004Q\371\277\342?\224\274_rF\331\362?\024\217,\374\227\215\362\277eT\264\302\327\222\354\277E\363P\0103\370p?e*\257y\225<\301\277;\021BnYb\323\277X-i\300\240\020\361\277\214o\273\naL\311?9\326J\351{7\300?\263\004\r\226)j\356\277\214\247\t\'AX\304?\025P\353\203\026\006\303?\017\014\312/\207q\342\277\252\260\026\37174\343?[\343ix\361g\315\277\r\255\300\262\354w\360\277\270t\251\316\351\201\344\277\256d|\256\224\303\002@/l\354\214#\347\256\277(\370\314\320\216\022\321\277\2642\203*\'p\374?\032\224\333X\312\320\002@)N\222\273\246\311\324\277x\003*\353{d\333\277<\336\303\201\273\'\360?\213\324\217\003\371.\352\277\347\224\357r\366\376\305?\277G\301Lp\216\326?\314\321\311:\215!\275?\177s\306#<|\321\277\037\263R\324I\204\343\277\330\217\310?/\236\345\277\326nE\355\236\025\356\2779\236\374\314\233+\305?\312%*\3720\233\313\277\216\340Wc\333\246\240?)xo/a\201\342\277\211\361\336\361\214G\355\277\322\356\277v\351\345\321\277\033rPnnS\245\277\021\350\307\343\225\336\374?3Y\370U\r\342\341?2.`\224\333\023\317?~\204\r\311Gj\325\2773Y\370U\r\342\341?H\r7U~2\313?\327\364\006\264n;\363\277\320}\205\330\316\366\333?\234\267\332&\334\276\314\277\3412:h\022\200\347\277\014\030t\007wk\242\277}\323\254>\316e\007@]\373\377;\204=\357\277&R\334\256J&\361\277g\277V\\\271\304\340?\224\330\206\2006_\360?j7E\325\241y\360?-S\261\030\210\214\360\277\'\025\034\277\"+\324\277\313\260\264\227\315?\373?\255S\305\010\332U\363\277!\336\365\202\346\261\336\277:&g\361L|\372?\"\2635\354,E\356\277P\014\301\257\r\253\317\277\n\252\236\212N_\240\277`\373\004\373\344\031\300?\2323\n\303C\373\230?f\025\327\211,\236\341\277v\337ao\304O\360\277h\037\267\347\364A\343?\207\rh\245>\352\342?&/L\277\002\340\264?o\366_\260\330\376\340?\324\002\335\030\333m\354\277\322`\254o\361\"\323\277\324\221d\026\221\363\360\277\267\3251:\311\221\354\277\324\265IzeG\321\277\"\223\020\001\263\222\324\277\331mb\312\237`\353?zVFm\226\374\306?\331\327\267\305\332\"\360\277\263\222 \235!-\355\277\334\335\376\002`x\341?\346\314=\217\326\n\301?\r\267,%\023M\344\277\207)\217\263.p\340?\263\313\226\231\245\313\355\277\253U\260\014\333\234\342\277_\245:Ql\206\353\277\220\022%]^\220\366?\267X\202\300\371\373\346\277\313\204\304J\212\242\320\277|\037Q\371k\352\330\277]\2542ln\336\360\277\275\2007I\364,\327?<\255\356\362\376\027\355\277\013\r\362\017+\004\350\277\177\345\262\034D\271\322\277\036\344 \n\221A\331?\212[6:;\357\201\277\026\033\351\351\322\330\350?\3778\306\246\223\333\313?\323\'\300\355\266?\330?\016\276\233B<5\373?<B\216\377<\002\370?\326<c\314F<\316?\t\016\032\360\316\226\355\277%\r/;Al\346\2770\314\307q\024\324\345\277\272\220\320\334\331\007\342\277\0055\023\014\266Q\001@\2531\365\027\243]\314\277d\371\257{<\030\344\277\254+\216\333{\007\302\277\340\335\234]\236[\351\277\250g\221\343\027v\275?D\177#N\206o\314?\017B\327\301Q\362\334?p/\271\304?^\354?\022\031\200\2125\257\332?\202\016\220\205\342|\350?\275\317\215\026\343\373\363?\271\272\325%\034^\335?\256\373XL.E\253\277a\326\362\367\013W\371?\0357\256R\001B\356\277_\264\253\004\256\316\300\277\233\250\350\000y\322\344?\244I\333:\027\236\360?\227\027\'\322\"\024\335?\201\344\343\356\327z\273?\373y-p\300s\314?\316\0147E!\221\332\277\322\266qZ\t\332\326\277\273\354\334\004w\024\367?\264\261\365\322o\256\323\277\321\200\321Zk\325\354\277/l\354\214#\347\256\277\177s\306#<|\321\277\267))\t\375@\366\277\307M\342+\035\310\234\277\322\266qZ\t\332\326\277\342r\037\202\277\006\377?\032Q\316\246\025\273\325?\310\315=\257\220M\242?\270\002\275\325\341D\343\277ixR\317\362\222\335?X\237U\271\250M\362\277\000\263\227M\2279\366\277%\026D\237\306\275\331\277Z\373\034$\241|\344\277\277:\356\t\245\021\351\277\311\351*\224Q\336\373?\234\036\275GcO\372?A\226RW\254\205\364\277\340]\372\376\313\354\327\277\220\022%]^\220\366?Eq(+\027`\351?}X\370\275\001\360\260\277\177\001\332*4?\320\277\271B\242\357\216\313\372?IF\336\031\0248\323\277\213U\320\307%u\313\277\327\364\006\264n;\363\277\277\226\027\032_]\363?\rb\217\032\237(\346\277]4v8\010\334\357\277&/L\277\002\340\264?\262\241\221Pcu\302\277\202dUp\3723\354??\032\036\326\022\303\n@\313\t\030Wm-\270?\307\016B\036\210;\220\277\272\320!\014C\277\362\277\357\221\370D,\353\327?\256o\354\026\312\333\360\277\214\213\342\030Q\322\306?\333\356\266n\301\316\276\277\333\035\277^\n\"\357\277^\347\305\261uv\337\277\210U\025\205\312R\336\277\013\033O\330[0\303?\005\217w\234\030\034\304\277\246\261\371\0337\351\345\277]\301\303\004\036)\341?\346\314=\217\326\n\301?8\220\221\251}\234\006@\252N\032\227\232a\365?z\344W\343\303\261\205?ixR\317\362\222\335?\277G\301Lp\216\326?\274\272\006\356-\305\304\277X\237U\271\250M\362\277\322D\017\334JX\333?9\236\374\314\233+\305?Y\364\362\303\034r\360\277\234\337N;\371L\334\277\274\310F\316A\262\352?U\226\322\245RU\271?\214\247\t\'AX\304?\272\236\256\027,\330\337?\376\225\2148{\227\224\277\016\206-\'\272(\327?\334\301\327\364o\362\343?\323\\\333P\214\016\230?\300dA\003\026\016\301\277\360\\\023\223\005\375\342\277\3137Y\201\234\032\343\277\017E@,\013\020\343\277y\221 \365\270\231\253\277\"\016W\033\345\376\353\277\274\372\201\2143\221\277\277*1C\315\022\261\321\277I\377;2\017#\350?\260v\026wN\346\344\277\325\330\337\245~\265\365\277+\3763\r\266h\333\277f\007\277~\240O\311\277\344\225H\033\254\370\322\277%\2100\230\316\372\332\277\215d\307\254\351=\304\277\361K\257\005\335\317\351\277\275\010\004\023g\232\364?Z\233\237\260H\300\354\277l\227\230\313\226|\275\277\315\267\231:\255l\334\277\265\347\275\247\225Q\353\277\32588[\324\224\303\277\n}D\314\345a\272\277|\037Q\371k\352\330\277E\266a\263~K\346\277,\000\377\021\025\257\341\277\025\337\341\255\r~\324?\351\214\366\317gg\361?\351\236\245\345\307#\232\277\344\266T]NL\250\277\337\202\230\026\003\341\340\277{I.m&\242\346\277\035{\004\270ix\350\277\361\022~\306\375\016\354?\207\rh\245>\352\342?\003\201K\261\227\245\351\277\3343\304\355w/\345?!l\t\212\336t\335\2771v\002\207\374\034\342\2772\342j[\300\304\343\277g\032[\243T?\351?\244k\tz\201\323\274\277\250g\221\343\027v\275?\242R\301p\237\376\350\277\002\305\023h\2154\265?^J]z\033\347\025@Xf\337\274$\257\361\277\017~\266(\217\256\343\277\300\216\250\361\031\201\344?\263\313\226\231\245\313\355\2770a\266\253\361\257\364\277\262\231\030\270#\205\362\277\014\324{\023\247e\347\277&/L\277\002\340\264?\265\347\275\247\225Q\353\277bk\234tDU\345\277\201\344\343\356\327z\273?a\234\233r\235y\302\277\335\t\205\324\373Z\337\277\322\322\230h\371_\324\277\021J\177\210\216\323\347\277\253\251\212\363\361\014\367\2777S\022\214\0070\352\277(j\271\311\226O\322\277/\221\206p1\357\336\277\267\312n\271\0019\350\277\214S\224\374p\306\313?\346\301]&\362r\307?\254K\340Z\3364\312?D5\035\004_\266\002@\323\374\235\261;\266\357?\262\205jBs\357\304\277Pg\223\214M\227!@\306\367\330#6r\327\277\024\354\207\\\360\177\323\277\312\260 \255\211p\364\2779Xn\320\2472\344\277\356\222 %\320}\335?\017\323S3\003\323\341\277w\336\355x\006\215\352\277\334\301\327\364o\362\343?E%x\257\240\356\320\277]4v8\010\334\357\277\273\201_)\230\277\334?\300y\310+\313D\360?\005W)\2008\020\311\277d2&x\300\266\344\277\313\324\350(A\205\337\277\232\212\2610\205(\336\277\340]\372\376\313\354\327\277\014M\327)\330\212\377?d\207\303\2024\333\342\277\336\326#\320z_\361?_l\304T\350\347\352\277\245\273\361\242\273\357\313\277H\370\314\024\346:\361\277\242\033\370\360\207(\230\277s\361`=\373\355\244\277\241-\336\233\303,\315\277\366\346\013\325VT\320\277\256L9\003\224.\327\277l0\271\317[R\344\277)\334\245\302\236\214\323\277\'\342\014\377\305\342\335\277\321\321?\300Cf\307?P\014\301\257\r\253\317\277\t\216\213q\361O\276\277/\005\203+=P\351?^\336\260M\360$\354\277\323]\215\201=\277\260?%2k\255\266C\327\277C\366\203\264\352\021\354\277\347\271\241j\"\033\341\277\224\274_rF\331\362?\266t\356\213\216_\347?\364\364\006\370\305c\343?\306\364\032P\014;\265\277{\002\321B\306j\316?d\3009\177\270y\343\277.\305\235\021\220\311\361\277\021N\020\323\353\203\303\277\n\234-\367\306Y\354\277\026\213l\203=\354\333?h\377\366\270\301m\365?\022\031\200\2125\257\332?s\231\242\252\276\357\367?{;x\007\\p\326\277\325\337N\303\247\235\354?d{q\275\246\366\277\277\005\253\236\252\010\242\301\277\307\366\260C\222\337\321\277RHoN9\000\357\277\231\001\275-y\261\241\277[Hk\005r\305\334\277!\230\331\327\177\021\337?b\244\022q\310\363\345\277\224\231\254^\020,\351\277a\210\353b\330m\350\277\001\243;\241p\236\351?F\177\332\245\356B\007@\024[\306-\232\301\353\277\370KR\037|\217\322?\372\327Udp.\350\277:f\256\260\273\037\312?\312\214;I\265\034\344?\017\014\312/\207q\342\277=,\020\324\223\356\303?\210\201\345\322k\357\337?c\263\277\331\206\002\273\277\254\205\257\377\027\315\327\277\204c-\220V\241\346?\257\330\022\331\353\270\362\277\215=p\273k\363\n@\207)\217\263.p\340?\001A\253T\217\374\364\277\233?\314\256Q\t\324\277`\372\327[\340\252\351\277J8mq\356\343\345\277\316\232JL\031T\331\277U\356\216\236z\335\331\277_\027\'Jt\303\354\277\337@zH&m\315?\207\233{\2546\255\341?\334\301\327\364o\362\343?d\371\257{<\030\344\277>\354\213-f\013\326?\271\247\233\246)\213\345\277@sP\026\327\346\346\277\327\030\305\277+<\355?I\021F\373w\305\365?\324\227\241\343\0335\301?l\276\314\326S\025\343\277\211*U\356\020\346\355\277\202y\ra\301\321\362\277\222.LkN\026\364?cr\013\222m=\374?\204\325\324\313\271\000\345\277f9\272S\354{\305?=$|\355K5\353?\t9\262\261\000e\300\277\026\213l\203=\354\333?\301\344(\037\215Z\345\277-S\261\030\210\214\360\277Y@~\201\220\006\357\277\007\0167\330\353\325\342\277\321\331$n?\207\360\2777\177J\004r\256\002@_\245:Ql\206\353\277\347\215\036\260\013\372\366?\317+4P\367\260\356\277\2566v\032F=\360\277-\243\352\010v\020\300\277\270;3\322e\343\343\277\020\0239M\260Y\371?\223O4z%}\347?\031\265\242\224\221\251\356\277\025`\"r:\304\345\277\346\314=\217\326\n\301?\376\036\333cX\004\316\277\327\014\225\241\033s\340\277@:\332\031SH\346\277h\314\307\371\302$\326?\300V\025\030\225\227\346\277^]\215q\340\035\320?\3343\304\355w/\345?\221\301\333\265\210\334\345\277\373Z`\340\361\177\001@s#\\\022G\032\261\277[\006\203\323\245\343\252?\"r\036\202\341\027\360?\030\376\'\252\261g\264\277\265\256G\253\021\263\352\277c\253\201\216\361\333\374?aOufT\317\347\277\316\232JL\031T\331\277\376y\322#t\251\361?/\277\255\327\217\003\371?6Y\226\260K\305\351\277\327\212\261\2703y\356?`\372\327[\340\252\351\277a\210\353b\330m\350\277W\230\204\366\275H\303\277\032\177\225\002\307(\304\277\302\177\017iP\232\321?\332\243[g\327j\312\277\266\035\374\001r9\315\277-\213\305\0139\243\247\277\277\217^\2000\273\270\277(\370\314\320\216\022\321\277\350T}5\036b8\277\342p\014\2516!\342\277J8mq\356\343\345\277l0\271\317[R\344\277\222*n\215f\352\320\277b\306e\231\345$\217\277{W\237\025L\366\323\277p\374\201/[w\350\277\021\366\351^\034A\366?\334\363r\276\016x\364?\250,\333y\"w\361\277\307d\335\303?{\374?\035l\022\222\006\214\300?1\3503=\2517\346?\214o\273\naL\311?%\244W\246\276\200\330\277\321\213\261\303Om\346\277\213SO?\314\350\330?\345uK\005\272\344\346\277L\001`\324\007o\323\277\3206\024\271\333H\350\277\377\373i\366As\323\277\231,\377\301\213\262\354\277\033\022-#\347\214\332\277{W\237\025L\366\323\277\033v\250s\311u\356\277Q\370-\210e\336\352\277e\243\352\220$a\340\277\277G\301Lp\216\326?\030i\027\327\035\025\360\277\303\016\220\r\221\315\310?\2252\240\316\354\206\341\277\332\216b1\354\003\252\277\256\223ee\342\376\347\277\233\250\350\000y\322\344?e\243\352\220$a\340\277\214I\236\017\0016\362?\264 4\244\031\360\353\277\023\371\352\236\014}\005@\017\232\3356\1774\341\277\336\026u\377\343\026\342?\337#\346\234\355v\327?\356\266q\236`\002\367\277\272\334\2248E\241\314\277|\255d\000d\255\327\277u\303:a\324\311\362\277\333P\023\334\013H\350?!\372\034\221\3267\334\277X(\350\275\3750\315\277\275\317\215\026\343\373\363?_l\304T\350\347\352\277 \273\371$\355\303\277\277f\025\327\211,\236\341\277\202dUp\3723\354?\236l:bM}\325\277.\376\023\016\024h\362\277e\010\275\357\247\315\364?\'\202\300S\177\215\275\277c\263\277\331\206\002\273\277\313b\374/9H\336\277%\300~\264\256\006\326\277d\371\257{<\030\344\277\324\355\360H}\247\272?A\344Y\354\337n\345?\nc\267\372B\273\353\277]4v8\010\334\357\2778\n@\343\\\366\374?\307M\342+\035\310\234\277\2531\365\027\243]\314\277\031f\325\304{J\360\277\304\\\310j\326\035\361\277\315\212g\362{\007\033@\316\301\333=7-\326?3\313\344N\025\037\343?\344m\243>}\003\334?\253\"\241L~T\354\277f\252Y\256MI\367?y\310\274\340\347\364\275?<\337\333[*\206\202?:\"\211\023eP\327\277\276$+!W \362?C\213\342\356vm\006@7t\332\233<\226\344?\005W)\2008\020\311\277\021ag:\373\225\340\277\266\003\345\265\205\327\350\277\300y\310+\313D\360?\202n\235\370\213\271\004@\366<\321\277n\013\324\277]4v8\010\334\357\2775\314M\243\226T\331?\360\030\275-\235\306\350\277\013\r\362\017+\004\350\277\316(^S\021\027\330\277\364\202\032\377\275&\342?\005\253\236\252\010\242\301\277\362\r\275\305\026.\366?x\221=\362s\'\332\277\016oEuMf\336?\325I\250`\237\021\255?\250\006\227&\253\r\344\277\017E@,\013\020\343\277\354\377\022\177\371\324\314?\335z\0040\273\'\310\277\233\252\2222\310\212\003@\027\3565y2\207\344\277\253\025\316\t\263\327\316\277^Afc\360\227\322?\262\205jBs\357\304\277\005W)\2008\020\311\277\325Q;\274\257\332\355?\265\256G\253\021\263\352\277\326P\344\255\016W\375?\274e8\033\2509\337?\027z%\3361\376\327?\276\262>(O\343\360?\\\320\241J\214\355\326?%\200rB\352,\370\277\250\277M\334?\376\335\277w\177T\374\032\023\004@+xRGDB\355\277\253\025\316\t\263\327\316\277\005\253\236\252\010\242\301\277\214\213\342\030Q\322\306?\325X\202\004Q$\367?\256\250b\023Nz\361\277\346\260\026\201\346\204\303?\307M\342+\035\310\234\277y\034\300\271*.\345\277\010\200\006\351\326\323\356\277P!(\331 \341\325?U<\263\033\313\005\360\277\367\013\215\004q\t\344\277\207\'\177\361*L\327\277%\244W\246\276\200\330\277\034\302a\367g\376\271?\\\036\037ev\033\362\277F_\212wj\356\364?\202\326Ai\002q\355?\217/tK\362\250\371?\2531\365\027\243]\314\277\326|\323}\341\250\320\277\270;3\322e\343\343\277.\334\210\305\343\376\244\277\335^\335!\313\241\312\277.\"\322\031\321h\354?[\t\216\314\306\320\321\277\200\344\024\267\351\341\322?\347\251E\276\373\177\364?\300V\025\030\225\227\346\277d\3009\177\270y\343\277\323\240\221\211\236\251\372\277J\201G\360~\273\347?\323nb\325\273T\343\277jp\273\321%\030\361?\341\n(\371\266\016\340\277-S\261\030\210\214\360\277\362 4,\310@\334?&/L\277\002\340\264?J\323S\273\261#\322?*\224\276\022\331\245\355?\022\3411nU\243\337?\360sP\256\342\330\267?|\255d\000d\255\327\277\303\361\373aX\327\322?\242\262>\344\367\272\340\277!\336\365\202\346\261\336\277\nc\267\372B\273\353\277u\225\022\255kz\n@\323\247\330\321?\363\343\277.\305\235\021\220\311\361\277\302\345\177-.\336\365\2772.`\224\333\023\317?\265c\005X\033\242\242?\017\251Y\327+\334\336\277\010\200\006\351\326\323\356\277\271\247\233\246)\213\345\277\025.8{\374L\361?\022\3411nU\243\337?-S\261\030\210\214\360\277XD\017\314\355\266\312\277)N\222\273\246\311\324\277\276\330\363A\034\265\267\277\254\340\'a?\014\036@%\244W\246\276\200\330\277O\022\247y\023]\327\277C\262ye\234\013\362\277\314\321\311:\215!\275?\022&\006:v\260\360\277\273\362h\377\240G\313?\372\273.V\200\250\352\277+F\250\340\266\006\230\2774v\345\236\337\335\354\277\337@zH&m\315?\'\t\236\360\343\273\332?\270;3\322e\343\343\277P1\244\204\351|\353\277~\217w\254u\275\324?\364l2XmX\341\277\352XxvnY\200\277H\r7U~2\313?\331\020.\302^\301\360\277\363\365\351\032\305\030\346\277\215\013\373\374\331\205\342?g\247C!\267s\221?v\220\344I\276-\315?\327\304\033lC\346b\277VtD[;y\261?`3NXdI\352\277`X\212\312\331 \333\277\362\256\275\270vH\325\277z\344W\343\303\261\205?K\3164\267\305\327\257?\315L\3151/&\376?\321R;\307\313\316\345\277\006\035Z\333\376w\333?\005sP\216(\226\306\277\3701\321W\350r\361\277\256o\354\026\312\333\360\277,3\361\351T\270\342\277Lw\226\300\263\010\361\277\302*\267\033\201S\306?\317~#>)\316\333\277\003\262om\363\246\360\277P/\326h\005u\361\277\"P\342{\356\356\337\277\347\243\341\230Y\353\355\277\271\346\225\307\361\276\345\277\257\241`\210Q\016\333?M\305\235U\347\361\341?d2&x\300\266\344\277\347\r|Q9\213\365\277if\302v3\204\014@\317\360\01771\013\335\277f8m\265E\014\366?\231WP,\004-\360?:*\273T\353\354\347\277\265\256G\253\021\263\352\277\250\375\306\177\312\231\323?%\300~\264\256\006\326\277\256\326h\247\234\000\004@\262\203\351\271\031c\322?\025\234\263(I\332\337?5\240}U\365\267\327\277X(\350\275\3750\315\277\\\310\rdD4\356\277M\251\024\2425O\354\277\021\242\256]{\244\241?\322\266qZ\t\332\326\277\021X\227\223\032\"\320?\373\314u\373\213\226\356\277\356L\327\345\200b\357\277\356\022\233\256\032N\341?\351\305l\314\353\005\362?\310\345\363\030\320\254\323?s#\\\022G\032\261\277\322`\254o\361\"\323\277l\301]\026\225\321\326\277E\1778\271\262\207\246?v\021\3758c\325\340\277\301\326\3743\014\344\332?\376\036\333cX\004\316\277u\263\324D\263\032\305?d\3009\177\270y\343\277P\014\301\257\r\253\317\277\214(J\353m\236\345?\323\356\242y.X\243\277\177s\306#<|\321\277\341\300\222,\257 \351?\341\302]F\254\265\250?\2002&\274\027\337\364?\347\224\357r\366\376\305?\016\037\255\253\364\264\361\277\201f\377\241I\354\n@8\300v\" \221\301\27767\353}\027\252\354\277d\353\334-U\247\336\277$\275\355tmJ\342\277\275\020B^\374\300\262\2779\326J\351{7\300?\271\346\225\307\361\276\345\277\345\\\\\231q\025\330?gN0\236\223\375\354\2777\365\032`i\334\325\277\332\210a\370\353S\343?\204\325\324\313\271\000\345\277\253M\034&\223\343\311\277\220\233H5r\201\364\277\001\317\276[\207\277\363\277d2&x\300\266\344\277\262v\371\2161\247\357\277\374A\204\007\224\235\366?S\222x\006\343\274\363\277\202@\227d=3\362\277t\311\276\205\030_\362\2776\203\270\341\252Z\332?b\026\377i\3200\347\277!l\t\212\336t\335\277x\347\002\335\213\336\335\277\021ag:\373\225\340\277\234\302\272\217\300V\306\277\003\371\233\317Aw\361?9\202\325\276\253\245\307?\330\236a\310\370\204\330\277\353\276\340\306\245\336\345\277dNM\206\260<\342\2777\0200\035]\274\365\277\'\277\257\206B\310\276?\004y\371po\010\360\277\251D\256$t\214\341?}\235\350T\233\021\342?/l\354\214#\347\256\277\301\324{\253\262W\270?\016\367}T|\004\365\277\226#+0\270\357\t@\322\356\277v\351\345\321\277\267\037\014\304u]\346\277\236\010\004\317\017r\344\277\375=:\024\360@\352\277\2157m\356\200@\316?\274e8\033\2509\337?\255\032O\014V\267\362\277/,\205\343\260\221\317\277\001\233N\035\217\337\333?\260TkD\032\313\347\277WC,\251\356\001\330\277/\257\275@%\231\345?\031\004\331b\336w\342\277-Z 6\261t\347?Y\364\362\303\034r\360\277\244\252\357\272T\337\332\277\223\002?6\3569\324\277\202\007!h\271\224\361\277\220\027\241\240\240\223\351\277\364f\363\360\315\240\344?\030z\233c\350B\322\277y\221 \365\270\231\253\277\014\206\254\336\324!\227?\336\352>\330Wq\277?\326\237i\251\372\026\365\277/\005\203+=P\351?\005\217w\234\030\034\304\277b\335\210mL\222\346\277f\334`\215\250\377\340\277\224\330\206\2006_\360?\301\333;\220\217\247\337?\313\324\350(A\205\337\277^\227+N\010O\326?\222\372Q\262\014{\346\277\270;3\322e\343\343\2772.`\224\333\023\317?)\334\245\302\236\214\323\277\032Q\316\246\025\273\325?z\344W\343\303\261\205?\256\345\266\355\271D\325?\253\025\316\t\263\327\316\2774\354\332\270\331\350\t@\t\216\213q\361O\276\277\323\374\235\261;\266\357?*\350\221\256Ah\245?p\224Ff\036\355\375?yJVM\3124\354\277\237\335\376z\261\'\321\277]4v8\010\334\357\277]4v8\010\334\357\277d\005\275\255a\274\226?\202\362hw\362\366\352?\261\022\233&l\375\320\277\266<[\262\tv\351\277R6\000\311\211\177\345\277-7\212\n\230\006\363\277^\336\260M\360$\354\277\3757v\006\006\371\241?`g\264&b\025\361\277Z\263R\\\370\324\323?\"P\342{\356\356\337\277\207\307\274\300-\262\314\277`\017\325\tL&\363\277\202y\ra\301\321\362\277.w*g\240\257\347\277h\314\307\371\302$\326?XD\017\314\355\266\312\277j7E\325\241y\360?\0278\363\032\302\023\351\277FU\001\035\'\332\353?\031\306\331\215\321[\271\277\341C\343\262\337\212\343?\024E\342\272r\337\243\277|Zu\0222\220\352\277\006\236\202vo[\310?O\214\305\263\2416\351\277H\327)\303\263\261\340?\240+\006\020\345\020\362\277\202+\232\266\321\267\350\277f\275\320\024\377[\335?\035d~\253\276\322\347?*V\304\374,f\345\277\333\356\266n\301\316\276\277\322\356\277v\351\345\321\277\316\232JL\031T\331\277\024\266\347\\R{\351\277G-`t!\321\275\277]\313Y\346\340\022\317\277bk\234tDU\345\277E\363P\0103\370p?\014\177\336\0103A\351\277c\353\r\366f\016\266\277\013\361\312\001;~\352\277\364\221n\312\342/\322\277\333\203\300\366\246s\346\277\337x\310d\006y\310?B\330Q\243WD\346?\202\007!h\271\224\361\277\347\342\273\272\177\036\365?A\365\375b\256N\247\277\001\n\003t\357e\356\277\204\325\031\211^\336\347?\3314\247\020w\344\347\277r\024z\230\257i\302?\325\303\'\265\267\027\357?\220\304\023X0\223\324?\230Q;4\001\212\335\277\230\3666\355e\017\325\277\325\303\'\265\267\027\357?\207\233{\2546\255\341?\010G\220\354R5\356\277s\221\307l\275\342\337?\231\0079\325\314\037\306\277%2k\255\266C\327\277\272\036\344\343\321\312\340\277yf}[\272\272\351\277\236Az\313\223\020\345\277\366\020\316i\020\212\210\277\324C]\201]\n\320\277o\322\244\273\240\277\332\277\327\315o=I\235\007@\201x\300\302\032b\303\277\005\253\236\252\010\242\301\277[\006\203\323\245\343\252?\267\312n\271\0019\350\277S\222x\006\343\274\363\277\325\330\337\245~\265\365\277]\307G)b\276\340?/l\354\214#\347\256\277\022\375a\204m@\260?\334p\216M\232>\363\277x 4\034k\237\313\277.\376\023\016\024h\362\277v\030lV\214\275\367?P\014\301\257\r\253\317\277\331\232\355e\270\023\342?-\213\305\0139\243\247\277/\223Qu\2205\345\277\345\"\276\274I\344\321?\265c\005X\033\242\242?l\350\356\007\263\252\323?\347\224\357r\366\376\305?\"]\265\276\271k\355?\332\351yc\034\344\017@\330\217\310?/\236\345\277\233{\030\250\273A\353\277H\034\213 \243;\353?\243`2\031\305R\326\277\275\2007I\364,\327?\nc\267\372B\273\353\277&\367\375\242\"\324\271?X|]\350\315\302\305\277\222\365\325n\312w\363?\177\001\332*4?\320\277aOufT\317\347\277\254+\216\333{\007\302\277,[H\026U\007\355?U\212\272\260\376\356\340?\275\010\004\023g\232\364?\211\n0\003\2273\324\277\246\261\371\0337\351\345\277\327f\363\254vx\364\2772\026\205\023\244`\352\277\331\211\211\330\217\346\350?\034\220\001f\325\363\361\277\233\314=e\374\245\000@\253\025\316\t\263\327\316\277\253\025\316\t\263\327\316\277\353\037i2\205\356\355\277\256\250b\023Nz\361\277\365#S\032|\244\276\277\2552\005\317\212\215\355?z\237\363W>Y\352\277\273\235\2067\210E\332?\253M\034&\223\343\311\277h\204\036~\306\270\014@\260\261\177M\271i\331?\375,\255d5:\005@l>\264\362\312a\327?\303\271\255Ex\313\327?6\377\241 \230z\302?%\244W\246\276\200\330\277b\306e\231\345$\217\277\004\244M\362lD\367\277->\371\'\301\356\351?\363vo\234\226<\332\277\365\220\320d\210X\322?\256\034\035(:\277\354\277\3072A\225c2\021@\202\007!h\271\224\361\277\031m\365\264\005A\323?|\255d\000d\255\327\277\005\374\234\0172\263\000@2.`\224\333\023\317?E\363P\0103\370p?\353\351>\270\235.\316\277*\224\276\022\331\245\355?\276\240\245%<\251\274\277\276\236$\235\342\034\332\277^\302\211?\000\237\356\277\376\036\333cX\004\316\277\201\0342\013\270\206\266?|V\001\260\361\036\324?\222\331\256`\332\361\365?Kp\273\215\316\357\340\277\200\017\270e\206\017\356?M\177\017Y\363\370\300\277\320\201EQ)\230\362\277{;x\007\\p\326\277\303\361\373aX\327\322?\360u\3216<e\332?\347\342\273\272\177\036\365?\303\325\324ShQ\325?h\306\200\274=\317\364?t\222 \025s\334\314\277\202\017s\250\3411\353\277V\255\323\236\233\277\024@\325Q;\274\257\332\355?\375:\002rH\212\313\277`3NXdI\352\277\273\362h\377\240G\313?P\014\301\257\r\253\317\277\332\223\321`!l\001@\300\217\213\024\0316\347\277K\013\347\2246\r\300?p\004\026\026\2430\321?\250g\221\343\027v\275?\345\370\233\213\352N\341\2772H\224\310\344\264\350?`3NXdI\352\277\233\223\307hx\007\000@\233\301a\347\n]\331?2.`\224\333\023\317?<\320\241\0065\305\366?\313b\374/9H\336\277\333\021\324\375\2366\345\277M\251\024\2425O\354\277\021ag:\373\225\340\277A\314\206A\216Y\365\277%Fn\225![\215?\204\322ka\000\343\336?\316\0147E!\221\332\277\343\373\347\r\207-\302\277{W\237\025L\366\323\277\266S&|Y\371\354\277x8Y\031\250\014\264?\331\020.\302^\301\360\277N\271#\273\321n\261\277\3746\353\365hY\314\277xY\357\325\223\033\337\277\017\251Y\327+\334\336\277\007q\024\303s\347\306?\262v\371\2161\247\357\277\333\330\242\276\277u\347?nL\340\335K\330\341\2779\326J\351{7\300?\002s\037\306\026/\337?\017E@,\013\020\343\277\277+\232>\200\010\331?c\353\r\366f\016\266\277\377j\250\307\353\264\353\277.\305\235\021\220\311\361\277(\217:\371\260\004\346\277\211*U\356\020\346\355\277\227v\331K8~\346\277\257\275\207\226A\224\330?\363\005f\306\215\264\313\277\240:\321o\235\344\220\277)\033\203\373I\201\336\277\253\202c}{\356\346?d\371\257{<\030\344\277\'\034<\257\254!\367?\272\361XH\271\027\352\277\233\225\221\231i\300\327\277K\342\354C{\n\345?*1C\315\022\261\321\277>%?\021\251\351\364?X|]\350\315\302\305\277\020\217\267\303\353\203\006@\017\014\312/\207q\342\277\202y\ra\301\321\362\277\275-`\204~r\336\277\322D\205a\001\235\325\277y\036\263\223\021\023\331?\226\nqwt\326\344\277m/\326\254\\\235\341?\027o/\346\245y\366?\332l:\352\373\315\345?(\370\314\320\216\022\321\277\024}q`\316\334\350\277\353\367V\303)}\346\277/Z\333x\014\227\344\277\256\004\234\317\323\001\265?.\260\240c$N\350\277o\3715\255\276\230\327?E\363P\0103\370p?_l\304T\350\347\352\277\205\324\361\250\272K\342?\317\360\3577\217\n\364\277\014\177\336\0103A\351\277-Z 6\261t\347?\010G\220\354R5\356\277-\314\014/\271\261\350?\220K\233Y\342.\367?\260\365\032p\306}\306?\027\274\232\257\223\001\364\277\r\267,%\023M\344\277\334\301\2227\313\024\341\277\2238$\3630\034\341\277\224\303051\336\301?\272q!\262\230\236\003@\214o\273\naL\311?\t\325\243\363J\370\354\2770Iw\353\343i\353\277F\r\362\227\331T\330?<\236\267\017\367M\322?\3343\304\355w/\345?\276\270\312\"y\026\305?x\231_\207.\210\261\277(j\271\311\226O\322\277\323\\\333P\214\016\230?\302\031\n\346\300\371\007@\264\330\206\304\215\207\320?\313b\374/9H\336\277\000\314\007\0219\353\007@`\312v\303\341]\334\277\356\242?\3527\331\333?\311(\361\325\202\351\260?\247\200\372\035\336\304\330?\327\302\377\324\023\205\351?\315p\262\225\003z\356\277\257\377\3159\246\246\351\277\213\317\177\325r\\\360\277\031\221\2750\275U\376?C\307\n\376KV\342?\036\021\324z1\223\315?\031\306\331\215\321[\271\277b\364S7\234\025\352\277\027d\273\222}\022\366\277\202n\235\370\213\271\004@y\221 \365\270\231\253\277\214S\224\374p\306\313?E9\225Q\222v\353\277|\346\225?Cn\305\277\224Wf\273\253\031\330?\272\220\320\334\331\007\342\277(\370\314\320\216\022\321\277\330b=\244\026\353\356\277\316\256\204\326\'\033\351\277\222\247\304i\234z\321?6\356\030\325lp\377?\266<[\262\tv\351\277\207\233{\2546\255\341?\t\232_\333\342Q\362\277\276\330\363A\034\265\267\277\270\373m\267Z]\305\277\212\251E\362\365\006\304\277\341A\323\360\333f\332\277\321UV\201VF\337?`\301a_\\\014\351\277\000\031\235\207\360<\251?\3429\251\205;h\376?Rov\305\r\036\346\277\006LN\326\264T\340?\212\177\362\370\204\n\354\277h\314\307\371\302$\326?\331\327\267\305\332\"\360\277*B\212r\036\237\325\277\323\\\333P\214\016\230?.w*g\240\257\347\277\n\302L\214;\346\317\277F\363K\022C[\315\277\361\215\022\221^!\300\277\362Y\357\345\360\274\317?\276\340@\321\252\032\361\277\334\335\376\002`x\341?\333P\023\334\013H\350?-\322K\226Xi\345\277<^\265\r-\210\365?\030\315QUNo\003@\351CD&_.\375?\010\200\006\351\326\323\356\277\300H\032\365%\210\303\277[_S\267\336\207\325\277\251\241\245E\366\353\315??\317y&\2212\361?KU\353\215\177\355\363\277\337@zH&m\315?\212[6:;\357\201\277\206\343\343\316\0358\312\277\373\300\212\232 \253\344\277\346\260\026\201\346\204\303?\323\'\300\355\266?\330?\273\235\2067\210E\332?\212b\025\\~J\272?\030b\221#\273\345\205\277\273\227?\372\002\360\370?-\214\'\025\014+\361\277.\"\322\031\321h\354?\215gD\0146\322\345?[&\230\375\265\013\302\277\270t\251\316\351\201\344\277\322D\205a\001\235\325\277\317\360\01771\013\335\277\233\372\034\2413\331\314?\206\370\326\014\217\237\362\277Eq(+\027`\351?\231\246\t\007\207\025\263\277\261\371I\025b\021\352\277\017\214\305+\363\345\310\277\025`\"r:\304\345\277\253\367\314\3001q\260\277\202y\ra\301\321\362\277l>\264\362\312a\327?&\367\375\242\"\324\271?\264Y\252\240\235\216\354\277:&g\361L|\372?\366X\370\315^\221\321\2771\222nR\221\200\342?\n\234-\367\306Y\354\277\272C VG\242\321\277&/L\277\002\340\264?X-i\300\240\020\361\277\327\246\330\306#\377\353?d2&x\300\266\344\277\t\216\213q\361O\276\277d\207\303\2024\333\342\277h\274\036\272\021\016\322\277\214~\312\030\341w\346\277\330E\336\t\267\226\262\277\303c\350Z`\024\324?\005\253\236\252\010\242\301\277\310\002\234\217_|\242\277\340\027\336SeL\330?\277G\301Lp\216\326?\271\255\037\313m \345\277\003\262om\363\246\360\277Gc-\010\250P\326\277\000\031\235\207\360<\251?`\301a_\\\014\351\277\224\303051\336\301?\031m\365\264\005A\323?&\367\375\242\"\324\271?P\3145kf\026b?\347\224\357r\366\376\305?]\373\377;\204=\357\277\351\376\342\310o\244\362?b\265\273\273\225\376\341?1\257x\203\200\273\342\277\014\246\345\177\007_\340\277\245\316H\n\313\001\351\277\250w\240\374\263\225\342?\327\304\033lC\346b\277\216\313\030\372\261\300\336\277\363\005f\306\215\264\313\277\215;\350\2516\004\362\277\255\032O\014V\267\362\277\004rmk)\341\323\277\264Y\252\240\235\216\354\277\0315\033\235n\r\203?\236sZR\327s\370?\005W)\2008\020\311\277\342\316\276\0270\227\323\277/\223\22625\023\350?d2&x\300\266\344\277\rb\217\032\237(\346\277\300dA\003\026\016\301\277x\013y\024\037@\341\277\317K\021gG\304\361\277\260\313\263\201\302\n\343\277\255\032O\014V\267\362\277\003\216\036\364b\"\327?]4v8\010\334\357\277MS\261\\\337\264\340?\362\265I\276\274o\361\277\230\030\200z\330\r\312\277\007\0167\330\353\325\342\277\334\301\2227\313\024\341\277\002\305\023h\2154\265?\315\'\005\253[\035\313?*V\304\374,f\345\277\2531\365\027\243]\314\2772\2234\215s\366\357\277\263\222 \235!-\355\277\215\276\2572\216\376\375?w\000\366\221\233\350\316\277\312\2149@\231_\204?%\244W\246\276\200\330\277`\301a_\\\014\351\277\277\226\027\032_]\363?/\005\203+=P\351?Y|\242\245r\240\330\277\300\213\366\336\3106\t@\005\217w\234\030\034\304\277\021ag:\373\225\340\277\341*\273\354\366\336\270?\t\261*\2452\325\365\277_\027\'Jt\303\354\277\262=\203\222\255\010\357\277\233{\030\250\273A\353\277\235\230\n\260\356\031\327?\030\355RV3\322\341?\266\003\345\265\205\327\350\277\244\327\3106\002I\007@\r\034k\231R\352\361\277\030\376\'\252\261g\264\277h\314\307\371\302$\326?b\026\377i\3200\347\277f$S*\331E\337\277\231\001\275-y\261\241\277d\3009\177\270y\343\277cr\013\222m=\374?d\207\303\2024\333\342\277\007\0167\330\353\325\342\277\335\316\205y8\222\367?\341$?E\243p\304\277\347\224\357r\366\376\305?\345\243\376\200v*\343\277V\365\032\244\300\004\366\277y\221 \365\270\231\253\277\270;3\322e\343\343\277\217\332\326@~\204\373??\371\234\244\372\002\000@E\363P\0103\370p?\264Y\252\240\235\216\354\277{\311\213\016T3\325\277\017~\266(\217\256\343\2778\321\311\346\330W\374?K\3164\267\305\327\257?\365JZ\221P\302\265\2771\3503=\2517\346?\007c\324\342_\372\340\277\207\215\224i\274\305\260\277\210\177T\236F\'\344?]\201\341\001\366c\335\277\204G\006\202f\033\351?\005\217w\234\030\034\304\277\314\342\236\216\013\267\357\277\312\260 \255\211p\364\277%2k\255\266C\327\277\177\345\262\034D\271\322\277\t\261*\2452\325\365\277\331I\244\276\342_\361\277\265\256G\253\021\263\352\277\035\202\017\271!\301\224?\003\343\000\274{$\310?l\367B\323\327\263\343\277\265c\005X\033\242\242?\202\326Ai\002q\355?\262R\200@\031\204\370\277\265u\321\256\215\024\352\277d{q\275\246\366\277\277\021\204\375e\024\004\365?}:P\'\270\335\320\277X\330\313\265,\354\362\277_\264\253\004\256\316\300\2779\272#\333\213\261\302?\213U\320\307%u\313\277\200+\337sv\225\353?\257r\201A\376\346\006@\270;3\322e\343\343\277n[4\251p\341\301\277\200\201\244^\216L\357?\r\360\242!\227\353\344\277(\025\353\366\020\304\314?\017\232\3356\1774\341\277\235\227?\266\253\307\350\277%\026D\237\306\275\331\277#\262R\311-\220\353?{\177\'\037\374\372\276?\361\216\262G\227\321\005@\373\303\033\332ag\330\277\242\346\207\312\330G\362\277E\363P\0103\370p?\304;/\211\236\250\321\277\241n\350~\217\204\346\277x\221=\362s\'\332\277\331\361X\214\020@\372?2.`\224\333\023\317?\313b\374/9H\336\2779\272#\333\213\261\302?\276\262>(O\343\360?2J\207\242\313\231\314?x\347\002\335\213\336\335\277S5\035\246\212\312\342?\200T\200\'\230\222\261?\334v\026\024\233\205\256?\351\325\360M\232?\354?[\230J\374G-\226\277\001A\253T\217\374\364\277tg\302#{\214\344\277\214=\3005\025 \315\277W\230\204\366\275H\303\277\013\361\312\001;~\352\277\254+\216\333{\007\302\277\030x\264J\332J\005@y\221 \365\270\231\253\277{\311\213\016T3\325\277<^\265\r-\210\365?y\374\243\000\0250\221?o\313nQ\r+\271?\006\221\2573\244\336\352?\270\002\275\325\341D\343\277\242\206\340\347\343v\300?!\336\365\202\346\261\336\277\314\321\311:\215!\275?nj?\203\307 \306?\326\234\330i\271Z\361?\303c\350Z`\024\324?p\023M\371\252\372\353\277W\301 \353~i\330\277\265\256G\253\021\263\352\277\037\206\014\366\325\256\357?3\313\344N\025\037\343?\323\374\235\261;\266\357?\242\316\215\307o\337\353?xY\357\325\223\033\337\277`\372\327[\340\252\351\277\017E@,\013\020\343\277x@];\016>\256\2776W\350\223\t\276\330\277\272\036\344\343\321\312\340\277\002\272\301\255\033D\352\277\344b9[O\260\334\277\023\375\316\001\374m\327\277\354V\201\023\324\004\000@\367\017&%\264W\364\277\317\360\01771\013\335\277[\230J\374G-\226\277\231T\350\016UJ\010@\313\t\030Wm-\270?Y\001\241H\345\021\344\277\026\303\272\237\035\370\326?\303\325\324ShQ\325?\331\211D\033\353\010\346\277\230\037Ig\335t\304\277X(\350\275\3750\315\277J\235\206\'+\244\311\277I\362%kJ\031\021@:\264z\370D?\371?F\212\272\016\323\332\000@\271i\203[V\321\t@\354n\237\000\322\274\341\277\271\346\225\307\361\276\345\277\264\312\320^\303U\340?\022\323{\010\213q\357?/\223\22625\023\350?\337$S:6\347\317?\257Z\357h^`\347\277\346\314=\217\326\n\301?z\332\\.\251\334\336?(LX\212\006\221\361\277\322\322\230h\371_\324\277H\372\2320\312B\353\277\305U\320O\324\305\353\2775\256\225`\201\006\340?|\255d\000d\255\327\277!\010\360\336\275\250\341\277\331\260 O\265\204\004@\302\177\017iP\232\321?\273%\277\026\267\343\360\277\214\247\t\'AX\304?\177\001\332*4?\320\277%\244W\246\276\200\330\277\262\241\221Pcu\302\277(\370\314\320\216\022\321\277\327\304\033lC\346b\277\331~;\220t\227\000@)\337{\277\204&\352\277\214\2547\212\356\244\001@\202\215G\353\317\230\362?\251\241\245E\366\353\315?!\372\034\221\3267\334\277\200\230\001I\247\030\004@\224\021\375|\272\375\360?\263\004\r\226)j\356\277\344\266T]NL\250\277\037\025O6\347V\361\277\332\216b1\354\003\252\277l\367B\323\327\263\343\277\253M\034&\223\343\311\277>\354\310\024%K\364?\022\031\200\2125\257\332?g\247C!\267s\221?B.\027\216o\373\351?lv\002\017\253m\322?D\035nC\242\360\355\277-\214\'\025\014+\361\277\'\277\257\206B\310\276?\256o\354\026\312\333\360\277\334O\353\373g\265\342?\253[\027I\002\363\354\277\325\037\014\010\315\205\366?L\033\036\203Z\313\342\277\214\213\342\030Q\322\306?\017E@,\013\020\343\2779\326J\351{7\300?\264Y\252\240\235\216\354\277c\'F\017\334\036\353\277\314\321\311:\215!\275?\315\257\214\267)\255\365?\233\314AP\357\364\322?\331\302\272\027o\247\346\277 c6:\014\005\234?P\014\301\257\r\253\317\277\246?\r#/\254\344\277<\t\030\003\271c\367?\322`\254o\361\"\323\277l>\264\362\312a\327?$K\207\302\205\334\255?\201\344\343\356\327z\273?\276\262>(O\343\360?\373,\363n\344R\346\277\032\277\237\332v\214\345?\r\267,%\023M\344\277\036}\024zm\234\321?\177s\306#<|\321\277\240}\354\317\na\004@\272\010$\022\t\233\355\277\322`\254o\361\"\323\277]z\253\227b\317\273?8\304\033b\020\270\350?\244\356\223\000R\314\n@.\235\216\271\271\031\336\277\330.gD\232i\020@\240\317\215\322\213\323\343\277\261\262\330\365nc\306\277\212\211\034\323Rh\261?\021ag:\373\225\340\277\316\232JL\031T\331\277\267\037\014\304u]\346\277%\244W\246\276\200\330\277"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content: "\356\370\215\345\314\203\354\277\320\355\215=f\327\333?%Y\222\243\204J\345?QMRu\252,\262\277Uu\225\\q:\336\277\370>V\261\261\362\332?\2250\221;\021\305\373\2779\305\251\203\300I\334?\313\224z\221e\243\337?\211\037q|\275\211\331\277\357\355s\235\333\302\255?\271\203w\200\337_\327?^)\275\327\'*\351\277L\275\245\367\353*\322\277\267`vl\2370\356\277E\255\377!P\256\361?b\003Q\025\003\242\366\277V\210\323\354G\365\334?\230\213\225\254>\223\277\277\200!\217M@\t\366?ge\306\024\023T\361\277\210\305\326\226\277\214\354?$\230#=\"\305\360\277\212\373\005\335M\211\371\277\204\306]\320\274U\335\277\024\370\300\213?Y\365\277\255N\354!\034$\325?!$\352\226\363\026\371\277)\330\021\022\252\006\364?<\212\033\274\335v\342\277c\315!\317t\245\351?\234\211\244\347\021\371\367\277\241\211\2079D\001\336\277\303\3561%1\230\366?h&5{u\331\345?\225\301\324PU}\347\277Q-\277\035\2229\356?\017a\320\213\364X\263?QMRu\252,\262\277,\r\272\036;:\320?\017a\320\213\364X\263?\346\023\321\215\310\365\361?\255N\354!\034$\325?\t\'\254OAW\360?\201\264\266\327kQ\372\277v\343\241\233mO\365?\206\350\327\252\377\273\305?\032Z6\213O\013\360\277\033\177\033\024w\312\321?\223\246\313\004\365\372\365?/ \313\242\273\017\312\277\354\377\013\304\364q\362\277)<<\370X\030\223\277\315\310\250\264>\030\372\277\205\351^\344\374\204\346?\343\345\211\261\221\270\321\277\323\2052\203\004\206\363?\007\340?\234\221\'\347\277D\362J\3669{\242\277\206C\371\311\372\201\323\277\376\230\360\226\257\357\347\277\037\232$`\327L\363?\272\023$\376\235a\307\277u\354\003\357|\315\363?\014\025\350\250\"[\363?\305\310\305b\014\020\344?\216f\335/m\271\362\277\257rW\301\213$\365?\232T)\347\326\252\260?\006=U\216\374j\350?\300\201v]*\330\344?\205!r\237r\021\354\277J@\n\376\255\376\333\277\2434j\017\271j\364?QMRu\252,\262\277\210\r\312\203l\205\366\277\241\224\333\335\320\261\240\277U\327\'\nO\344\362\277\300\234\177\251\212Z\366\277\357\355G\035\326u\365\277\256(Va\344\231\271?\346\023\321\215\310\365\361?\026\357^80\333\366\277\304\245\304N\314\340\332\277J\255\342s\202\266\347\277J\242\234\253\213\250\360\277\264\313jm\214X\361? \221\302\014\310\316\364?\343\212h\222\226\362\303?\234\355\032\n\3272\365?\267`vl\2370\356\277t[\300\3318\025\350?\334\371N{e<\341\277\230\321\227\324\276\361\321\277\373\252\264=\316\353\344\277\303\3561%1\230\366?t\223\323\224\256\241\355\277 \221\302\014\310\316\364?\241\031a\303X\350\322?s\221\357\037\307\021\365\277=\325l\007*\276\346?NQGk\3171\350?B<\005\323@4s\277\315\376\327\372\314\024\327\277CI\211\377\212t\364\277\241\211\2079D\001\336\277\271\260Ds^\336\365?c\315!\317t\245\351?\010\316{\365r+\352\277p\254\025\032\365\213\360\277\246\"\246h\232n\367?\274\300\007\367\307R\360\277\206C\371\311\372\201\323\277\276\334\212,\340\223\323?ZK\343\265D\214\257?}\317\334\321\231\313\365\277\202\017\313\246!\r\371?\0376\256=\022\023\366\277\232T)\347\326\252\260?V2<\331\004\240\361?\375\343A\342\3736\354?\304\245\304N\314\340\332\277[\027\026\337\326%\366?T\342m\322E\362\351\277\033\357A\212b\343\334\277Uu\225\\q:\336\277\364\3434\222\266,\275?8\262k\363\351\216\335\2778\037Di\276F\351\277\373\252\264=\316\353\344\277\262\276?\244]\"\265?\234\355\032\n\3272\365?\234\355\032\n\3272\365?\204\037\216*\213\201\363\277S\231\035\252\2562\330\277\250\027`\240\243`\340?&kVJ\243F\342?,\275\353\027|\214\370?\362\345B\005\261\276\336?\250\027`\240\243`\340?R\307d\206\345o\370?d\'\274\264r\242\326\277J\255\342s\202\266\347\277\000a\335\3339c\342?Q\274\036\276\356a\341?\216f\335/m\271\362\277\243a7\0028\351\342\277\204\203\004MP\273\360?N\211Z&E\276\355\277\324#\240\325&\334\356\277\220\373\350.\200\221\337\277\233\327\215\355\230~\272?\262\247\377\315\034X\321?B<\005\323@4s\277\277\245\341\374\231\330\364\277\262\247\377\315\034X\321?\010\316{\365r+\352\277\006=U\216\374j\350?\230\213\225\254>\223\277\277\334\"\031\234)\023\336?\033/M\r\270\034\372?\273p9\360\010\245\330\277!$\352\226\363\026\371\2774C\314\266\373>\343\277\322}:\273$\331\313\277\343\345\211\261\221\270\321\277gp\014\335\tb\350\277\0309\031\354\366k\317\277\243\344\233\010\372\274\354\277W\305cc0\350\365\277\005X^\332\\\355\371\277QMRu\252,\262\277h\\d\301\003\326\362\277\217]{\334];\364\277\303\345\317\321!\032\370?\231,\254\243t\255\340\277?\336\261\254kD\373\277l\245\264\351\232\225\364?\373\252\264=\316\353\344\277\267`vl\2370\356\277^\036w\0171\034\362\277\031\3248>\002a\373\277\227w\375\356\300\364\344?\010\316{\365r+\352\277\220\270\217\253\023\367\362?+w\266;7\235\246?\024\\7\256\004\223\362?eL\241=\232a\370?n/z \267_\372\277\177W\276\223\316\005\343\277\005X^\332\\\355\371\277B[M\246\251p\361\277\277_\3572\242g\335?\005\031\315@\277r\356?V\210\323\354G\365\334?u\210\215\314\267\223\366\277J\255\342s\202\266\347\277\364\3434\222\266,\275?\373O\240n\0300\326\277:\213\375,i\345\207\277\274\300\007\367\307R\360\2778\362vv?\310\372?8\362vv?\310\372?\341h\356\267S\214\333\277\232e9H\242\370\347?51\010\020\335B\346\277\317ED\256|D\360\277\266\274\004%\r\253\316?\030\023\312\327\237\333\326\277\207\215\320+\217\n\306\2778\362vv?\310\372?\246<)>\340\243S\277\323\2052\203\004\206\363?\3039\240\036K\327\304?\200~\207\221\335T\355?\037\243\206\263\346\312\361?\221\345\\\236\222u\341\277QMRu\252,\262\277\3674\227\"\270\255\364\2778\362vv?\310\372?(\016AX8\003\341\2775\r\235pmB\366?\320h\010X\336\240\251\277\3215d|E\330\353\277\2512i\354\003\343\361\277CI\211\377\212t\364\277=\373\273\033\201N\357\277\217\301\361\376\"u\361?\262\247\377\315\034X\321?\277]\356\017\355\337\352?\305\310\305b\014\020\344?\267(c\261)\244\350?x\332?H^\321\366?\006\274\324\374!\'\367?\360H\\\354\2131\364?gF\023\203S\\\233?x\376\252\347\315\321\346\277g\026r\367\013e\333?\352\301\001dT\300\327\277\374}\347JOm\366?\267\004\025\300\207\233\302?\254 \245E\345\346\364\277\367=\371u\307+\363\277\361u)\337\n\260\342\277g\026r\367\013e\333?\265\262\371Y\375=\232\277V;\236,\024\036\360?\320\227\366)#\202\360?$HU6c\027\331\277\267`vl\2370\356\277\205\351^\344\374\204\346?\014\004\216\21530\315\277\212\373\005\335M\211\371\277h\\d\301\003\326\362\277NQGk\3171\350?\267`vl\2370\356\2774C\314\266\373>\343\277u\020o\216\354\315\343\277C\266au_,\360?8\362vv?\310\372?\357Q\276?\233\257\362?\204\037\216*\213\201\363\277\2512i\354\003\343\361\277\022\201)\207q\\\303\277Kc\013\022\356-\345?W\320\251+\'\366\354\277\271\203w\200\337_\327?N-\371y-)\302?\246\342\232\345D5\332\277\327\2031`O\376\360\277\010\252\020V\003+\372?\033\\\032\0007\233\350\277d\202\320\203(^\345\277\305\310\305b\014\020\344?[\027\026\337\326%\366?\342\213\357\313\223\273\344?\t\314\227\200\213\233\361\277\353\344\002x\224\357\340?\353\346\346\354{\177\371?\322\216\224\326\023\004\362?\336\214v\005\221\204\325\277l\245\264\351\232\225\364?#v\234\022\232T\371?x\332?H^\321\366?\240A\261\372d\000\356?\010\316{\365r+\352\277\362\366\214\302\027\374\331\277\217\301\361\376\"u\361?\222\257-X\004y\364?\271\260Ds^\336\365?N-\371y-)\302?\343\270\274\276\022:\363\277\277]\356\017\355\337\352?\365Q\241\221\315\267\350\277\207\215\320+\217\n\306\277\364\231w\320\254\270\310\277\340 \030yt\213\353?x\321\335\364NS\370?\222\257-X\004y\364?8\362vv?\310\372?\233\327\215\355\230~\272?\0376\256=\022\023\366\2778\362vv?\310\372?JSH\216\204\271\332?8\362vv?\310\372?gp\014\335\tb\350\277\370b\336\376\356\352\324?g\026r\367\013e\333?m8\334s\306\335\370\277\351\357H@\213\375\367?\235Su\241\203\374\352?0(\303j\233\274\361?\222\035c\t\303\367\307?J@\n\376\255\376\333\277Q\274\036\276\356a\341?\371\217\253\361mi\363?\243\331U@\003\257\365\277V;\236,\024\036\360?\224\014&\234\241\304\353?\232e9H\242\370\347?\266\274\004%\r\253\316?[\027\026\337\326%\366?\221\345\\\236\222u\341\277\377\206,\360\220\363\352\277\311\343\316\256l\222\365\277\232\222\006;!w\366\277\000a\335\3339c\342?p\254\025\032\365\213\360\277\302\223\035V{\334\367\277\035\022C\236\242\022\346?\370b\336\376\356\352\324?\351\357H@\213\375\367?f\227\0177\264\240\306?\362\366\214\302\027\374\331\277\250\027`\240\243`\340?1\216\035\002H\206\347?\342\213\357\313\223\273\344?-\013\231?u\327\247\277 -L\352\002\225\367\277\021\335\267?\337\326\343?(\016AX8\003\341\277o\001&\364:\030\313?\247\365\330u\033\360\330?\007\340?\234\221\'\347\277\343\212h\222\226\362\303?c\315!\317t\245\351?\225\224\007^\326\376\370?\204\306]\320\274U\335\277\345@\236\200Gt\340\277c\315!\317t\245\351?wI\3742\032\031\353?\232\235L\003\030\205\355\277:\r\200\302\237J\354\277)<<\370X\030\223\2778\262k\363\351\216\335\277\355\366\251p\345\363\363\277\371\274x\344\354\347\341\277\232e9H\242\370\347?\014\004\216\21530\315\277F\244\235\316@0\363?\n\361|\t\263Z\323?\240\353\031\347!\253\362\277R\307d\206\345o\370?\007\213kw\231\255w?\305\310\305b\014\020\344?\371+5\317\250/\366\277\311GE\3211\314\362?\302$ak\277\224\343\277\355\366\251p\345\363\363\277d\361\214n\344\245\371\277\234\355\032\n\3272\365?\304\022\235\304\240\230\346\277\222\035c\t\303\367\307?\353\346\346\354{\177\371?\007*\n\256\340\245\312?\032\225\247\244d\346\357?\033\177\033\024w\312\321?\340M\345k\363\t\372\277\217\301\361\376\"u\361?\2434j\017\271j\364?\277\022\272rn\220\360?\004a\300-lk\370\277Q-\277\035\2229\356?\016r\340\354\277\246\352?\r\014\206U\023\335\364?/#F\257(V\356?\325\017\370\271 P\371\277\275\004\333c\354\253\356?x\376\252\347\315\321\346\277\204mw0\022\007\266?Hu\317\270\014*\342?\250\027`\240\243`\340?\372\365\005\211\0323\351?l\245\264\351\232\225\364?1U\220]\032;\340\277\271\247\342\037O`\367?\036\266\264\3454\230\305\277-\013\231?u\327\247\277\346\246\370\027\364=\366\277\214M\270X\364\306\371?Z\263\237\274\021\354\370\2778\362vv?\310\372?J\242\234\253\213\250\360\277\013\274\267NT/\355\277/\326\020\357\364~\361\277\356\370\215\345\314\203\354\277P\254[:\205\355\326?\213Br\220\375\270\342?\007\340?\234\221\'\347\277\214\302[\212RF\310\277\207\215\320+\217\n\306\277\221\036\352B\300\300\350?\250\027`\240\243`\340?<]N\311^\370\363?\260`\223\032m(\370?\212\373\005\335M\211\371\277\373\252\264=\316\353\344\277M\007}Y\200\263\304\277\007\213kw\231\255w?\2250\221;\021\305\373\277S\231\035\252\2562\330\2778\362vv?\310\372?9\305\251\203\300I\334?\343\270\274\276\022:\363\277:\013\234M\270\272\363\2778\362vv?\310\372?[\027\026\337\326%\366?\2512i\354\003\343\361\277%\221\245^\372\326\352\277\\\241\333\025\363\357\373\277\000\322};\335:\357?\205\360\3336\324\332\277?,\275\353\027|\214\370?\347\324?\364*{\326?\262W1\307]\252\371?\212V\032\254\003E\370?\205\351^\344\374\204\346?\351\357H@\213\375\367?\2434j\017\271j\364?\254 \245E\345\346\364\277\017\251ln8j\337?\246+\010\274\251\354\365?\227w\375\356\300\364\344?\350\2244q\325A\371\277\033\177\033\024w\312\321?[\027\026\337\326%\366?u\354\003\357|\315\363?\342\213\357\313\223\273\344?$HU6c\027\331\277\325|\320/\365\007\365?\250\027`\240\243`\340?\022\3340\006\342\r\303?\227\367\346\350\025\202\312\2778\362vv?\310\372?Z\276\345\204\010\372\357\277f\227\0177\264\240\306?l\245\264\351\232\225\364?X\3620V\257f\324\277\276L\261\242\313\254\336\277=\360uS\212@\370\277\230\244\312\341?s\363\277\356\370\215\345\314\203\354\277\002s\204\324\212g\365\277\2249\363\216 C\372\277\016`\034F\241\252\355?M\353\354\323\"h\362?\312>\343}\"N\364?\240A\261\372d\000\356?\267:\'XH\240\345?+\317\257\276\232\210\365?\3303cY\220P\331\277\336VG\277\002\210\370\277\307\3540\002|\020\364\277\343\016T\322U\217\356?gF\023\203S\\\233?\000\322};\335:\357?\364\234\362\334\031\377\354?\240A\261\372d\000\356?QMRu\252,\262\277\304\201Y\257\\\340\372\277\340\250\371:\251\305\370?Pu\262\n?2\370\277\246\232\304\246e4\352?\267(c\261)\244\350?\207k<\261\301\217\317?t\223\323\224\256\241\355\277\033\177\033\024w\312\321?&kVJ\243F\342?\031\3248>\002a\373\277\361u)\337\n\260\342\277Pu\262\n?2\370\277\306\"`H\n\r\321\277$\177\356\007!\345\274\277g\026r\367\013e\333?\225\224\007^\326\376\370?\257rGc\0037\272\277\302\223\035V{\334\367\277c\315!\317t\245\351?\307P\247$AJ\361?Z\016\264\213\307\247\367?8\037Di\276F\351\277\221\036\352B\300\300\350?\371\217\253\361mi\363?9\305\251\203\300I\334?I\320\343\207\302\345\320?\234\355\032\n\3272\365?r\310\230O\r\315\323?/\372{\216d\177\321\277\364O\275\034\346\'\360\277\373\031q(\2123\371\277\322*\036\264N\312\364\277NQGk\3171\350?\235w\340@\363\374\372\277\350\235\226\304\344\277\367\277\004t\341\017u.\335?\270L\316P\231\244\370\277m\223\360B|\231\367?U\327\'\nO\344\362\277\251_6\337\202a\320\277\016\237\255\337>%\371\277\346\023\321\215\310\365\361?\2512i\354\003\343\361\277\037\232$`\327L\363?:\3470\256H\272\343?#\033\210C\344\230\372\277\246+\010\274\251\354\365?\373O\240n\0300\326\277I\320\343\207\302\345\320?\256\250\206\007\032!\342\277|E\027\233}\001\360?/#F\257(V\356?E\255\377!P\256\361?\377\003\310\351\316\037\341\277}3S\364^\005\363?\035?\020\221!\221\364\277A\260]\200\357\374\313?\017a\320\213\364X\263?\247\276/F\3254\372\277&\352\325\270\310\002\361?\355\366\251p\345\363\363\277\236\010$V7\265\346\277\226\266\216\210^o\360\277\232\222\006;!w\366\277\357\355s\235\333\302\255?eU\003\221\251\337\366?I\n\370e\355\371\350?[\027\026\337\326%\366?R\307d\206\345o\370?J@\n\376\255\376\333\2778\362vv?\310\372?\236t\202\342S\256\300\277J@\n\376\255\376\333\277\270\335\021f\335\\\344\277R\320\266{l\000\274\277\020\215\3518 )\374\277\006O\374\206Mo\373\277,\306Mk\213\n\367?\2122\257\014\224D\330?H\346o\030\260\001\357?c\315!\317t\245\351?\0318\257`\307\232\370?\236R\356g\2063\312?\232\235L\003\030\205\355\277\263*d\324\336+\333?\332|\263\201\'\020\353\277R\3641yd\356\346\277\026\357^80\333\366\277#v\234\022\232T\371?\243\344\233\010\372\274\354\277\351gg~V\303\352?1\216\035\002H\206\347?f\227\0177\264\240\306?\2512i\354\003\343\361\277u\210\215\314\267\223\366\2778\024\376\240\3078\362\277:\013\234M\270\272\363\277R\3641yd\356\346\277\026\357^80\333\366\277\241\224\333\335\320\261\240\277)\374|\261\031\007\344\277\250\027`\240\243`\340?8\362vv?\310\372?\224\372a\365\202\310\356?%\217\301\351\022G\362\277K\233\036\315c\272\352\277\026\357^80\333\366\277l\003as\213\217\261?s8\277\305\370\345\336\277\361\256\266\2038\373\351?\3674\227\"\270\255\364\277\326j\014\211\326\013\370?f\227\0177\264\240\306?\373m\330\212\317\320\235\277\227w\375\356\300\364\344?&\352\325\270\310\002\361?5\r\235pmB\366?8\362vv?\310\372?`\337\345u\223\241\346?\217\301\361\376\"u\361?X<\010\270C\357\306\277\200~\207\221\335T\355?\246\232\304\246e4\352?8\362vv?\310\372?\242\234\305\311\032\274\334?\364\231w\320\254\270\310\277\341h\356\267S\214\333\2778\362vv?\310\372?8\024\376\240\3078\362\277o\367\032)+\253\226\277\237\322\364\017\251\270\371?\245\320\363\354\3630\367\277\311GE\3211\314\362?\205\360\3336\324\332\277?8\362vv?\310\372?\221\036\352B\300\300\350?J\255\342s\202\266\347\277\0376\256=\022\023\366\277}\264\323\2059I\344?\2512i\354\003\343\361\277{6\261R\376S\315?\004a\300-lk\370\277QMRu\252,\262\277\225\301\324PU}\347\277QMRu\252,\262\277\200!\217M@\t\366?\255\027C\362\325h\366\277\312\021\026\213\243\317\325?\010\316{\365r+\352\277T\340\211]^b\361\2778\362vv?\310\372?\000\317\002/p\364\312\277\240\320\020\233\301(\341?\035JVY\030\237\353\277M\207v\261].\365\277\247Os[\031\355\345\277\267`vl\2370\356\277\373\252\264=\316\353\344\277S\276\0023\326\361\371?x\332?H^\321\366?\251_6\337\202a\320\277K\233\036\315c\272\352\277/ \313\242\273\017\312\277\250\027`\240\243`\340?\r\014\206U\023\335\364?\367?\335\352\256\273\353\277y\244\020\002\320\324\331?V\210\323\354G\365\334?\360H\\\354\2131\364?\245\320\363\354\3630\367\277\320\355\215=f\327\333?QMRu\252,\262\277\027\200\242Mt\223\342\277\251_6\337\202a\320\277\202\253T\204\\\323\373\277\312\332l[]\024\367\277s8\277\305\370\345\336\277(\016AX8\003\341\277\007\213kw\231\255w?V2<\331\004\240\361?L\275\245\367\353*\322\277:o\022p}\364\360?\024\313\363\230\300\332\346?\013\204\244\223\336\242\347?p\254\025\032\365\213\360\277\343\016T\322U\217\356?\204\306]\320\274U\335\277\2122\257\014\224D\330?\030Js\007\346\226\365?\263*d\324\336+\333?R\320\306\331\364\355\366?\232\222\006;!w\366\277\263y\270\361\345\032\361\277\014\004\216\21530\315\277,5\nVGR\353?\370>V\261\261\362\332?\265\262\371Y\375=\232\277\306\"`H\n\r\321\277QMRu\252,\262\277\256(Va\344\231\271?8\362vv?\310\372?\271\260Ds^\336\365?\307\3540\002|\020\364\277\222BU\342/\301\370\277\302\367\223x@\026\365?\227w\375\356\300\364\344?}\317\334\321\231\313\365\277\311k\260p\241\314\342\277\200\310^\363q\335\357\277\207\215\320+\217\n\306\277.\262\245O\205~\341?\355\nR\214\353\177\351\277\\\341\346\230H)\331?\2249\363\216 C\372\277\211\017\256\370S\025\357\277\222BU\342/\301\370\277\310\266\001\274\355\023\347?\250\027`\240\243`\340?\372\007\312/9/\346?\250\027`\240\243`\340?\347O\272\016\243D\244\277\253\005\234\371\204d\343?F7\305Xlx\367\277>xW\025\277z\345\277\\\341\346\230H)\331?\231,\254\243t\255\340\277\312\021\026\213\243\317\325?D\233;{1\262\364?[\027\026\337\326%\366?x\376\252\347\315\321\346\277{\341\240x\270\307\362\277\217\301\361\376\"u\361?p\254\025\032\365\213\360\277\336\262\305\031\350\024\316\277\277\245\341\374\231\330\364\277\312>\343}\"N\364?\232\222\006;!w\366\277\367\031\216\326W+\343?\325\017\370\271 P\371\277X\3620V\257f\324\277\266^\222\367\267\240\365\277\334\325\343\333\365;\361?\367\241o\230\214e\360?\267(c\261)\244\350?8\362vv?\310\372?8\362vv?\310\372?X\3620V\257f\324\277\306\001\273\216\r\013\217\277\031\3248>\002a\373\277\3213\200\007^H\363\277\032\225\247\244d\346\357?F7\305Xlx\367\277fC?\352\212\343\371?\222BU\342/\301\370\277\324#\240\325&\334\356\277c\0055\212\3521\357\277R\3641yd\356\346\277Z\263\237\274\021\354\370\277jJ\240\032\345\331\365\277/ \313\242\273\017\312\277\260`\223\032m(\370?6\240\304\372\230\212\372\277A\260]\200\357\374\313?`g\3077\310\333\363?s8\277\305\370\345\336\277\222\257-X\004y\364?Rc\356c 6\373\277\354\010n\027\004\360\360\277\252\215}\273\271\236\360?\035JVY\030\237\353\277\315\376\327\372\314\024\327\277\004a\300-lk\370\277sK\375U\317\240\335?(\016AX8\003\341\277\001\251\263\032\031d\322\2778\362vv?\310\372?}\264\323\2059I\344?\033\\\032\0007\233\350\277l\245\264\351\232\225\364?;UV\001\177K\314\277\307\365\222U\213\216\362\277\332\243\266\333\321N\311?5\004;\035^\304\367?\232\222\006;!w\366\277T\340\211]^b\361\277\254\204\033h\252 \362?\2512i\354\003\343\361\277\305\017\010\030\251=\264?z\352\002\314\307E\361\277x\376\252\347\315\321\346\277o\001&\364:\030\313?\305\310\305b\014\020\344?\376\273\361\252\357\036\321?6\227b\247\211\014\374\277q\177H\'v\r\342?\024\\7\256\004\223\362?\375\343A\342\3736\354?Q\274\036\276\356a\341?\243,rG\331\275\314\277ge\306\024\023T\361\277\327\331\310s\222S\354?\300\tX\037_\022\362?\323\2052\203\004\206\363?\006\263r\251\022\251\370?>\347\023\000{\302\371\277S\231\035\252\2562\330\277\353\346\346\354{\177\371?\251\251\rA\027\352\302\277\212V\032\254\003E\370? 8\222\262\371\242\356\277\236t\202\342S\256\300\277\305\310\305b\014\020\344?\361u)\337\n\260\342\277\220\373\350.\200\221\337\277\033\357A\212b\343\334\277\000\322};\335:\357?8\362vv?\310\372?\221\036\352B\300\300\350?\033\177\033\024w\312\321?\\\005R8\270)\371?\231\233h\2160\365\364\277B[M\246\251p\361\277\0149SH\222[\343\277\343\270\274\276\022:\363\277\201!\177\357\267\033\273\277\034Hr\3440\017\363\277X\3620V\257f\324\277$\177\356\007!\345\274\277QMRu\252,\262\277\206C\371\311\372\201\323\277\313\222yn\260\033\355?M\353\354\323\"h\362?\312\332l[]\024\367\277\'}\375B\364J\365\277\372\007\312/9/\346?ZME%e\"\343\277\20236F\221\r\351\277o\267[\342\353\231\347\277{\341\240x\270\307\362\277\372\206I\236^\353\364?\271\203w\200\337_\327?{\341\240x\270\307\362\277Rc\356c 6\373\277\347\324?\364*{\326?4/\007\355\'\273\323\277\343\016T\322U\217\356?\372\206I\236^\353\364?/\326\020\357\364~\361\277m\206\305yMc\273?\362?\372\230|\263\365?\006O\374\206Mo\373\277\016\237\255\337>%\371\277\3145\201*\023\320\365?\243a7\0028\351\342\2778\362vv?\310\372?\277\245\341\374\231\330\364\277QlP\267/\264\371\277\177W\276\223\316\005\343\2778\362vv?\310\372?\256\321P(\336\367\336?\016r\340\354\277\246\352?\327\006\226f\021\322\372\277u\265Z\2776\022\325\277+\317\257\276\232\210\365?/\326\020\357\364~\361\277QMRu\252,\262\277g\026r\367\013e\333?\267:\'XH\240\345?\367\241o\230\214e\360?!$\352\226\363\026\371\277\363-6\362]\267\370?\311GE\3211\314\362?\236t\202\342S\256\300\277\251\251\rA\027\352\302\277\235w\340@\363\374\372\277\240\364{:1)\361\277]KD\002\260\232\320\277\2512i\354\003\343\361\2777\371\364Tg\266\340?\215z\205KsE\350\277\356\370\215\345\314\203\354\277:\3470\256H\272\343?,\r\272\036;:\320?8\362vv?\310\372?\264g\364J\307\036\364\277\"\177\376e\251\322\367?\241\366_\257\030\271\351\277Hu\317\270\014*\342?QMRu\252,\262\277M\007}Y\200\263\304\277\277\245\341\374\231\330\364\2778\362vv?\310\372?\016`\034F\241\252\355?r\314\232\225w\334\310?\030Js\007\346\226\365?\007\340?\234\221\'\347\277\365$\324\236N9\372?\013\204\244\223\336\242\347?\033\357A\212b\343\334\277\227\257\020\2526\201\352\277\310\356\024wc\240\354\277p\\G\0236\336\330\277:\013\234M\270\272\363\277L\275\245\367\353*\322\277#v\234\022\232T\371?\367\031\216\326W+\343?{\341\240x\270\307\362\277\364\234\362\334\031\377\354?\322}:\273$\331\313\277\201\02052Q\336\317\277\323\2052\203\004\206\363?\270U0\244\250\"\367\277\005\031\315@\277r\356?\346\330A:\225\212\313?\255\001\362\263%\357\236?\356\300z*W\367\346?\355\366\251p\345\363\363\277I\320\343\207\302\345\320?#v\234\022\232T\371?\231,\254\243t\255\340\277\332\317U!\2576\224?\r\250\0173N\243\367\277%\217\301\351\022G\362\277\001\251\263\032\031d\322\277\334\"\031\234)\023\336?8\362vv?\310\372?\304\245\304N\314\340\332\277ZME%e\"\343\277F\034\274\014\014\366\345?M\345\350\336\2628\316?QMRu\252,\262\277\227\257\020\2526\201\352\277\332|\263\201\'\020\353\277{\354\346@\257\325\351\277\036\224 kg\035\317?I\034\237^>\376\373\2778BE}\376u\322?\000\322};\335:\357?c\315!\317t\245\351?\3674\227\"\270\255\364\277\002+\221\347\335n\353?\315\277Fa/\232\373\277\264L\353\376f\234\342?\177\306z~\212M\367\277\362ce8\354\263\345\277\267:\'XH\240\345?\177W\276\223\316\005\343\277\263y\270\361\345\032\361\2770(\303j\233\274\361?\201\02052Q\336\317\277\213\263\022\360\240\220\357?\306H\257\\a\235\311\277\030Js\007\346\226\365?\r\250\0173N\243\367\277\332\317U!\2576\224?\200\275\030+{\317\370\277M\345\350\336\2628\316?\006\274\324\374!\'\367?\336\347\212\324F@\344\277\356\300z*W\367\346?\233\327\215\355\230~\272?xmg\322\211\031\373\2778\362vv?\310\372?z78\214\373\034\356?Q-\277\035\2229\356?\300\234\177\251\212Z\366\277\232e9H\242\370\347?ZK\343\265D\214\257?8\024\376\240\3078\362\277\003\327\372\366O\241\362?O\342\212\200\023\352\363?)\330\021\022\252\006\364?c\315!\317t\245\351?\006\274\324\374!\'\367?\010\316{\365r+\352\277:o\022p}\364\360?\260i\365m|\246\366?\250\027`\240\243`\340?q\376\307\225\233\311\360?#\022&\360\324\032\374\277}\317\334\321\231\313\365\277I\034\237^>\376\373\277\230\244\312\341?s\363\277\373\252\264=\316\353\344\277\001\316\230\243@#\364?\320G(#d\324\350\277\036\266\264\3454\230\305\277\267`vl\2370\356\277QMRu\252,\262\277\333\017\333\013SX\337\277N-\371y-)\302?\3303cY\220P\331\277\014\025\350\250\"[\363?:\002:\372\250<\365\277W\305cc0\350\365\277\371\217\253\361mi\363?\271\260Ds^\336\365?E@\'\254{\366\365\277s\365eB\214K\362?\037\243\206\263\346\312\361?\306H\257\\a\235\311\277\315\376\327\372\314\024\327\277\2512i\354\003\343\361\277:\213\375,i\345\207\277\216h\301\244TI\353\277\334\325\343\333\365;\361?\024\\7\256\004\223\362?\267:\'XH\240\345?J\242\234\253\213\250\360\277\304\245\304N\314\340\332\2778\362vv?\310\372?\020\226K\214/\247\372\277\340 \030yt\213\353?|\330>%\251I\364\277\304\022\235\304\240\230\346\277\237\276L\364\242,\344?\304\245\304N\314\340\332\277\311GE\3211\314\362?\010\226h:\375\236\344?\\\341\346\230H)\331?\362?\372\230|\263\365?\217\301\361\376\"u\361?\217\301\361\376\"u\361?\267`vl\2370\356\277\264\313jm\214X\361?\3039\240\036K\327\304?d\'\274\264r\242\326\277\304\245\304N\314\340\332\277\035JVY\030\237\353\277u\354\003\357|\315\363?\340 \030yt\213\353?\022\3340\006\342\r\303?8\362vv?\310\372?d\'\274\264r\242\326\277\247\276/F\3254\372\277L\220\004\205r\371\253?\340\250\371:\251\305\370?\306\222l\036k\021\276?\026\357^80\333\366\277\250\027`\240\243`\340?\211\017\256\370S\025\357\277\313\244=\025\317\027\352?X<\010\270C\357\306\277QMRu\252,\262\277\177*\361\240O\207\364?h&5{u\331\345?QMRu\252,\262\2774/\007\355\'\273\323\277QMRu\252,\262\277\022\201)\207q\\\303\277\362\r\315\230X\306\315?\256\321P(\336\367\336?\315\310\250\264>\030\372\277\020\226K\214/\247\372\277\3303cY\220P\331\277\267`vl\2370\356\277\241\342\267\223\022-\364\277\026\357^80\333\366\277Q-\277\035\2229\356?o~\301\355xD\301?\377\206,\360\220\363\352\277)FG\303h\205\307?\232T)\347\326\252\260?\250\027`\240\243`\340?8\024\376\240\3078\362\277\2512i\354\003\343\361\277\036l\335\203\240\017\323\277q\376\307\225\233\311\360?\227\367\346\350\025\202\312\277\304\245\304N\314\340\332\277\262\247\377\315\034X\321?\033\177\033\024w\312\321?u\265Z\2776\022\325\277\177\306z~\212M\367\2778\362vv?\310\372?E\321j\301\277\256\341\277F\244\235\316@0\363?8\362vv?\310\372?l\245\264\351\232\225\364?\326sn\334\345\211\366?\006\325%T\240f\250?F7\305Xlx\367\277\004a\300-lk\370\2771\240\341\250f\202\344?O\342\212\200\023\352\363?\360d\354q\351|\306\277\\\361\251\034\262\235\343?\245\320\363\354\3630\367\277(7\013y\374\331\335?\357\355G\035\326u\365\277q\376\307\225\233\311\360?:\002:\372\250<\365\277\243\344\233\010\372\274\354\277\003\327\372\366O\241\362?d\'\274\264r\242\326\277\026\357^80\333\366\277\355\nR\214\353\177\351\277F\212\341_B\207\316\277\3039\240\036K\327\304?s\221\357\037\307\021\365\277c\315!\317t\245\351?\033\\\032\0007\233\350\277ZK\343\265D\214\257?\016\237\255\337>%\371\2778\362vv?\310\372?Uu\225\\q:\336\277\347\324?\364*{\326?\000a\335\3339c\342?N\211Z&E\276\355\277E\255\377!P\256\361?\247Os[\031\355\345\277\364\3434\222\266,\275?\204\037\216*\213\201\363\277\315\376\327\372\314\024\327\277\305\017\010\030\251=\264?\020\315\364\273ub\331?\357Q\276?\233\257\362?QMRu\252,\262\277sK\375U\317\240\335?\355Z \223\252-\361?\232\222\006;!w\366\277\251;\313?\023a\360\277\315\376\327\372\314\024\327\277u\354\003\357|\315\363?\020<s\035q\374\202?\252\215}\273\271\236\360?\253\363\327Rfh\346?#\022&\360\324\032\374\277\252\207y\306Io\314?Uu\225\\q:\336\277s\365eB\214K\362?\023_\225\014\244\341\314?\352\213\322\035\306\303\372\277\346\261>\340\352K\355\277\3213\200\007^H\363\277\215z\205KsE\350\277\004\362\003C\260#\344\277r\310\230O\r\315\323?L\364N\'2\346\360?%\221\245^\372\326\352\277\271\203w\200\337_\327?CI\211\377\212t\364\277\217]{\334];\364\277c\315!\317t\245\351?\205\360\3336\324\332\277?\014\004\216\21530\315\277\010\316{\365r+\352\277\013\204\244\223\336\242\347?\234\355\032\n\3272\365?\232\235L\003\030\205\355\277L\220\004\205r\371\253?\345y+%u\277\347?8\362vv?\310\372?\362\366\214\302\027\374\331\277\\\341\346\230H)\331?\033\\\032\0007\233\350\277\354\010n\027\004\360\360\277C\266au_,\360?\004a\300-lk\370\277\277\245\341\374\231\330\364\277}\317\334\321\231\313\365\277\253\363\327Rfh\346?3\3511\321\375A\326?)\374|\261\031\007\344\277:o\022p}\364\360?gF\023\203S\\\233?\275\004\333c\354\253\356?\267`vl\2370\356\277\0376\256=\022\023\366\277g\300\332\343\310\017\360?\377\206,\360\220\363\352\277\267`vl\2370\356\277\177W\276\223\316\005\343\277\204mw0\022\007\266?![\223\3069\322\327?\030Js\007\346\226\365?8\362vv?\310\372?\336;\341g\241\304b?\365s(\274U(\320\277\373\252\264=\316\353\344\277\003j\"\201{\351\366\277\347O\272\016\243D\244\277\036l\335\203\240\017\323\277\345@\236\200Gt\340\277QMRu\252,\262\277\0376\256=\022\023\366\277I\n\370e\355\371\350?\267:\'XH\240\345?k\333\343/)\222\341\277K\233\036\315c\272\352\277\236\255\017\207\201\371\327\277\373\031q(\2123\371\277\032Z6\213O\013\360\277\213\362\243\211>\013\373\277\262\317O\005)p\354?\004a\300-lk\370\277\235\032\350\374U\261\343\277\004a\300-lk\370\277\016r\340\354\277\246\352?\247Os[\031\355\345\277\234\211\244\347\021\371\367\277#\353?D\370\323\307\277\262\317O\005)p\354? -L\352\002\225\367\277\242\234\305\311\032\274\334?Z\263\237\274\021\354\370\277QMRu\252,\262\277Gd\222K\353\366\325\277c\315!\317t\245\351?:\013\234M\270\272\363\277\267`vl\2370\356\277\001|\346\'\232\345\363\277\022\3340\006\342\r\303?\262W1\307]\252\371?\317\332O\255\217\034\335\277E\3703\277\316\375\353?\242\234\305\311\032\274\334?\257;\256\221Ei\326\277\357\355s\235\333\302\255?fC?\352\212\343\371?\250\027`\240\243`\340?\375\343A\342\3736\354?\373O\240n\0300\326\277\0376\256=\022\023\366\277E\255\377!P\256\361?\203E\372\354\257\t\346\277\227\257\020\2526\201\352\277\204mw0\022\007\266?F7\305Xlx\367\277\300\201v]*\330\344?\304\201Y\257\\\340\372\2778\362vv?\310\372?\311GE\3211\314\362?\240\353\031\347!\253\362\277:o\022p}\364\360?\204\306]\320\274U\335\277\366F[\311\326\251\361\277\3039\240\036K\327\304?[\316\250\010rn\332\277\232\222\006;!w\366\277s8\277\305\370\345\336\277\20236F\221\r\351\277\331z\317\014@\200\362\277Kc\013\022\356-\345?\355\366\251p\345\363\363\277xmg\322\211\031\373\277\372\206I\236^\353\364?\223\235i\261\345|\367?\351\357H@\213\375\367?\205!r\237r\021\354\277p\\G\0236\336\330\277\334y\036\325/\265\270?\361u)\337\n\260\342\277\226\266\216\210^o\360\277\315\376\327\372\314\024\327\277\305\310\305b\014\020\344?\330\372\325\264b\005\302\277s\221\357\037\307\021\365\277`\337\345u\223\241\346?QMRu\252,\262\277\267`vl\2370\356\2771U\220]\032;\340\277\3674\227\"\270\255\364\277\000\322};\335:\357?i\251\231\2017\255\357?eL\241=\232a\370?\256\321P(\336\367\336?f\227\0177\264\240\306?\345y+%u\277\347?\326Vdm\320\177\342?F\034\274\014\014\366\345?\247Os[\031\355\345\277:\r\200\302\237J\354\277QMRu\252,\262\277\311GE\3211\314\362?\027\361B\255\027k\357\277\217\301\361\376\"u\361?\373\252\264=\316\353\344\2774|Y[)\212\352?\210\305\326\226\277\214\354?d\202\320\203(^\345\2771U\220]\032;\340\277\306\"`H\n\r\321\277I\n\370e\355\371\350?\207k<\261\301\217\317?$\230#=\"\305\360\2778BE}\376u\322?\217\301\361\376\"u\361?@\261\344\271\354\305\354?/ \313\242\273\017\312\277\262\027&D\010q\334\277T\340\211]^b\361\2771U\220]\032;\340\277\315\376\327\372\314\024\327\277\243a7\0028\351\342\277\3674\227\"\270\255\364\277\247Os[\031\355\345\277\332\317U!\2576\224?\271\203w\200\337_\327?\376\230\360\226\257\357\347\277\262\276?\244]\"\265?Z\016\264\213\307\247\367?4C\314\266\373>\343\277\370b\336\376\356\352\324?\324\262\377u\203\004\342\277\373m\330\212\317\320\235\277\253\363\327Rfh\346?\362?\372\230|\263\365?QMRu\252,\262\277\377\204H{\251c\362\277A\260]\200\357\374\313?H\346o\030\260\001\357?\026S\325Z\365\024\364?\216h\301\244TI\353\277\250\027`\240\243`\340?\343\235\263r\262\267\341?\332\317U!\2576\224?\261\374\034\370\247\356\372\277#\356\272Pe\032\354?\010\316{\365r+\352\277:\213\375,i\345\207\277JSH\216\204\271\332?\250\265\315\362\305\266\373\277\272\023$\376\235a\307\277\312\021\026\213\243\317\325?\232e9H\242\370\347?\377\003\310\351\316\037\341\277\200~\207\221\335T\355?\243,rG\331\275\314\277\300\000\366\313O\224\363?\217]{\334];\364\277I\034\237^>\376\373\277>\347\023\000{\302\371\277\276\256CP\251V\363\277\234\355\032\n\3272\365?\200\310^\363q\335\357\277\2249\363\216 C\372\277F\212\341_B\207\316\277\233\327\215\355\230~\272?v\343\241\233mO\365?8\362vv?\310\372?\014\025\330J\232m\270\277\010\316{\365r+\352\277\t\314\227\200\213\233\361\277\241\031a\303X\350\322?8\362vv?\310\372?\372\206I\236^\353\364?QMRu\252,\262\277\004a\300-lk\370\2778\362vv?\310\372?\315\376\327\372\314\024\327\277\267:\'XH\240\345?\n\361|\t\263Z\323?\306\"`H\n\r\321\277@\261\344\271\354\305\354?b\372\356\301\363#\370\277\'\341se\271\204\362?\364O\275\034\346\'\360\2778\362vv?\310\372?\370b\336\376\356\352\324?O\342\212\200\023\352\363?:o\022p}\364\360?u\020o\216\354\315\343\277\364O\275\034\346\'\360\277\251;\313?\023a\360\277QMRu\252,\262\277\340 \030yt\213\353?\326j\014\211\326\013\370?\t\'\254OAW\360?QMRu\252,\262\277QMRu\252,\262\277\315\376\327\372\314\024\327\277I\n\370e\355\371\350?\271\203w\200\337_\327?8\362vv?\310\372?\270L\316P\231\244\370\277\361\346\311>\256\207\357\277B<\005\323@4s\277\007\213kw\231\255w?\367\230\rE}\347\361?\207\215\320+\217\n\306\277\351\370\252\223\232{\366?\250\031D\025\213\360\370?\240A\261\372d\000\356?\223\246\313\004\365\372\365?:\013\234M\270\272\363\277\3352\334\037\223\207\350?x\321\335\364NS\370?\\\005R8\270)\371?\016`\034F\241\252\355?#v\234\022\232T\371?K\233\036\315c\272\352\277\346\246\370\027\364=\366\277\014\025\350\250\"[\363?\214M\270X\364\306\371?\332\317U!\2576\224? -L\352\002\225\367\277\324\262\377u\203\004\342\277\232\235L\003\030\205\355\277\035\021\274d\245I\305?\241\031a\303X\350\322?\010\316{\365r+\352\277\222K\2675??\367\277\020<s\035q\374\202??B(\3170~\370?\302\223\035V{\334\367\277\346\261>\340\352K\355\277\267`vl\2370\356\277b\372\356\301\363#\370\277\225T\374\332\200\305\333\277\201\264\266\327kQ\372\277\247\365\330u\033\360\330?L\220\004\205r\371\253?\315\376\327\372\314\024\327\277\2512\225l\t0\252?\031$\007E\301\016\343?\320G(#d\324\350\277\271\247\342\037O`\367?Y x2\346\243\364?\212V\032\254\003E\370?\366F[\311\326\251\361\277{6\261R\376S\315?\333\017\333\013SX\337\277b\275^K\0131\337?\222\257-X\004y\364?\026&\010hv\226\325?\246\232\304\246e4\352?\351\357H@\213\375\367?5{\322!,\301\311?\314,\037\327\003R\367?\250\031D\025\213\360\370?\233\300M\027X\264\326?\307P\247$AJ\361?\020\226K\214/\247\372\277iS\002n\364W\364\277\204mw0\022\007\266?\245\320\363\354\3630\367\277W\320\251+\'\366\354\277y\310{\241?\325\371?l\245\264\351\232\225\364?\304\245\304N\314\340\332\277z\352\002\314\307E\361\277I\320\343\207\302\345\320?\364O\275\034\346\'\360\277\311\343\316\256l\222\365\277\2249\363\216 C\372\277j\256\026=\252\023\363?:\3470\256H\272\343?$\177\356\007!\345\274\2778\362vv?\310\372?\343\016T\322U\217\356?\346\023\321\215\310\365\361?5\326\363@\'\207\327\277\177W\276\223\316\005\343\277\234\211\244\347\021\371\367\277\236t\202\342S\256\300\277m8\334s\306\335\370\277\347O\272\016\243D\244\277\'\264\246r:\006\324?Q\274\036\276\356a\341?\260i\365m|\246\366?\372\206I\236^\353\364?\0376\256=\022\023\366\277\253\363\327Rfh\346?fC?\352\212\343\371?\225T\374\332\200\305\333\277\270\335\021f\335\\\344\277J\242\234\253\213\250\360\277L\364N\'2\346\360?\241\366_\257\030\271\351\277\3213\200\007^H\363\277\036\224 kg\035\317?\343\212h\222\226\362\303?\273\236\200\314?\342\370?\016`\034F\241\252\355?\367\241o\230\214e\360?\300\000\366\313O\224\363?M\007}Y\200\263\304\277Z\016\264\213\307\247\367?1U\220]\032;\340\277\013\274\267NT/\355\277\001\251\263\032\031d\322\277\332|\263\201\'\020\353\277\250\027`\240\243`\340?\326F\241\351f\013\330?\362?\372\230|\263\365?R\320\266{l\000\274\277\2512\225l\t0\252?\371+5\317\250/\366\277d\'\274\264r\242\326\277\3039\240\036K\327\304?z\352\002\314\307E\361\277\247\365\330u\033\360\330?\361u)\337\n\260\342\277\351\370\252\223\232{\366?\346\001\r\347\251\371\364?\236R\356g\2063\312?O~\024^N\260\366\277V\210\323\354G\365\334?q\177H\'v\r\342?\2249\363\216 C\372\277BT\317\307\201\202\353\277\000a\335\3339c\342?\006=U\216\374j\350?\346\261>\340\352K\355\277\342{,H*G\332?\320G(#d\324\350\2775\326\363@\'\207\327\277\017a\320\213\364X\263?b\372\356\301\363#\370\2771\216\035\002H\206\347?\305\310\305b\014\020\344?\027\361B\255\027k\357\277\213Br\220\375\270\342?&kVJ\243F\342?\315\277Fa/\232\373\277eL\241=\232a\370?A\322\361\372\274w\302\277\303o\262\266\013\334\347?QMRu\252,\262\277\343\235\263r\262\267\341?\302\332\211\t+\014\341?x\376\252\347\315\321\346\277W)\332\205\365!\363?\006O\374\206Mo\373\2771\240\341\250f\202\344?\271\260Ds^\336\365?\217]{\334];\364\277Z\016\264\213\307\247\367?\016\357{\346\375\322\340?\272\026\237\n\013\250\353?\343\235\263r\262\267\341?\017\003$\002\004_\366?\306\001\273\216\r\013\217\277\240\320\020\233\301(\341?5\235f\234\371;\300\2778\362vv?\310\372?F7\305Xlx\367\277J@\n\376\255\376\333\277\255N\354!\034$\325?\333\237\264\225g?\324?QMRu\252,\262\277c\315!\317t\245\351?8\362vv?\310\372?S\231\035\252\2562\330\277\304\245\304N\314\340\332\277\240A\261\372d\000\356?\315#\275\203\364\323\370?\020<s\035q\374\202?c\315!\317t\245\351?\\\005R8\270)\371?\033\\\032\0007\233\350\277\017\003$\002\004_\366?\276\271\211\030\240d\352\277QMRu\252,\262\277A\260]\200\357\374\313?\n\361|\t\263Z\323?\372\007\312/9/\346?\267`vl\2370\356\277QMRu\252,\262\277W\320\251+\'\366\354\277\373\252\264=\316\353\344\277Z\263\237\274\021\354\370\277\373\252\264=\316\353\344\277\304\022\235\304\240\230\346\277\021\335\267?\337\326\343?V\316\305\266?f\364\277QMRu\252,\262\277\372\365\005\211\0323\351?\020\315\364\273ub\331?)\374|\261\031\007\344\277\200\310^\363q\335\357\277\000\322};\335:\357?g\300\332\343\310\017\360?|E\027\233}\001\360?QMRu\252,\262\277\251;\313?\023a\360\277}\317\334\321\231\313\365\277\032\225\247\244d\346\357?\220\213\302\270\224x\324?\240\353\031\347!\253\362\277\026&\010hv\226\325?\0309\031\354\366k\317\277\311GE\3211\314\362?\347O\272\016\243D\244\277\004t\341\017u.\335?\255\024@\313\304\277\200\277\030n\336\246U\227\345\277\306\"`H\n\r\321\277\n\036J\3741\331\361?\353\344\002x\224\357\340?\255N\354!\034$\325?\232e9H\242\370\347?\376k#\2440q\371?\325|\320/\365\007\365?x\200\210\264\222\334\337?c\315!\317t\245\351?s\221\357\037\307\021\365\277\247Os[\031\355\345\277\360H\\\354\2131\364?I\n\370e\355\371\350?\377\003\310\351\316\037\341\277\220\270\217\253\023\367\362?\304\245\304N\314\340\332\277\245\320\363\354\3630\367\277QMRu\252,\262\277\262\204\376\271\334(\350\277\241\211\2079D\001\336\277\355-S\240+\257\322?\010\226h:\375\236\344?\273p9\360\010\245\330\277J\242\234\253\213\250\360\277\224\014&\234\241\304\353?\340 \030yt\213\353?\276\256CP\251V\363\277\335_\251\022\022\006\367\277\20236F\221\r\351\2778\037Di\276F\351\277`\027\3710\t.\354\277\343\345\211\261\221\270\321\277\336VG\277\002\210\370\277N-\371y-)\302?\033\177\033\024w\312\321?B[M\246\251p\361\277\271\203w\200\337_\327?8\362vv?\310\372?\263y\270\361\345\032\361\277\033\177\033\024w\312\321?\376\007\255\201k7\374\277W)\332\205\365!\363?I\200\025\201\0038\371?\305\310\305b\014\020\344?+w\266;7\235\246??.\200\263*\362\342?\233\327\215\355\230~\272?\305\310\305b\014\020\344?}\264\323\2059I\344?\305\334m~\022\234\371?\363\311\277\317\230}\373\277\237\276L\364\242,\344?F7\305Xlx\367\277\342\213\357\313\223\273\344?V\210\323\354G\365\334?6\240\304\372\230\212\372\277\032Z6\213O\013\360\277\007*\n\256\340\245\312?\345@\236\200Gt\340\277\"\177\376e\251\322\367?\322*\036\264N\312\364\277>\347\023\000{\302\371\277\3636\230Em5\367?5\r\235pmB\366?\243\331U@\003\257\365\277E\3724\342\203\205\336?\212V\032\254\003E\370?\\\241\333\025\363\357\373\277\342{,H*G\332?\252\215}\273\271\236\360?/#F\257(V\356?\r\250\0173N\243\367\277\007\325\371\323\232\031\360\277:f\240\276\345\210\267\277QMRu\252,\262\277\000\322};\335:\357?bp)\213\327Y\362?\214M\270X\364\306\371?\240\320\020\233\301(\341?R\320\306\331\364\355\366?\002+\221\347\335n\353?]q\223\026\007+\311\277s\365eB\214K\362?Z\016\264\213\307\247\367?A\260]\200\357\374\313?)FG\303h\205\307?\222BU\342/\301\370\277\372\206I\236^\353\364?Z\016\264\213\307\247\367?\332|\263\201\'\020\353\277\032\225\247\244d\346\357?\247\365\330u\033\360\330?\277\022\272rn\220\360?:\013\234M\270\272\363\277\273\236\200\314?\342\370?\223\235i\261\345|\367?\232\222\006;!w\366\277E\3724\342\203\205\336?8\362vv?\310\372?\240\353\031\347!\253\362\277c\0055\212\3521\357\277y\244\020\002\320\324\331?8\362vv?\310\372?]KD\002\260\232\320\277\256\250\206\007\032!\342\277\245=\314b\310\350\362?H\222\331\'\"4\366? \2134R\201\311\227?t\"35\013\312\340\277\315#\275\203\364\323\370?\325\017\370\271 P\371\277\370b\336\376\356\352\324?J\242\234\253\213\250\360\277\017a\320\213\364X\263?\317\332O\255\217\034\335\277\373\252\264=\316\353\344\277\212V\032\254\003E\370?\376\273\361\252\357\036\321?\250\027`\240\243`\340?O\006\366\037\203\352\343\277}\264\323\2059I\344?F7\305Xlx\367\277\322}:\273$\331\313\277\220\213\302\270\224x\324?\223\235i\261\345|\367?f\227\0177\264\240\306?\030\335\232\221\021\337\371\277QMRu\252,\262\277\311GE\3211\314\362?\033\177\033\024w\312\321?\345U\3353\323\266\301?5\004;\035^\304\367?\243,rG\331\275\314\277\\\361\251\034\262\235\343?\271\260Ds^\336\365?-\220\036%\375\r\332?\022\n\2052^U\362\277\303\3561%1\230\366?u\354\003\357|\315\363?\240A\261\372d\000\356?\004a\300-lk\370\277\034Hr\3440\017\363\277\241\366_\257\030\271\351\277\360H\\\354\2131\364?\'}\375B\364J\365\277\355\235y\026\027\310\335\277\205\360\3336\324\332\277?8\362vv?\310\372?b\372\356\301\363#\370\277\036\266\264\3454\230\305\277\272Cl\375\211&\372\277o&\030\315\247\341\373\277\341h\356\267S\214\333\277\262\204\376\271\334(\350\277@\261\344\271\354\305\354?QlP\267/\264\371\277U\005o\346\205!\323?\032\225\247\244d\346\357?\023\025\313\372Tc\351\277<\212\033\274\335v\342\277Hu\317\270\014*\342?c\315!\317t\245\351?\033\177\033\024w\312\321?\257rGc\0037\272\277[\316\250\010rn\332\277\300\031G#\316\323\244?\255{\271\024\233\242\363?\034Hr\3440\017\363\277\262\276?\244]\"\265?\017\251ln8j\337?V\210\323\354G\365\334?\255\001\362\263%\357\236?<\371\327\246\231\276\366\277\307\365\222U\213\216\362\277q\376\307\225\233\311\360?\222\323\230\367sy\344\277\231\377\336\260\365.\362?\327\331\310s\222S\354?9\305\251\203\300I\334?\006O\374\206Mo\373\277\376k#\2440q\371?\362\345B\005\261\276\336?8BE}\376u\322?\262\276?\244]\"\265?i\200\317`s\326\322\277c^e\344\270]\365?\216f\335/m\271\362\277~\331\233`\223\020\334?\245\320\363\354\3630\367\277\022\201)\207q\\\303\2778\362vv?\310\372?\0309\031\354\366k\317\277\306H\257\\a\235\311\277\313\321\n\010N\226\370\277\247\365\330u\033\360\330?51\010\020\335B\346\277\205\360\3336\324\332\277?\004t\341\017u.\335?QMRu\252,\262\277,5\nVGR\353?\254 \245E\345\346\364\277Pu\262\n?2\370\277y\310{\241?\325\371?\245\320\363\354\3630\367\277\330\216w(F\014\350\277\277_\3572\242g\335?\371\217\253\361mi\363?\033\177\033\024w\312\321?c\0055\212\3521\357\277\207\215\320+\217\n\306\277\276\271\211\030\240d\352\277c\315!\317t\245\351?\220\213\302\270\224x\324?o\212\216\357l\033\371?\243\344\233\010\372\274\354\277\313\224z\221e\243\337?\0376\256=\022\023\366\277:o\022p}\364\360?o#\272n\010\223\301\277\375\020\017\325z\265\372\277/\372{\216d\177\321\277\325\030Z\r0\316\367\277\007\213kw\231\255w?\314,\037\327\003R\367?1\216\035\002H\206\347?\306\222l\036k\021\276?\266^\222\367\267\240\365\277\n\361|\t\263Z\323?\231\233h\2160\365\364\277:\013\234M\270\272\363\277^\036w\0171\034\362\277\217\301\361\376\"u\361?\315\310\250\264>\030\372\277d\'\274\264r\242\326\277\222K\2675??\367\277a:\372DI]\325?\026\357^80\333\366\277\317ED\256|D\360\277|\330>%\251I\364\277\275\004\333c\354\253\356?\250\027`\240\243`\340?b\372\356\301\363#\370\277\303\345\317\321!\032\370?\033\\\032\0007\233\350\277S\276\0023\326\361\371?}\317\334\321\231\313\365\277\346\023\321\215\310\365\361?\365Q\241\221\315\267\350\277\255\001\362\263%\357\236?1U\220]\032;\340\277#\356\272Pe\032\354?&kVJ\243F\342?\\\361\251\034\262\235\343?\232\366|]\346\260\363?\033\\\032\0007\233\350\277\205\360\3336\324\332\277?\2512i\354\003\343\361\277O~\024^N\260\366\277\252\215}\273\271\236\360?B<\005\323@4s\277|\220K8\374P\352?\206\236\r\231\260=\342\277\223\235i\261\345|\367?Hu\317\270\014*\342?\031$\007E\301\016\343?\215z\205KsE\350\277\"\210`\271\270P\366?\0376\256=\022\023\366\277\206\236\r\231\260=\342\277\'\313\346H{\320\267?8\362vv?\310\372?\021\023\347\205m\323\360\2778\362vv?\310\372?\255\001\362\263%\357\236?\006L\236(\256 \301\277\356\370\215\345\314\203\354\277;UV\001\177K\314\277s\245\227;\315\235\352\277K\233\036\315c\272\352\277\003\327\372\366O\241\362?\360H\\\354\2131\364?\t\'\254OAW\360?Dw\320\333\301\261\324?\336\214v\005\221\204\325\277\263y\270\361\345\032\361\277\274\300\007\367\307R\360\277\373\252\264=\316\353\344\277\224\372a\365\202\310\356?\267`vl\2370\356\277\241\031a\303X\350\322?V;\236,\024\036\360?:\013\234M\270\272\363\2778\362vv?\310\372?\306\"`H\n\r\321\277\000a\335\3339c\342?A\260]\200\357\374\313?<\371\327\246\231\276\366\277#\356\272Pe\032\354?\371\217\253\361mi\363?\234\355\032\n\3272\365?\253\005\234\371\204d\343?\2512i\354\003\343\361\277(7\013y\374\331\335?\n\272\323\331l\237\364\277u\177+y\250\025\370\277M\345\350\336\2628\316?\262\204\376\271\334(\350\277\037\307\361RV\313\341\277\364\3434\222\266,\275?\2746%\022\336\220\340\277\032\225\247\244d\346\357?s8\277\305\370\345\336\277\250\027`\240\243`\340?@\261\344\271\354\305\354?\212V\032\254\003E\370?\311GE\3211\314\362?c\315!\317t\245\351?\314\334P\320D\244\357\2778\362vv?\310\372?\255\001\362\263%\357\236?8\362vv?\310\372?\261\374\034\370\247\356\372\277\006\247\245\247\036\322\300?8\362vv?\310\372?\305x\367[Mb\374\277\037\243\206\263\346\312\361?\276L\261\242\313\254\336\277\375\020\017\325z\265\372\277\243\331U@\003\257\365\2779\305\251\203\300I\334?\325\030Z\r0\316\367\277\277_\3572\242g\335?\335_\251\022\022\006\367\277\354\010n\027\004\360\360\277\231\377\336\260\365.\362?y\244\020\002\320\324\331?\222\035c\t\303\367\307?\016`\034F\241\252\355?\221\345\\\236\222u\341\277\215o?\203|7\361\277:\013\234M\270\272\363\277:\013\234M\270\272\363\277\222BU\342/\301\370\277\375\020\017\325z\265\372\277\346\001\r\347\251\371\364?:\013\234M\270\272\363\277?K\212\"@\374\366?\034Q\3247@\215\361\277\367\031\216\326W+\343?F7\305Xlx\367\277\256\250\206\007\032!\342\277=\325l\007*\276\346?\376\230\360\226\257\357\347\277\211\016\'\277VL\336?/\315\256\233\345\000\363\277\372\007\312/9/\346?/\372{\216d\177\321\277\267`vl\2370\356\277\303\345\317\321!\032\370?\262\204\376\271\334(\350\277\343\016T\322U\217\356?(\016AX8\003\341\277QMRu\252,\262\277\250\027`\240\243`\340?\357\355s\235\333\302\255?&kVJ\243F\342?\260`\223\032m(\370?\247\365\330u\033\360\330?\260\005\177K\267l\371\277(\016AX8\003\341\277>\036\275/\301}\330?\226g:kW\200\332?\345y+%u\277\347? -L\352\002\225\367\277\373O\240n\0300\326\277|\220K8\374P\352?^\036w\0171\034\362\277%\217\301\351\022G\362\277\262\276?\244]\"\265?\234\355\032\n\3272\365?8\024\376\240\3078\362\277<\212\033\274\335v\342\277M\345\350\336\2628\316?c\315!\317t\245\351?n/z \267_\372\277\346\330A:\225\212\313?\322W\353\246\315H\323\277\355\235y\026\027\310\335\277\006\263r\251\022\251\370?\2250\221;\021\305\373\277x\332?H^\321\366?\2031R\321\251}\360\277\033\177\033\024w\312\321?\217]{\334];\364\277\3145\201*\023\320\365?\314\334P\320D\244\357\277)\374|\261\031\007\344\277\013\204\244\223\336\242\347?<\212\033\274\335v\342\277V;\236,\024\036\360?o~\301\355xD\301?8\024\376\240\3078\362\277Q?\203\304\2605\353?QMRu\252,\262\277\236\010$V7\265\346\277\312\021\026\213\243\317\325?x\332?H^\321\366?K\231:X|*\362\277\\\361\251\034\262\235\343?\343\270\274\276\022:\363\277c\315!\317t\245\351?\205\360\3336\324\332\277?\035JVY\030\237\353\2775\004;\035^\304\367?F\212\341_B\207\316\277>\347\023\000{\302\371\277\177\306z~\212M\367\277:\013\234M\270\272\363\277\300\000\366\313O\224\363?r\310\230O\r\315\323?c\315!\317t\245\351?,5\nVGR\353?\355\260\267\246\355\202\334?\305\334m~\022\234\371?\231,\254\243t\255\340\277\267`vl\2370\356\277lA>\307\325[\367\277o\267[\342\353\231\347\277\023_\225\014\244\341\314? \221\302\014\310\316\364?\323!\274`?L\366\277\267`vl\2370\356\277\027\361B\255\027k\357\277\007\340?\234\221\'\347\2778\362vv?\310\372?\354U\243\3277\307\355?s\221\357\037\307\021\365\277\364O\275\034\346\'\360\277.\262\245O\205~\341?\373\031q(\2123\371\277X\3620V\257f\324\277?K\212\"@\374\366?:\002:\372\250<\365\277+w\266;7\235\246?8\362vv?\310\372?\314,\037\327\003R\367?\033\177\033\024w\312\321?\340M\345k\363\t\372\277\250\027`\240\243`\340?8\362vv?\310\372?c\0055\212\3521\357\277\037\232$`\327L\363?b\372\356\301\363#\370\277\365-&\224\325\311\275\277\267:\'XH\240\345?\037\243\206\263\346\312\361?s8\277\305\370\345\336\277\327\331\310s\222S\354?c\315!\317t\245\351?6\240\304\372\230\212\372\277QMRu\252,\262\277\035JVY\030\237\353\277E\3724\342\203\205\336?:\r\200\302\237J\354\277\250\027`\240\243`\340?\373m\330\212\317\320\235\277\343\270\274\276\022:\363\277\330a\2525\307\215\371?s\221\357\037\307\021\365\277\376+\030!\3337\334\277$\177\356\007!\345\274\277Rc\356c 6\373\277\217\301\361\376\"u\361?\321\375P\301\317K\346?F7\305Xlx\367\277\\\361\251\034\262\235\343?q\177H\'v\r\342?\343\345\211\261\221\270\321\277\000\322};\335:\357?\300\031G#\316\323\244?\312>\343}\"N\364?\303\345\317\321!\032\370?.\264\211\304l\016\372?\247\365\330u\033\360\330?\250\027`\240\243`\340?o~\301\355xD\301?\255\027C\362\325h\366\277\255\001\362\263%\357\236?\276\256CP\251V\363\277\2512i\354\003\343\361\277<\371\327\246\231\276\366\277\346\023\321\215\310\365\361?\221\345\\\236\222u\341\277\326Vdm\320\177\342?@\261\344\271\354\305\354?\311GE\3211\314\362?eU\003\221\251\337\366?U\327\'\nO\344\362\277{\354\346@\257\325\351\277\016\357{\346\375\322\340?\323\2052\203\004\206\363?\004a\300-lk\370\277J@\n\376\255\376\333\277\013\274\267NT/\355\277\031\3248>\002a\373\277\342\213\357\313\223\273\344?\247\365\330u\033\360\330?\372-\031D\220\277\356\277}\264\323\2059I\344?\271\260Ds^\336\365?\211\017\256\370S\025\357\277\260\005\177K\267l\371\277QMRu\252,\262\277\026\357^80\333\366\277C\237 \023\316\311\357?I\n\370e\355\371\350?\346.\332\331(x\343\277\005X^\332\\\355\371\277\234\355\032\n\3272\365?\t\314\227\200\213\233\361\277\355Z \223\252-\361?\336\347\212\324F@\344\277\320\227\366)#\202\360?o#\272n\010\223\301\277\373\031q(\2123\371\277!$\352\226\363\026\371\277J\242\234\253\213\250\360\277\241\342\267\223\022-\364\277\037\243\206\263\346\312\361?\035\022C\236\242\022\346?\305\310\305b\014\020\344?\270U0\244\250\"\367\277\022\n\2052^U\362\277eU\003\221\251\337\366?\274\300\007\367\307R\360\277B[M\246\251p\361\277\234\2620\177\025\"\212?=\325l\007*\276\346?.\262\245O\205~\341?\'\341se\271\204\362?\234\211\244\347\021\371\367\277\004\362\003C\260#\344\277r\310\230O\r\315\323?CI\211\377\212t\364\277G.c\005]\372\370\277]q\223\026\007+\311\277\300\201v]*\330\344?O~\024^N\260\366\277c^e\344\270]\365?\255{\271\024\233\242\363?:\013\234M\270\272\363\277?K\212\"@\374\366?\251\251\rA\027\352\302\277,5\nVGR\353?,\306Mk\213\n\367?\343\270\274\276\022:\363\277\241\031a\303X\350\322?\250\027`\240\243`\340?\343\235\263r\262\267\341?3\3511\321\375A\326?Z\016\264\213\307\247\367?\251\251\rA\027\352\302\277\243\344\233\010\372\274\354\277d\361\214n\344\245\371\277\350\2244q\325A\371\277\332\317U!\2576\224?\217]{\334];\364\277\204\203\004MP\273\360?\017\003$\002\004_\366?\343\0343\341\327s\360?\033\\\032\0007\233\350\277\"\177\376e\251\322\367?J\242\234\253\213\250\360\277F\034\274\014\014\366\345?o#\272n\010\223\301\2776\240\304\372\230\212\372\277NQGk\3171\350?\237n~\355\343~\374\277^)\275\327\'*\351\277c\315!\317t\245\351?CI\211\377\212t\364\277\010\226h:\375\236\344?\000\322};\335:\357?>\036\275/\301}\330?\\\005R8\270)\371?![\223\3069\322\327?:\213\375,i\345\207\277\217\301\361\376\"u\361?\271\260Ds^\336\365?X\3620V\257f\324\277\373\252\264=\316\353\344\277\320\227\366)#\202\360?\2249\363\216 C\372\27751\010\020\335B\346\277\271\203w\200\337_\327?\231\233h\2160\365\364\277\330\3753\023\002T\374\277\201!\177\357\267\033\273\277\367\230\rE}\347\361?\034Q\3247@\215\361\2778\362vv?\310\372?QMRu\252,\262\2778\362vv?\310\372?\334\325\343\333\365;\361?>\347\023\000{\302\371\277\373\252\264=\316\353\344\277\320\355\215=f\327\333?8\037Di\276F\351\277\361u)\337\n\260\342\277q\243\263\306\345\r\362\277\204\037\216*\213\201\363\277\267`vl\2370\356\277\306H\257\\a\235\311\277\207k<\261\301\217\317?c^e\344\270]\365?\226\266\216\210^o\360\277\314,\037\327\003R\367?\006\247\245\247\036\322\300?\376\007\255\201k7\374\277\325|\320/\365\007\365?c\315!\317t\245\351?\303\345\317\321!\032\370?\302\223\035V{\334\367\277\250\031D\025\213\360\370?\005\3056P1\245\365?\262\204\376\271\334(\350\277\200\310^\363q\335\357\277QMRu\252,\262\2778\024\376\240\3078\362\277\306\"`H\n\r\321\277M\345\350\336\2628\316?#\356\272Pe\032\354?\267`vl\2370\356\277u\354\003\357|\315\363?\334y\036\325/\265\270?\267`vl\2370\356\277\267`vl\2370\356\277\364O\275\034\346\'\360\277\032\247kK\203\342\354?\237\322\364\017\251\270\371?QMRu\252,\262\277\345y+%u\277\347?\251\251\rA\027\352\302\277\373\252\264=\316\353\344\277\261\374\034\370\247\356\372\277\267`vl\2370\356\277\\\341\346\230H)\331?%Y\222\243\204J\345?\373m\330\212\317\320\235\277]t\016#tq\355?\260i\365m|\246\366?6\240\304\372\230\212\372\277X\3620V\257f\324\277`\027\3710\t.\354\277\021\335\267?\337\326\343?/#F\257(V\356?p\254\025\032\365\213\360\277\365s(\274U(\320\277\375\343A\342\3736\354?/\326\020\357\364~\361\277\033\\\032\0007\233\350\277R\320\306\331\364\355\366?$\230#=\"\305\360\277\247\365\330u\033\360\330?\373\252\264=\316\353\344\277\024\\7\256\004\223\362?\277]\356\017\355\337\352?\262W1\307]\252\371?g\0034g5\252\334\277\303\212\273\002l^\371\277\330\372\325\264b\005\302\277\372\007\312/9/\346?\300\000\366\313O\224\363?\206C\371\311\372\201\323\277K\231:X|*\362\277o#\272n\010\223\301\277\206C\371\311\372\201\323\2772\037a\027\214>\363?\236\010$V7\265\346\277o\212\216\357l\033\371?\2512i\354\003\343\361\277[\316\250\010rn\332\277z\263LL<\200\303?A\260]\200\357\374\313?\377\003\310\351\316\037\341\277<]N\311^\370\363?\273\236\200\314?\342\370?\271\247\342\037O`\367?:\013\234M\270\272\363\277A\260]\200\357\374\313?b\372\356\301\363#\370\277\023e\231\001\024\021\361?\2512i\354\003\343\361\277y^h\362\373@\241?)\374|\261\031\007\344\277"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2262
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2262
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2262
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 500
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  input: "tensors/component_8"
  input: "tensors/component_9"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "BatchDatasetV2"
  input: "optimizations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Shape"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/Depth/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Depth/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Depth/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Depth/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Depth/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Depth/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Depth/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Depth/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Depth/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/GR/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/GR/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/GR/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/GR/Shape"
  input: "dnn/input_from_feature_columns/input_layer/GR/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/GR/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/GR/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/GR/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/GR/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GR/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GR/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/GR/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/Shape"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ILD_log10/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/PE/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/PE/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PE/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PE/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PE/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PE/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PE/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PE/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PE/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PE/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PE/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/PE/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PHIND/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RELPOS/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/DeltaPHI/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Depth/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GR/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/ILD_log10/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PE/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PHIND/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RELPOS/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\007\000\000\000\364\001\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10878565907478333
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10878565907478333
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 500
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/Shape"
  op: "Shape"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dropout/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/sub"
  op: "Sub"
  input: "dnn/dropout/dropout/sub/x"
  input: "dnn/dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "dnn/dropout/dropout/random_uniform/max"
  input: "dnn/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "dnn/dropout/dropout/random_uniform/RandomUniform"
  input: "dnn/dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/random_uniform"
  op: "Add"
  input: "dnn/dropout/dropout/random_uniform/mul"
  input: "dnn/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/add"
  op: "Add"
  input: "dnn/dropout/dropout/sub"
  input: "dnn/dropout/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/Floor"
  op: "Floor"
  input: "dnn/dropout/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/truediv"
  op: "RealDiv"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout/dropout/mul"
  op: "Mul"
  input: "dnn/dropout/dropout/truediv"
  input: "dnn/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/dropout/dropout/mul"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/dropout/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/dropout/dropout/mul"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/dropout/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\364\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08164966106414795
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08164966106414795
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/dropout/dropout/mul"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/Shape"
  op: "Shape"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/sub"
  op: "Sub"
  input: "dnn/dropout_1/dropout/sub/x"
  input: "dnn/dropout_1/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/dropout_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "dnn/dropout_1/dropout/random_uniform/max"
  input: "dnn/dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "dnn/dropout_1/dropout/random_uniform/RandomUniform"
  input: "dnn/dropout_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/random_uniform"
  op: "Add"
  input: "dnn/dropout_1/dropout/random_uniform/mul"
  input: "dnn/dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/add"
  op: "Add"
  input: "dnn/dropout_1/dropout/sub"
  input: "dnn/dropout_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/Floor"
  op: "Floor"
  input: "dnn/dropout_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/truediv"
  op: "RealDiv"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_1/dropout/mul"
  op: "Mul"
  input: "dnn/dropout_1/dropout/truediv"
  input: "dnn/dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/dropout_1/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/dropout_1/dropout/mul"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/dropout_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/dropout_1/dropout/mul"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/dropout_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/dropout_1/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000,\001\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09258200973272324
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09258200973272324
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/dropout_1/dropout/mul"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/Shape"
  op: "Shape"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/sub"
  op: "Sub"
  input: "dnn/dropout_2/dropout/sub/x"
  input: "dnn/dropout_2/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/dropout_2/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/random_uniform/sub"
  op: "Sub"
  input: "dnn/dropout_2/dropout/random_uniform/max"
  input: "dnn/dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/random_uniform/mul"
  op: "Mul"
  input: "dnn/dropout_2/dropout/random_uniform/RandomUniform"
  input: "dnn/dropout_2/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/random_uniform"
  op: "Add"
  input: "dnn/dropout_2/dropout/random_uniform/mul"
  input: "dnn/dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/add"
  op: "Add"
  input: "dnn/dropout_2/dropout/sub"
  input: "dnn/dropout_2/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/Floor"
  op: "Floor"
  input: "dnn/dropout_2/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/truediv"
  op: "RealDiv"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dropout_2/dropout/mul"
  op: "Mul"
  input: "dnn/dropout_2/dropout/truediv"
  input: "dnn/dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/dropout_2/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/dropout_2/dropout/mul"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/dropout_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/dropout_2/dropout/mul"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/dropout_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_2/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_2/activation/tag"
  input: "dnn/dropout_2/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\001\000\000\t\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.13934659957885742
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.13934659957885742
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel/part_0"
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias/part_0"
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/dropout_2/dropout/mul"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_3/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_3/Size"
  input: "dnn/zero_fraction_3/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_3/LessEqual"
  input: "dnn/zero_fraction_3/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_3/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_3/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_3/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_3/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_3/Size"
  input: "dnn/zero_fraction_3/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_3/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_3/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_3/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_3/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_3/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270C\000\000\t\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Initializer/zeros"
  op: "Fill"
  input: "linear/linear_model/NM_M/weights/part_0/Initializer/zeros/shape_as_tensor"
  input: "linear/linear_model/NM_M/weights/part_0/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 17336
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/NM_M/weights/part_0"
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  input: "linear/linear_model/NM_M/weights/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000O\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11250878870487213
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  op: "Add"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 79
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Assign"
  op: "Assign"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/read"
  op: "Identity"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 79
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/Well_Name_embedding/weights/part_0"
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights/part_0"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  input: "linear/linear_model/bias_weights/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "linear/linear_model/linear_model/linear_model/NM_M/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "linear/linear_model/linear_model/linear_model/NM_M/ExpandDims"
  input: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/indices"
  op: "Where"
  input: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/values"
  op: "GatherNd"
  input: "linear/linear_model/linear_model/linear_model/NM_M/ExpandDims"
  input: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/dense_shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/lookup"
  op: "StringToHashBucketFast"
  input: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/values"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 17336
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/Shape/Cast"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/Shape/Cast"
  input: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice/stack"
  input: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice/stack_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/Cast/x/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/Cast/x"
  op: "Pack"
  input: "linear/linear_model/linear_model/linear_model/NM_M/strided_slice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/Cast/x/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/Cast"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/NM_M/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/indices"
  input: "linear/linear_model/linear_model/linear_model/NM_M/to_sparse_input/dense_shape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/Cast"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice"
  op: "Slice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape:1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice/begin"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Prod"
  op: "Prod"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2"
  op: "GatherV2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape:1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2/indices"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Cast/x"
  op: "Pack"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Prod"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape:1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GreaterEqual"
  op: "GreaterEqual"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Where"
  op: "Where"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Where"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_1"
  op: "GatherV2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseReshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_2"
  op: "GatherV2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Identity"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/GatherV2_2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  op: "ResourceGather"
  input: "linear/linear_model/NM_M/weights/part_0"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Unique"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse"
  op: "SparseSegmentSum"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Shape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice/stack"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice/stack_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/stack"
  op: "Pack"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/stack/0"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Tile"
  op: "Tile"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum"
  op: "Select"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Tile"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/zeros_like"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Cast_1"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/NM_M/SparseReshape:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_1"
  op: "Slice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Cast_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_1/begin"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Shape_1"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_2"
  op: "Slice"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Shape_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_2/begin"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/concat"
  op: "ConcatV2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Slice_2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_2"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/ignore_value"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/ExpandDims"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/indices"
  op: "Where"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/ExpandDims"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\003\000\000\000\002\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/range"
  op: "Range"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/range/start"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/Size"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/ToInt64"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table/ToInt64"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table/table_init"
  op: "LookupTableImportV2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table/ToInt64"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/ToInt64"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/values"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice"
  op: "Slice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/dense_shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice/begin"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Prod"
  op: "Prod"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/dense_shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2/indices"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Cast/x"
  op: "Pack"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Prod"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/indices"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/dense_shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/hash_table_Lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseReshape/Identity"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Where"
  op: "Where"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Where"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseReshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseReshape/Identity"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Identity"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/GatherV2_2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Identity"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/read"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Unique"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice/stack"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice/stack_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/stack"
  op: "Pack"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/stack/0"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Tile"
  op: "Tile"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights"
  op: "Select"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Tile"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/zeros_like"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Cast_1"
  op: "Cast"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_1"
  op: "Slice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Cast_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_1/begin"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Shape_1"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_2"
  op: "Slice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Shape_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_2/begin"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/concat"
  op: "ConcatV2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Slice_2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice/stack"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice/stack_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 79
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/strided_slice"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights"
  op: "Identity"
  input: "linear/linear_model/Well_Name_embedding/weights/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape"
  input: "linear/linear_model/Well_Name_embedding/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/weighted_sum_no_bias"
  op: "AddN"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_2"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights"
  op: "Identity"
  input: "linear/linear_model/bias_weights/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear_model/linear_model/weighted_sum"
  op: "BiasAdd"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum_no_bias"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear/bias/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias"
      }
    }
  }
}
node {
  name: "linear/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/bias/values"
  op: "Pack"
  input: "linear/bias/values/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/bias"
  op: "HistogramSummary"
  input: "linear/bias/tag"
  input: "linear/bias/values"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_size/Size/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/zero_fraction/total_size/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 156024
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_size/Size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 632
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_size/Size_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/zero_fraction/total_size/Size_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 711
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_size/AddN"
  op: "AddN"
  input: "linear/zero_fraction/total_size/Size"
  input: "linear/zero_fraction/total_size/Size_1"
  input: "linear/zero_fraction/total_size/Size_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/Equal"
  op: "Equal"
  input: "linear/zero_fraction/total_size/Size"
  input: "linear/zero_fraction/total_zero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/Equal"
  input: "linear/zero_fraction/total_zero/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/switch_t"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/switch_f"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/pred_id"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/ReadVariableOp/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/ReadVariableOp/Switch"
  op: "Switch"
  input: "linear/linear_model/NM_M/weights/part_0"
  input: "linear/zero_fraction/total_zero/zero_count/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/Size"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 156024
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/LessEqual/y"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/Size"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/LessEqual"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/ReadVariableOp"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/zero_fraction/total_zero/zero_count/zero_fraction/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/ReadVariableOp"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/zero_fraction/total_zero/zero_count/zero_fraction/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/Merge"
  op: "Merge"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/Size"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/Cast"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/zero_fraction/fraction"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/ToFloat"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count/ToFloat/Switch"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/ToFloat/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_size/Size"
  input: "linear/zero_fraction/total_zero/zero_count/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/zero_fraction/total_size/Size"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/mul"
  op: "Mul"
  input: "linear/zero_fraction/total_zero/zero_count/zero_fraction/fraction"
  input: "linear/zero_fraction/total_zero/zero_count/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count/Merge"
  op: "Merge"
  input: "linear/zero_fraction/total_zero/zero_count/mul"
  input: "linear/zero_fraction/total_zero/zero_count/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/Equal_1"
  op: "Equal"
  input: "linear/zero_fraction/total_size/Size_1"
  input: "linear/zero_fraction/total_zero/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/Equal_1"
  input: "linear/zero_fraction/total_zero/Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/switch_t"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/switch_f"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/pred_id"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/Size"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 632
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/LessEqual/y"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/Size"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/LessEqual"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/NotEqual/Switch_1:1"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/read"
  input: "linear/zero_fraction/total_zero/zero_count_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/NotEqual/Switch_1"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/Merge"
  op: "Merge"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/Size"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/fraction"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/ToFloat"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_1/ToFloat/Switch"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/ToFloat/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_size/Size_1"
  input: "linear/zero_fraction/total_zero/zero_count_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/zero_fraction/total_size/Size_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/mul"
  op: "Mul"
  input: "linear/zero_fraction/total_zero/zero_count_1/zero_fraction/fraction"
  input: "linear/zero_fraction/total_zero/zero_count_1/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_1/Merge"
  op: "Merge"
  input: "linear/zero_fraction/total_zero/zero_count_1/mul"
  input: "linear/zero_fraction/total_zero/zero_count_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/Equal_2"
  op: "Equal"
  input: "linear/zero_fraction/total_size/Size_2"
  input: "linear/zero_fraction/total_zero/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/Equal_2"
  input: "linear/zero_fraction/total_zero/Equal_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/switch_t"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/switch_f"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/pred_id"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/Equal_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/ReadVariableOp/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/ReadVariableOp/Switch"
  op: "Switch"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  input: "linear/zero_fraction/total_zero/zero_count_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/Size"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 711
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/LessEqual/y"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/Size"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/LessEqual"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/ReadVariableOp"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/zero_fraction/total_zero/zero_count_2/zero_fraction/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/ReadVariableOp"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/zero_fraction/total_zero/zero_count_2/zero_fraction/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/Merge"
  op: "Merge"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/Size"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/fraction"
  op: "Identity"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/ToFloat"
  op: "Cast"
  input: "linear/zero_fraction/total_zero/zero_count_2/ToFloat/Switch"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/ToFloat/Switch"
  op: "Switch"
  input: "linear/zero_fraction/total_size/Size_2"
  input: "linear/zero_fraction/total_zero/zero_count_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/zero_fraction/total_size/Size_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/mul"
  op: "Mul"
  input: "linear/zero_fraction/total_zero/zero_count_2/zero_fraction/fraction"
  input: "linear/zero_fraction/total_zero/zero_count_2/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/zero_count_2/Merge"
  op: "Merge"
  input: "linear/zero_fraction/total_zero/zero_count_2/mul"
  input: "linear/zero_fraction/total_zero/zero_count_2/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/total_zero/AddN"
  op: "AddN"
  input: "linear/zero_fraction/total_zero/zero_count/Merge"
  input: "linear/zero_fraction/total_zero/zero_count_1/Merge"
  input: "linear/zero_fraction/total_zero/zero_count_2/Merge"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/compute/float32_size"
  op: "Cast"
  input: "linear/zero_fraction/total_size/AddN"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/compute/truediv"
  op: "RealDiv"
  input: "linear/zero_fraction/total_zero/AddN"
  input: "linear/zero_fraction/compute/float32_size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/zero_fraction_or_nan"
  op: "Identity"
  input: "linear/zero_fraction/compute/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/fraction_of_zero_weights/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/fraction_of_zero_weights"
      }
    }
  }
}
node {
  name: "linear/fraction_of_zero_weights"
  op: "ScalarSummary"
  input: "linear/fraction_of_zero_weights/tags"
  input: "linear/zero_fraction/zero_fraction_or_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/Size"
  op: "Size"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "linear/zero_fraction_1/Size"
  input: "linear/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "linear/zero_fraction_1/LessEqual"
  input: "linear/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "linear/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "linear/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "linear/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "linear/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum"
  input: "linear/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/linear_model/linear_model/weighted_sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction_1/cond/count_nonzero/Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum"
  input: "linear/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/linear_model/linear_model/weighted_sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "linear/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "linear/zero_fraction_1/Size"
  input: "linear/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "linear/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "linear/zero_fraction_1/counts_to_fraction/Cast"
  input: "linear/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/fraction"
  op: "Identity"
  input: "linear/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/linear/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "linear/linear/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "linear/linear/fraction_of_zero_values/tags"
  input: "linear/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/linear/activation"
      }
    }
  }
}
node {
  name: "linear/linear/activation"
  op: "HistogramSummary"
  input: "linear/linear/activation/tag"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "dnn/logits/BiasAdd"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "add"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/Shape"
  op: "Shape"
  input: "head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/Shape_1"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/labels/strided_slice/stack"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice"
  op: "StridedSlice"
  input: "head/labels/Shape_1"
  input: "head/labels/strided_slice/stack"
  input: "head/labels/strided_slice/stack_1"
  input: "head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/labels/concat/values_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/concat/axis"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/concat"
  op: "ConcatV2"
  input: "head/labels/strided_slice"
  input: "head/labels/concat/values_1"
  input: "head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Equal"
  op: "Equal"
  input: "head/labels/concat"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/All"
  op: "All"
  input: "head/labels/assert_equal/Equal"
  input: "head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "head/labels/assert_equal/All"
  input: "head/labels/assert_equal/Assert/Assert/data_0"
  input: "head/labels/concat"
  input: "head/labels/assert_equal/Assert/Assert/data_2"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/labels"
  op: "Identity"
  input: "head/labels/ExpandDims"
  input: "^head/labels/assert_equal/Assert/Assert"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 8
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/labels"
  input: "head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/All"
  op: "All"
  input: "head/assert_range/assert_less_equal/LessEqual"
  input: "head/assert_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (head/labels:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "head/assert_range/assert_less_equal/All"
  input: "head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (head/labels:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "head/assert_range/assert_less_equal/All"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "head/labels"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/labels"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "head/assert_range/Const"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/assert_range/assert_non_negative/Const"
  input: "head/labels"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/labels:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/labels:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "head/labels"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/labels"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/Identity"
  op: "Identity"
  input: "head/labels"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "add"
  input: "head/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/ExpandDims"
  op: "ExpandDims"
  input: "head/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/weighted_loss/ToFloat/x"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/Mul"
  op: "Mul"
  input: "head/ExpandDims"
  input: "head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Const"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/weighted_loss/Sum"
  op: "Sum"
  input: "head/weighted_loss/Mul"
  input: "head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/gradients/Fill"
  op: "Fill"
  input: "head/gradients/Shape"
  input: "head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/Fill"
  input: "head/gradients/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "head/gradients/head/weighted_loss/Sum_grad/Reshape"
  input: "head/gradients/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "head/gradients/head/weighted_loss/Sum_grad/Tile"
  input: "head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/Mul"
  input: "head/gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/head/weighted_loss/Mul_grad/Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/ExpandDims"
  input: "head/gradients/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/Mul_1"
  input: "head/gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/head/weighted_loss/Mul_grad/Sum_1"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^head/gradients/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients/head/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "head/gradients/head/ExpandDims_grad/Reshape"
  input: "head/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/gradients/head/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  op: "PreventGradient"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/add_grad/Shape_1"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/add_grad/Shape"
  input: "head/gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/Sum"
  op: "Sum"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "head/gradients/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/add_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/add_grad/Sum"
  input: "head/gradients/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "head/gradients/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/add_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/add_grad/Sum_1"
  input: "head/gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/add_grad/Reshape"
  input: "^head/gradients/add_grad/Reshape_1"
}
node {
  name: "head/gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/add_grad/Reshape"
  input: "^head/gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/add_grad/Reshape_1"
  input: "^head/gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/add_grad/tuple/control_dependency"
  input: "^head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/add_grad/tuple/control_dependency"
  input: "^head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/dropout_2/dropout/mul"
  input: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dnn/dropout_2/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Shape"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Mul"
  op: "Mul"
  input: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Sum"
  op: "Sum"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Mul"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Sum"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/dropout_2/dropout/truediv"
  input: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Mul_1"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Sum_1"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape"
  input: "^head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape_1"
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape"
  input: "^head/gradients/dnn/dropout_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape_1"
  input: "^head/gradients/dnn/dropout_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_2/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Shape"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/tuple/control_dependency"
  input: "dnn/dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/RealDiv"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Sum"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Neg"
  input: "dnn/dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/RealDiv_1"
  input: "dnn/dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/mul"
  op: "Mul"
  input: "head/gradients/dnn/dropout_2/dropout/mul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/mul"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Sum_1"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape"
  input: "^head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape_1"
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape"
  input: "^head/gradients/dnn/dropout_2/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_2/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape_1"
  input: "^head/gradients/dnn/dropout_2/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_2/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "head/gradients/dnn/dropout_2/dropout/truediv_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/dropout_1/dropout/mul"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dnn/dropout_1/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Shape"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Mul"
  op: "Mul"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  input: "dnn/dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Mul"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Sum"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/dropout_1/dropout/truediv"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Mul_1"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Sum_1"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape"
  input: "^head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape"
  input: "^head/gradients/dnn/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape_1"
  input: "^head/gradients/dnn/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Shape"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/tuple/control_dependency"
  input: "dnn/dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/RealDiv"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Sum"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Neg"
  input: "dnn/dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/RealDiv_1"
  input: "dnn/dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/mul"
  op: "Mul"
  input: "head/gradients/dnn/dropout_1/dropout/mul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/mul"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Sum_1"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape"
  input: "^head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape_1"
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape"
  input: "^head/gradients/dnn/dropout_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout_1/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape_1"
  input: "^head/gradients/dnn/dropout_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout_1/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "head/gradients/dnn/dropout_1/dropout/truediv_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/dropout/dropout/mul"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dnn/dropout/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Shape"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Mul"
  op: "Mul"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Mul"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Sum"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/dropout/dropout/truediv"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Mul_1"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Sum_1"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/dropout/dropout/mul_grad/Reshape"
  input: "^head/gradients/dnn/dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Reshape"
  input: "^head/gradients/dnn/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/Reshape_1"
  input: "^head/gradients/dnn/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Shape"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "dnn/dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/RealDiv"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Sum"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Neg"
  input: "dnn/dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/RealDiv_1"
  input: "dnn/dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/mul"
  op: "Mul"
  input: "head/gradients/dnn/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/mul"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Sum_1"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/dropout/dropout/truediv_grad/Reshape"
  input: "^head/gradients/dnn/dropout/dropout/truediv_grad/Reshape_1"
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Reshape"
  input: "^head/gradients/dnn/dropout/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/dropout/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/Reshape_1"
  input: "^head/gradients/dnn/dropout/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/dropout/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "head/gradients/dnn/dropout/dropout/truediv_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 500
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  input: "dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_2/kernel/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_2/bias/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/logits/kernel/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/logits/bias/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad"
  op: "NoOp"
  input: "^head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_2/bias/part_0/ResourceApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_2/kernel/part_0/ResourceApplyAdagrad"
  input: "^head/Adagrad/update_dnn/logits/bias/part_0/ResourceApplyAdagrad"
  input: "^head/Adagrad/update_dnn/logits/kernel/part_0/ResourceApplyAdagrad"
}
node {
  name: "head/gradients_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/gradients_1/Fill"
  op: "Fill"
  input: "head/gradients_1/Shape"
  input: "head/gradients_1/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/Fill"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Tile"
  input: "head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Mul"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/ExpandDims"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Mul_1"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Sum_1"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients_1/head/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "head/gradients_1/head/ExpandDims_grad/Reshape"
  input: "head/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/gradients_1/head/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/zeros_like"
  op: "ZerosLike"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  op: "PreventGradient"
  input: "head/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Shape_1"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/add_grad/Shape"
  input: "head/gradients_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "head/gradients_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/add_grad/Sum"
  input: "head/gradients_1/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "head/gradients_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/add_grad/Sum_1"
  input: "head/gradients_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/add_grad/Reshape"
  input: "^head/gradients_1/add_grad/Reshape_1"
}
node {
  name: "head/gradients_1/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/add_grad/Reshape"
  input: "^head/gradients_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/add_grad/Reshape_1"
  input: "^head/gradients_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients_1/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/add_grad/tuple/control_dependency_1"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/BiasAddGrad"
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/add_grad/tuple/control_dependency_1"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/BiasAddGrad"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/control_dependency"
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/control_dependency"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/control_dependency"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_2_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/control_dependency"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/control_dependency_1"
  input: "linear/linear_model/Well_Name_embedding/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_no_bias_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul_1"
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul_1"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select"
  op: "Select"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Tile"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_2_grad/Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select_1"
  op: "Select"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Tile"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/zeros_like"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select_1"
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select_1"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/tuple/control_dependency"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Reshape_grad/Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  op: "GatherV2"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum_grad/tuple/control_dependency_1"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Cast"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select"
  op: "Select"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Tile"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2_grad/Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select_1"
  op: "Select"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Tile"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/zeros_like"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select_1"
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select_1"
  input: "^head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  op: "SparseSegmentMeanGrad"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights_grad/tuple/control_dependency_1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Cast"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270C\000\000\t\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Const"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/Unique"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\000\000\000\000O\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/Unique"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 17336
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/NM_M/weights/part_0/Ftrl"
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  input: "head/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270C\000\000\t\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Initializer/zeros"
  op: "Fill"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Initializer/zeros/shape_as_tensor"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 17336
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/NM_M/weights/part_0/Ftrl_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "head/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 79
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
  input: "head/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 79
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 79
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  input: "head/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 79
        }
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "head/Const_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights/part_0/Ftrl"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  input: "head/Const_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights/part_0/Ftrl_1"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "head/Ftrl/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.004999999888241291
      }
    }
  }
}
node {
  name: "head/Ftrl/l1_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/Ftrl/l2_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/Ftrl/l2_shrinkage_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/Ftrl/learning_rate_power"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/Shape"
  op: "Shape"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/Shape"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice/stack"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice/stack_1"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/NM_M/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/Unique:1"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/ResourceSparseApplyFtrl"
  op: "ResourceSparseApplyFtrl"
  input: "linear/linear_model/NM_M/weights/part_0"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/UnsortedSegmentSum"
  input: "head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/Unique"
  input: "head/Ftrl/learning_rate"
  input: "head/Ftrl/l1_regularization_strength"
  input: "head/Ftrl/l2_regularization_strength"
  input: "head/Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NM_M/weights/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Shape"
  op: "Shape"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Shape"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice/stack"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice/stack_1"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Unique:1"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/SparseApplyFtrl"
  op: "SparseApplyFtrl"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  input: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Unique"
  input: "head/Ftrl/learning_rate"
  input: "head/Ftrl/l1_regularization_strength"
  input: "head/Ftrl/l2_regularization_strength"
  input: "head/Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/Well_Name_embedding/weights/part_0/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/Well_Name_embedding/weighted_sum_grad/tuple/control_dependency_1"
  input: "head/Ftrl/learning_rate"
  input: "head/Ftrl/l1_regularization_strength"
  input: "head/Ftrl/l2_regularization_strength"
  input: "head/Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/weights/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/bias_weights/part_0/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/bias_weights/part_0"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  input: "head/gradients_1/linear/linear_model/linear_model/linear_model/weighted_sum_grad/tuple/control_dependency_1"
  input: "head/Ftrl/learning_rate"
  input: "head/Ftrl/l1_regularization_strength"
  input: "head/Ftrl/l2_regularization_strength"
  input: "head/Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Ftrl"
  op: "NoOp"
  input: "^head/Ftrl/update_linear/linear_model/NM_M/weights/part_0/ResourceSparseApplyFtrl"
  input: "^head/Ftrl/update_linear/linear_model/Well_Name_embedding/embedding_weights/part_0/SparseApplyFtrl"
  input: "^head/Ftrl/update_linear/linear_model/Well_Name_embedding/weights/part_0/ResourceApplyFtrl"
  input: "^head/Ftrl/update_linear/linear_model/bias_weights/part_0/ResourceApplyFtrl"
}
node {
  name: "head/group_deps"
  op: "NoOp"
  input: "^head/Adagrad"
  input: "^head/Ftrl"
}
node {
  name: "head/AssignAdd/value"
  op: "Const"
  input: "^head/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "head/AssignAdd"
  op: "AssignAdd"
  input: "global_step"
  input: "head/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/ones_like/Shape"
  op: "Shape"
  input: "head/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/ones_like"
  op: "Fill"
  input: "head/ones_like/Shape"
  input: "head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/mul"
  op: "Mul"
  input: "head/mul/x"
  input: "head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/Sum"
  op: "Sum"
  input: "head/mul"
  input: "head/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/truediv"
  op: "RealDiv"
  input: "head/weighted_loss/Sum"
  input: "head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_2/bias/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_2/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_2/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_2/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
  input: "^linear/linear_model/NM_M/weights/part_0/Assign"
  input: "^linear/linear_model/NM_M/weights/part_0/Ftrl/Assign"
  input: "^linear/linear_model/NM_M/weights/part_0/Ftrl_1/Assign"
  input: "^linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Assign"
  input: "^linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl/Assign"
  input: "^linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1/Assign"
  input: "^linear/linear_model/Well_Name_embedding/weights/part_0/Assign"
  input: "^linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl/Assign"
  input: "^linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1/Assign"
  input: "^linear/linear_model/bias_weights/part_0/Assign"
  input: "^linear/linear_model/bias_weights/part_0/Ftrl/Assign"
  input: "^linear/linear_model/bias_weights/part_0/Ftrl_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 29
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "linear/linear_model/NM_M/weights/part_0"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
        string_val: "linear/linear_model/Well_Name_embedding/weights/part_0"
        string_val: "linear/linear_model/bias_weights/part_0"
        string_val: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
        string_val: "dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/logits/bias/part_0/Adagrad"
        string_val: "linear/linear_model/NM_M/weights/part_0/Ftrl"
        string_val: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 29
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "linear/linear_model/NM_M/weights/part_0"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
        string_val: "linear/linear_model/Well_Name_embedding/weights/part_0"
        string_val: "linear/linear_model/bias_weights/part_0"
        string_val: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
        string_val: "dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/logits/bias/part_0/Adagrad"
        string_val: "linear/linear_model/NM_M/weights/part_0/Ftrl"
        string_val: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^linear/linear_model/linear_model/linear_model/Well_Name_embedding/Well_Name_lookup/hash_table/table_init"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_2/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "linear/bias"
  input: "linear/fraction_of_zero_weights"
  input: "linear/linear/fraction_of_zero_values"
  input: "linear/linear/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 14
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_12/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Read_12/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/Identity_24"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_13/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/Read_13/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/Identity_26"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_14/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/Read_14/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/Identity_28"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_15/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/Read_15/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/Identity_30"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_16/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/Read_16/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/Identity_32"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_17/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/Read_17/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/Identity_34"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_18/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/Read_18/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/Identity_36"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_19/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/Read_19/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/Identity_38"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_20/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/Read_20/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/Identity_40"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_21/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/Read_21/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/Identity_42"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_22/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/Read_22/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/Identity_44"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_23/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/Read_23/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/Identity_46"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_24/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/Read_24/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/Identity_48"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_e240736b666c431eaf1b08f5e3a605f0/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: ""
        string_val: "8 79 0,8:0,79"
        string_val: "8 79 0,8:0,79"
        string_val: "8 79 0,8:0,79"
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/read"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl/read"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1/read"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_25/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/Read_25/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/Identity_50"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_26/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/Read_26/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/Identity_52"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_27/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/Read_27/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/Identity_54"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_28/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/Read_28/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/Identity_56"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_29/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/Read_29/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/Identity_58"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_30/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/Read_30/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_61"
  op: "Identity"
  input: "save/Identity_60"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_31/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_62"
  op: "Identity"
  input: "save/Read_31/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_63"
  op: "Identity"
  input: "save/Identity_62"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_32/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_64"
  op: "Identity"
  input: "save/Read_32/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_65"
  op: "Identity"
  input: "save/Identity_64"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_33/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_66"
  op: "Identity"
  input: "save/Read_33/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_67"
  op: "Identity"
  input: "save/Identity_66"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_34/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_68"
  op: "Identity"
  input: "save/Read_34/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_69"
  op: "Identity"
  input: "save/Identity_68"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_35/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_70"
  op: "Identity"
  input: "save/Read_35/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_71"
  op: "Identity"
  input: "save/Identity_70"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_36/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_72"
  op: "Identity"
  input: "save/Read_36/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_73"
  op: "Identity"
  input: "save/Identity_72"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_37/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_74"
  op: "Identity"
  input: "save/Read_37/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_75"
  op: "Identity"
  input: "save/Identity_74"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_38/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_76"
  op: "Identity"
  input: "save/Read_38/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_77"
  op: "Identity"
  input: "save/Identity_76"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_39/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_78"
  op: "Identity"
  input: "save/Read_39/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_79"
  op: "Identity"
  input: "save/Identity_78"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_40/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_80"
  op: "Identity"
  input: "save/Read_40/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_81"
  op: "Identity"
  input: "save/Identity_80"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_41/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_82"
  op: "Identity"
  input: "save/Read_41/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_83"
  op: "Identity"
  input: "save/Identity_82"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_42/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_84"
  op: "Identity"
  input: "save/Read_42/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_85"
  op: "Identity"
  input: "save/Identity_84"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_43/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_86"
  op: "Identity"
  input: "save/Read_43/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_87"
  op: "Identity"
  input: "save/Identity_86"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_44/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_88"
  op: "Identity"
  input: "save/Read_44/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_89"
  op: "Identity"
  input: "save/Identity_88"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_45/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_90"
  op: "Identity"
  input: "save/Read_45/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_91"
  op: "Identity"
  input: "save/Identity_90"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_46/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_92"
  op: "Identity"
  input: "save/Read_46/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_93"
  op: "Identity"
  input: "save/Identity_92"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_47/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_94"
  op: "Identity"
  input: "save/Read_47/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_95"
  op: "Identity"
  input: "save/Identity_94"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_48/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_96"
  op: "Identity"
  input: "save/Read_48/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_97"
  op: "Identity"
  input: "save/Identity_96"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_49/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_98"
  op: "Identity"
  input: "save/Read_49/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_99"
  op: "Identity"
  input: "save/Identity_98"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/Adagrad"
        string_val: "linear/linear_model/NM_M/weights"
        string_val: "linear/linear_model/NM_M/weights/Ftrl"
        string_val: "linear/linear_model/NM_M/weights/Ftrl_1"
        string_val: "linear/linear_model/Well_Name_embedding/weights"
        string_val: "linear/linear_model/Well_Name_embedding/weights/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/weights/Ftrl_1"
        string_val: "linear/linear_model/bias_weights"
        string_val: "linear/linear_model/bias_weights/Ftrl"
        string_val: "linear/linear_model/bias_weights/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: "500 0,500"
        string_val: "500 0,500"
        string_val: "7 500 0,7:0,500"
        string_val: "7 500 0,7:0,500"
        string_val: "400 0,400"
        string_val: "400 0,400"
        string_val: "500 400 0,500:0,400"
        string_val: "500 400 0,500:0,400"
        string_val: "300 0,300"
        string_val: "300 0,300"
        string_val: "400 300 0,400:0,300"
        string_val: "400 300 0,400:0,300"
        string_val: "9 0,9"
        string_val: "9 0,9"
        string_val: "300 9 0,300:0,9"
        string_val: "300 9 0,300:0,9"
        string_val: "17336 9 0,17336:0,9"
        string_val: "17336 9 0,17336:0,9"
        string_val: "17336 9 0,17336:0,9"
        string_val: "79 9 0,79:0,9"
        string_val: "79 9 0,79:0,9"
        string_val: "79 9 0,79:0,9"
        string_val: "9 0,9"
        string_val: "9 0,9"
        string_val: "9 0,9"
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "save/Identity_51"
  input: "save/Identity_53"
  input: "save/Identity_55"
  input: "save/Identity_57"
  input: "save/Identity_59"
  input: "save/Identity_61"
  input: "save/Identity_63"
  input: "save/Identity_65"
  input: "save/Identity_67"
  input: "save/Identity_69"
  input: "save/Identity_71"
  input: "save/Identity_73"
  input: "save/Identity_75"
  input: "save/Identity_77"
  input: "save/Identity_79"
  input: "save/Identity_81"
  input: "save/Identity_83"
  input: "save/Identity_85"
  input: "save/Identity_87"
  input: "save/Identity_89"
  input: "save/Identity_91"
  input: "save/Identity_93"
  input: "save/Identity_95"
  input: "save/Identity_97"
  input: "save/Identity_99"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_100"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/embedding_weights/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: ""
        string_val: "8 79 0,8:0,79"
        string_val: "8 79 0,8:0,79"
        string_val: "8 79 0,8:0,79"
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "linear/linear_model/Well_Name_embedding/embedding_weights/part_0/Ftrl_1"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/Well_Name_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 79
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/Adagrad"
        string_val: "linear/linear_model/NM_M/weights"
        string_val: "linear/linear_model/NM_M/weights/Ftrl"
        string_val: "linear/linear_model/NM_M/weights/Ftrl_1"
        string_val: "linear/linear_model/Well_Name_embedding/weights"
        string_val: "linear/linear_model/Well_Name_embedding/weights/Ftrl"
        string_val: "linear/linear_model/Well_Name_embedding/weights/Ftrl_1"
        string_val: "linear/linear_model/bias_weights"
        string_val: "linear/linear_model/bias_weights/Ftrl"
        string_val: "linear/linear_model/bias_weights/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: "500 0,500"
        string_val: "500 0,500"
        string_val: "7 500 0,7:0,500"
        string_val: "7 500 0,7:0,500"
        string_val: "400 0,400"
        string_val: "400 0,400"
        string_val: "500 400 0,500:0,400"
        string_val: "500 400 0,500:0,400"
        string_val: "300 0,300"
        string_val: "300 0,300"
        string_val: "400 300 0,400:0,300"
        string_val: "400 300 0,400:0,300"
        string_val: "9 0,9"
        string_val: "9 0,9"
        string_val: "300 9 0,300:0,9"
        string_val: "300 9 0,300:0,9"
        string_val: "17336 9 0,17336:0,9"
        string_val: "17336 9 0,17336:0,9"
        string_val: "17336 9 0,17336:0,9"
        string_val: "79 9 0,79:0,9"
        string_val: "79 9 0,79:0,9"
        string_val: "79 9 0,79:0,9"
        string_val: "9 0,9"
        string_val: "9 0,9"
        string_val: "9 0,9"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
        shape {
          dim {
            size: 500
          }
        }
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
        shape {
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 9
          }
        }
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_101"
  op: "Identity"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/Identity_101"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_102"
  op: "Identity"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/Identity_102"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_103"
  op: "Identity"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/Identity_103"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_104"
  op: "Identity"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/Identity_104"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_105"
  op: "Identity"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/Identity_105"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_106"
  op: "Identity"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "save/Identity_106"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_107"
  op: "Identity"
  input: "save/RestoreV2_1:6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/Identity_107"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_108"
  op: "Identity"
  input: "save/RestoreV2_1:7"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "save/Identity_108"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_109"
  op: "Identity"
  input: "save/RestoreV2_1:8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "save/Identity_109"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_110"
  op: "Identity"
  input: "save/RestoreV2_1:9"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  input: "save/Identity_110"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_111"
  op: "Identity"
  input: "save/RestoreV2_1:10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "save/Identity_111"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_112"
  op: "Identity"
  input: "save/RestoreV2_1:11"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  input: "save/Identity_112"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_113"
  op: "Identity"
  input: "save/RestoreV2_1:12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "save/Identity_113"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_114"
  op: "Identity"
  input: "save/RestoreV2_1:13"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0/Adagrad"
  input: "save/Identity_114"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_115"
  op: "Identity"
  input: "save/RestoreV2_1:14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "save/Identity_115"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_116"
  op: "Identity"
  input: "save/RestoreV2_1:15"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0/Adagrad"
  input: "save/Identity_116"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_117"
  op: "Identity"
  input: "save/RestoreV2_1:16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0"
  input: "save/Identity_117"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_118"
  op: "Identity"
  input: "save/RestoreV2_1:17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl"
  input: "save/Identity_118"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_119"
  op: "Identity"
  input: "save/RestoreV2_1:18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 17336
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "linear/linear_model/NM_M/weights/part_0/Ftrl_1"
  input: "save/Identity_119"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_120"
  op: "Identity"
  input: "save/RestoreV2_1:19"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0"
  input: "save/Identity_120"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_121"
  op: "Identity"
  input: "save/RestoreV2_1:20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl"
  input: "save/Identity_121"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_122"
  op: "Identity"
  input: "save/RestoreV2_1:21"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 79
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "linear/linear_model/Well_Name_embedding/weights/part_0/Ftrl_1"
  input: "save/Identity_122"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_123"
  op: "Identity"
  input: "save/RestoreV2_1:22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  input: "save/Identity_123"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_124"
  op: "Identity"
  input: "save/RestoreV2_1:23"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  input: "save/Identity_124"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_125"
  op: "Identity"
  input: "save/RestoreV2_1:24"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  input: "save/Identity_125"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
versions {
  producer: 27
}
